{
  "version": 3,
  "sources": ["../../ts-dedent/src/index.ts", "../../@iconify/utils/lib/icon/defaults.js", "../../@iconify/utils/lib/customisations/defaults.js", "../../@iconify/utils/lib/icon/name.js", "../../@iconify/utils/lib/icon/transformations.js", "../../@iconify/utils/lib/icon/merge.js", "../../@iconify/utils/lib/icon-set/tree.js", "../../@iconify/utils/lib/icon-set/get-icon.js", "../../@iconify/utils/lib/icon-set/validate-basic.js", "../../@iconify/utils/lib/icon-set/get-icons.js", "../../@iconify/utils/lib/svg/size.js", "../../@iconify/utils/lib/svg/defs.js", "../../@iconify/utils/lib/svg/build.js", "../../@iconify/utils/lib/svg/id.js", "../../@iconify/utils/lib/svg/html.js", "../../@iconify/utils/lib/colors/keywords.js", "../../@iconify/utils/lib/css/icons.js", "../../@iconify/utils/lib/loader/custom.js", "../../@iconify/utils/lib/loader/modern.js", "../../@iconify/utils/lib/emoji/format.js", "../../mermaid/dist/chunks/mermaid.core/chunk-JA3XYJ7Z.mjs"],
  "sourcesContent": ["export function dedent(\n  templ: TemplateStringsArray | string,\n  ...values: unknown[]\n): string {\n  let strings = Array.from(typeof templ === 'string' ? [templ] : templ);\n\n  // 1. Remove trailing whitespace.\n  strings[strings.length - 1] = strings[strings.length - 1].replace(\n    /\\r?\\n([\\t ]*)$/,\n    '',\n  );\n\n  // 2. Find all line breaks to determine the highest common indentation level.\n  const indentLengths = strings.reduce((arr, str) => {\n    const matches = str.match(/\\n([\\t ]+|(?!\\s).)/g);\n    if (matches) {\n      return arr.concat(\n        matches.map((match) => match.match(/[\\t ]/g)?.length ?? 0),\n      );\n    }\n    return arr;\n  }, <number[]>[]);\n\n  // 3. Remove the common indentation from all strings.\n  if (indentLengths.length) {\n    const pattern = new RegExp(`\\n[\\t ]{${Math.min(...indentLengths)}}`, 'g');\n\n    strings = strings.map((str) => str.replace(pattern, '\\n'));\n  }\n\n  // 4. Remove leading whitespace.\n  strings[0] = strings[0].replace(/^\\r?\\n/, '');\n\n  // 5. Perform interpolation.\n  let string = strings[0];\n\n  values.forEach((value, i) => {\n    // 5.1 Read current indentation level\n    const endentations = string.match(/(?:^|\\n)( *)$/)\n    const endentation = endentations ? endentations[1] : ''\n    let indentedValue = value\n    // 5.2 Add indentation to values with multiline strings\n    if (typeof value === 'string' && value.includes('\\n')) {\n      indentedValue = String(value)\n        .split('\\n')\n        .map((str, i) => {\n          return i === 0 ? str : `${endentation}${str}`\n        })\n        .join('\\n');\n    }\n\n    string += indentedValue + strings[i + 1];\n  });\n\n  return string;\n}\n\nexport default dedent;\n", "/**\n* Default values for dimensions\n*/\nconst defaultIconDimensions = Object.freeze({\n\tleft: 0,\n\ttop: 0,\n\twidth: 16,\n\theight: 16\n});\n/**\n* Default values for transformations\n*/\nconst defaultIconTransformations = Object.freeze({\n\trotate: 0,\n\tvFlip: false,\n\thFlip: false\n});\n/**\n* Default values for all optional IconifyIcon properties\n*/\nconst defaultIconProps = Object.freeze({\n\t...defaultIconDimensions,\n\t...defaultIconTransformations\n});\n/**\n* Default values for all properties used in ExtendedIconifyIcon\n*/\nconst defaultExtendedIconProps = Object.freeze({\n\t...defaultIconProps,\n\tbody: \"\",\n\thidden: false\n});\n\nexport { defaultExtendedIconProps, defaultIconDimensions, defaultIconProps, defaultIconTransformations };", "import { defaultIconTransformations } from \"../icon/defaults.js\";\n\n/**\n* Default icon customisations values\n*/\nconst defaultIconSizeCustomisations = Object.freeze({\n\twidth: null,\n\theight: null\n});\nconst defaultIconCustomisations = Object.freeze({\n\t...defaultIconSizeCustomisations,\n\t...defaultIconTransformations\n});\n\nexport { defaultIconCustomisations, defaultIconSizeCustomisations };", "/**\n* Expression to test part of icon name.\n*\n* Used when loading icons from Iconify API due to project naming convension.\n* Ignored when using custom icon sets - convension does not apply.\n*/\nconst matchIconName = /^[a-z0-9]+(-[a-z0-9]+)*$/;\n/**\n* Convert string icon name to IconifyIconName object.\n*/\nconst stringToIcon = (value, validate, allowSimpleName, provider = \"\") => {\n\tconst colonSeparated = value.split(\":\");\n\tif (value.slice(0, 1) === \"@\") {\n\t\tif (colonSeparated.length < 2 || colonSeparated.length > 3) return null;\n\t\tprovider = colonSeparated.shift().slice(1);\n\t}\n\tif (colonSeparated.length > 3 || !colonSeparated.length) return null;\n\tif (colonSeparated.length > 1) {\n\t\tconst name$1 = colonSeparated.pop();\n\t\tconst prefix = colonSeparated.pop();\n\t\tconst result = {\n\t\t\tprovider: colonSeparated.length > 0 ? colonSeparated[0] : provider,\n\t\t\tprefix,\n\t\t\tname: name$1\n\t\t};\n\t\treturn validate && !validateIconName(result) ? null : result;\n\t}\n\tconst name = colonSeparated[0];\n\tconst dashSeparated = name.split(\"-\");\n\tif (dashSeparated.length > 1) {\n\t\tconst result = {\n\t\t\tprovider,\n\t\t\tprefix: dashSeparated.shift(),\n\t\t\tname: dashSeparated.join(\"-\")\n\t\t};\n\t\treturn validate && !validateIconName(result) ? null : result;\n\t}\n\tif (allowSimpleName && provider === \"\") {\n\t\tconst result = {\n\t\t\tprovider,\n\t\t\tprefix: \"\",\n\t\t\tname\n\t\t};\n\t\treturn validate && !validateIconName(result, allowSimpleName) ? null : result;\n\t}\n\treturn null;\n};\n/**\n* Check if icon is valid.\n*\n* This function is not part of stringToIcon because validation is not needed for most code.\n*/\nconst validateIconName = (icon, allowSimpleName) => {\n\tif (!icon) return false;\n\treturn !!((allowSimpleName && icon.prefix === \"\" || !!icon.prefix) && !!icon.name);\n};\n\nexport { matchIconName, stringToIcon, validateIconName };", "/**\n* Merge transformations\n*/\nfunction mergeIconTransformations(obj1, obj2) {\n\tconst result = {};\n\tif (!obj1.hFlip !== !obj2.hFlip) result.hFlip = true;\n\tif (!obj1.vFlip !== !obj2.vFlip) result.vFlip = true;\n\tconst rotate = ((obj1.rotate || 0) + (obj2.rotate || 0)) % 4;\n\tif (rotate) result.rotate = rotate;\n\treturn result;\n}\n\nexport { mergeIconTransformations };", "import { defaultExtendedIconProps, defaultIconTransformations } from \"./defaults.js\";\nimport { mergeIconTransformations } from \"./transformations.js\";\n\n/**\n* Merge icon and alias\n*\n* Can also be used to merge default values and icon\n*/\nfunction mergeIconData(parent, child) {\n\tconst result = mergeIconTransformations(parent, child);\n\tfor (const key in defaultExtendedIconProps) if (key in defaultIconTransformations) {\n\t\tif (key in parent && !(key in result)) result[key] = defaultIconTransformations[key];\n\t} else if (key in child) result[key] = child[key];\n\telse if (key in parent) result[key] = parent[key];\n\treturn result;\n}\n\nexport { mergeIconData };", "/**\n* Resolve icon set icons\n*\n* Returns parent icon for each icon\n*/\nfunction getIconsTree(data, names) {\n\tconst icons = data.icons;\n\tconst aliases = data.aliases || Object.create(null);\n\tconst resolved = Object.create(null);\n\tfunction resolve(name) {\n\t\tif (icons[name]) return resolved[name] = [];\n\t\tif (!(name in resolved)) {\n\t\t\tresolved[name] = null;\n\t\t\tconst parent = aliases[name] && aliases[name].parent;\n\t\t\tconst value = parent && resolve(parent);\n\t\t\tif (value) resolved[name] = [parent].concat(value);\n\t\t}\n\t\treturn resolved[name];\n\t}\n\t(names || Object.keys(icons).concat(Object.keys(aliases))).forEach(resolve);\n\treturn resolved;\n}\n\nexport { getIconsTree };", "import { mergeIconData } from \"../icon/merge.js\";\nimport { getIconsTree } from \"./tree.js\";\n\n/**\n* Get icon data, using prepared aliases tree\n*/\nfunction internalGetIconData(data, name, tree) {\n\tconst icons = data.icons;\n\tconst aliases = data.aliases || Object.create(null);\n\tlet currentProps = {};\n\tfunction parse(name$1) {\n\t\tcurrentProps = mergeIconData(icons[name$1] || aliases[name$1], currentProps);\n\t}\n\tparse(name);\n\ttree.forEach(parse);\n\treturn mergeIconData(data, currentProps);\n}\n/**\n* Get data for icon\n*/\nfunction getIconData(data, name) {\n\tif (data.icons[name]) return internalGetIconData(data, name, []);\n\tconst tree = getIconsTree(data, [name])[name];\n\treturn tree ? internalGetIconData(data, name, tree) : null;\n}\n\nexport { getIconData, internalGetIconData };", "import { defaultExtendedIconProps, defaultIconDimensions } from \"../icon/defaults.js\";\n\n/**\n* Optional properties\n*/\nconst optionalPropertyDefaults = {\n\tprovider: \"\",\n\taliases: {},\n\tnot_found: {},\n\t...defaultIconDimensions\n};\n/**\n* Check props\n*/\nfunction checkOptionalProps(item, defaults) {\n\tfor (const prop in defaults) if (prop in item && typeof item[prop] !== typeof defaults[prop]) return false;\n\treturn true;\n}\n/**\n* Validate icon set, return it as IconifyJSON on success, null on failure\n*\n* Unlike validateIconSet(), this function is very basic.\n* It does not throw exceptions, it does not check metadata, it does not fix stuff.\n*/\nfunction quicklyValidateIconSet(obj) {\n\tif (typeof obj !== \"object\" || obj === null) return null;\n\tconst data = obj;\n\tif (typeof data.prefix !== \"string\" || !obj.icons || typeof obj.icons !== \"object\") return null;\n\tif (!checkOptionalProps(obj, optionalPropertyDefaults)) return null;\n\tconst icons = data.icons;\n\tfor (const name in icons) {\n\t\tconst icon = icons[name];\n\t\tif (!name || typeof icon.body !== \"string\" || !checkOptionalProps(icon, defaultExtendedIconProps)) return null;\n\t}\n\tconst aliases = data.aliases || Object.create(null);\n\tfor (const name in aliases) {\n\t\tconst icon = aliases[name];\n\t\tconst parent = icon.parent;\n\t\tif (!name || typeof parent !== \"string\" || !icons[parent] && !aliases[parent] || !checkOptionalProps(icon, defaultExtendedIconProps)) return null;\n\t}\n\treturn data;\n}\n\nexport { quicklyValidateIconSet };", "import { defaultIconDimensions } from \"../icon/defaults.js\";\nimport { getIconsTree } from \"./tree.js\";\n\n/**\n* Optional properties that must be copied when copying icon set\n*/\nconst propsToCopy = Object.keys(defaultIconDimensions).concat([\"provider\"]);\n/**\n* Extract icons from icon set\n*/\nfunction getIcons(data, names, not_found) {\n\tconst icons = Object.create(null);\n\tconst aliases = Object.create(null);\n\tconst result = {\n\t\tprefix: data.prefix,\n\t\ticons\n\t};\n\tconst sourceIcons = data.icons;\n\tconst sourceAliases = data.aliases || Object.create(null);\n\tif (data.lastModified) result.lastModified = data.lastModified;\n\tconst tree = getIconsTree(data, names);\n\tlet empty = true;\n\tfor (const name in tree) if (!tree[name]) {\n\t\tif (not_found && names.indexOf(name) !== -1) (result.not_found || (result.not_found = [])).push(name);\n\t} else if (sourceIcons[name]) {\n\t\ticons[name] = { ...sourceIcons[name] };\n\t\tempty = false;\n\t} else {\n\t\taliases[name] = { ...sourceAliases[name] };\n\t\tresult.aliases = aliases;\n\t}\n\tpropsToCopy.forEach((attr) => {\n\t\tif (attr in data) result[attr] = data[attr];\n\t});\n\treturn empty && not_found !== true ? null : result;\n}\n\nexport { getIcons, propsToCopy };", "/**\n* Regular expressions for calculating dimensions\n*/\nconst unitsSplit = /(-?[0-9.]*[0-9]+[0-9.]*)/g;\nconst unitsTest = /^-?[0-9.]*[0-9]+[0-9.]*$/g;\nfunction calculateSize(size, ratio, precision) {\n\tif (ratio === 1) return size;\n\tprecision = precision || 100;\n\tif (typeof size === \"number\") return Math.ceil(size * ratio * precision) / precision;\n\tif (typeof size !== \"string\") return size;\n\tconst oldParts = size.split(unitsSplit);\n\tif (oldParts === null || !oldParts.length) return size;\n\tconst newParts = [];\n\tlet code = oldParts.shift();\n\tlet isNumber = unitsTest.test(code);\n\twhile (true) {\n\t\tif (isNumber) {\n\t\t\tconst num = parseFloat(code);\n\t\t\tif (isNaN(num)) newParts.push(code);\n\t\t\telse newParts.push(Math.ceil(num * ratio * precision) / precision);\n\t\t} else newParts.push(code);\n\t\tcode = oldParts.shift();\n\t\tif (code === void 0) return newParts.join(\"\");\n\t\tisNumber = !isNumber;\n\t}\n}\n\nexport { calculateSize };", "function splitSVGDefs(content, tag = \"defs\") {\n\tlet defs = \"\";\n\tconst index = content.indexOf(\"<\" + tag);\n\twhile (index >= 0) {\n\t\tconst start = content.indexOf(\">\", index);\n\t\tconst end = content.indexOf(\"</\" + tag);\n\t\tif (start === -1 || end === -1) break;\n\t\tconst endEnd = content.indexOf(\">\", end);\n\t\tif (endEnd === -1) break;\n\t\tdefs += content.slice(start + 1, end).trim();\n\t\tcontent = content.slice(0, index).trim() + content.slice(endEnd + 1);\n\t}\n\treturn {\n\t\tdefs,\n\t\tcontent\n\t};\n}\n/**\n* Merge defs and content\n*/\nfunction mergeDefsAndContent(defs, content) {\n\treturn defs ? \"<defs>\" + defs + \"</defs>\" + content : content;\n}\n/**\n* Wrap SVG content, without wrapping definitions\n*/\nfunction wrapSVGContent(body, start, end) {\n\tconst split = splitSVGDefs(body);\n\treturn mergeDefsAndContent(split.defs, start + split.content + end);\n}\n\nexport { mergeDefsAndContent, splitSVGDefs, wrapSVGContent };", "import { defaultIconProps } from \"../icon/defaults.js\";\nimport { defaultIconCustomisations } from \"../customisations/defaults.js\";\nimport { calculateSize } from \"./size.js\";\nimport { wrapSVGContent } from \"./defs.js\";\n\n/**\n* Check if value should be unset. Allows multiple keywords\n*/\nconst isUnsetKeyword = (value) => value === \"unset\" || value === \"undefined\" || value === \"none\";\n/**\n* Get SVG attributes and content from icon + customisations\n*\n* Does not generate style to make it compatible with frameworks that use objects for style, such as React.\n* Instead, it generates 'inline' value. If true, rendering engine should add verticalAlign: -0.125em to icon.\n*\n* Customisations should be normalised by platform specific parser.\n* Result should be converted to <svg> by platform specific parser.\n* Use replaceIDs to generate unique IDs for body.\n*/\nfunction iconToSVG(icon, customisations) {\n\tconst fullIcon = {\n\t\t...defaultIconProps,\n\t\t...icon\n\t};\n\tconst fullCustomisations = {\n\t\t...defaultIconCustomisations,\n\t\t...customisations\n\t};\n\tconst box = {\n\t\tleft: fullIcon.left,\n\t\ttop: fullIcon.top,\n\t\twidth: fullIcon.width,\n\t\theight: fullIcon.height\n\t};\n\tlet body = fullIcon.body;\n\t[fullIcon, fullCustomisations].forEach((props) => {\n\t\tconst transformations = [];\n\t\tconst hFlip = props.hFlip;\n\t\tconst vFlip = props.vFlip;\n\t\tlet rotation = props.rotate;\n\t\tif (hFlip) if (vFlip) rotation += 2;\n\t\telse {\n\t\t\ttransformations.push(\"translate(\" + (box.width + box.left).toString() + \" \" + (0 - box.top).toString() + \")\");\n\t\t\ttransformations.push(\"scale(-1 1)\");\n\t\t\tbox.top = box.left = 0;\n\t\t}\n\t\telse if (vFlip) {\n\t\t\ttransformations.push(\"translate(\" + (0 - box.left).toString() + \" \" + (box.height + box.top).toString() + \")\");\n\t\t\ttransformations.push(\"scale(1 -1)\");\n\t\t\tbox.top = box.left = 0;\n\t\t}\n\t\tlet tempValue;\n\t\tif (rotation < 0) rotation -= Math.floor(rotation / 4) * 4;\n\t\trotation = rotation % 4;\n\t\tswitch (rotation) {\n\t\t\tcase 1:\n\t\t\t\ttempValue = box.height / 2 + box.top;\n\t\t\t\ttransformations.unshift(\"rotate(90 \" + tempValue.toString() + \" \" + tempValue.toString() + \")\");\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\ttransformations.unshift(\"rotate(180 \" + (box.width / 2 + box.left).toString() + \" \" + (box.height / 2 + box.top).toString() + \")\");\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\ttempValue = box.width / 2 + box.left;\n\t\t\t\ttransformations.unshift(\"rotate(-90 \" + tempValue.toString() + \" \" + tempValue.toString() + \")\");\n\t\t\t\tbreak;\n\t\t}\n\t\tif (rotation % 2 === 1) {\n\t\t\tif (box.left !== box.top) {\n\t\t\t\ttempValue = box.left;\n\t\t\t\tbox.left = box.top;\n\t\t\t\tbox.top = tempValue;\n\t\t\t}\n\t\t\tif (box.width !== box.height) {\n\t\t\t\ttempValue = box.width;\n\t\t\t\tbox.width = box.height;\n\t\t\t\tbox.height = tempValue;\n\t\t\t}\n\t\t}\n\t\tif (transformations.length) body = wrapSVGContent(body, \"<g transform=\\\"\" + transformations.join(\" \") + \"\\\">\", \"</g>\");\n\t});\n\tconst customisationsWidth = fullCustomisations.width;\n\tconst customisationsHeight = fullCustomisations.height;\n\tconst boxWidth = box.width;\n\tconst boxHeight = box.height;\n\tlet width;\n\tlet height;\n\tif (customisationsWidth === null) {\n\t\theight = customisationsHeight === null ? \"1em\" : customisationsHeight === \"auto\" ? boxHeight : customisationsHeight;\n\t\twidth = calculateSize(height, boxWidth / boxHeight);\n\t} else {\n\t\twidth = customisationsWidth === \"auto\" ? boxWidth : customisationsWidth;\n\t\theight = customisationsHeight === null ? calculateSize(width, boxHeight / boxWidth) : customisationsHeight === \"auto\" ? boxHeight : customisationsHeight;\n\t}\n\tconst attributes = {};\n\tconst setAttr = (prop, value) => {\n\t\tif (!isUnsetKeyword(value)) attributes[prop] = value.toString();\n\t};\n\tsetAttr(\"width\", width);\n\tsetAttr(\"height\", height);\n\tconst viewBox = [\n\t\tbox.left,\n\t\tbox.top,\n\t\tboxWidth,\n\t\tboxHeight\n\t];\n\tattributes.viewBox = viewBox.join(\" \");\n\treturn {\n\t\tattributes,\n\t\tviewBox,\n\t\tbody\n\t};\n}\n\nexport { iconToSVG, isUnsetKeyword };", "/**\n* IDs usage:\n*\n* id=\"{id}\"\n* xlink:href=\"#{id}\"\n* url(#{id})\n*\n* From SVG animations:\n*\n* begin=\"0;{id}.end\"\n* begin=\"{id}.end\"\n* begin=\"{id}.click\"\n*/\n/**\n* Regular expression for finding ids\n*/\nconst regex = /\\sid=\"(\\S+)\"/g;\n/**\n* New random-ish prefix for ids\n*\n* Do not use dash, it cannot be used in SVG 2 animations\n*/\nconst randomPrefix = \"IconifyId\" + Date.now().toString(16) + (Math.random() * 16777216 | 0).toString(16);\n/**\n* Counter for ids, increasing with every replacement\n*/\nlet counter = 0;\n/**\n* Replace IDs in SVG output with unique IDs\n*/\nfunction replaceIDs(body, prefix = randomPrefix) {\n\tconst ids = [];\n\tlet match;\n\twhile (match = regex.exec(body)) ids.push(match[1]);\n\tif (!ids.length) return body;\n\tconst suffix = \"suffix\" + (Math.random() * 16777216 | Date.now()).toString(16);\n\tids.forEach((id) => {\n\t\tconst newID = typeof prefix === \"function\" ? prefix(id) : prefix + (counter++).toString();\n\t\tconst escapedID = id.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n\t\tbody = body.replace(new RegExp(\"([#;\\\"])(\" + escapedID + \")([\\\")]|\\\\.[a-z])\", \"g\"), \"$1\" + newID + suffix + \"$3\");\n\t});\n\tbody = body.replace(new RegExp(suffix, \"g\"), \"\");\n\treturn body;\n}\n\nexport { replaceIDs };", "/**\n* Generate <svg>\n*/\nfunction iconToHTML(body, attributes) {\n\tlet renderAttribsHTML = body.indexOf(\"xlink:\") === -1 ? \"\" : \" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\";\n\tfor (const attr in attributes) renderAttribsHTML += \" \" + attr + \"=\\\"\" + attributes[attr] + \"\\\"\";\n\treturn \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\"\" + renderAttribsHTML + \">\" + body + \"</svg>\";\n}\n\nexport { iconToHTML };", "/**\n* Color keywords\n*/\nconst colorKeywords = {\n\ttransparent: { type: \"transparent\" },\n\tnone: { type: \"none\" },\n\tcurrentcolor: { type: \"current\" }\n};\n/**\n* Add color\n*/\nfunction add(keyword, colors) {\n\tconst type = \"rgb\";\n\tconst r = colors[0];\n\tconst length = colors.length;\n\tcolorKeywords[keyword] = {\n\t\ttype,\n\t\tr,\n\t\tg: length > 1 ? colors[1] : r,\n\t\tb: length > 2 ? colors[2] : r,\n\t\talpha: length > 3 ? colors[3] : 1\n\t};\n}\n/**\n* List of base colors. From https://www.w3.org/TR/css3-color/\n*/\nadd(\"silver\", [192]);\nadd(\"gray\", [128]);\nadd(\"white\", [255]);\nadd(\"maroon\", [\n\t128,\n\t0,\n\t0\n]);\nadd(\"red\", [\n\t255,\n\t0,\n\t0\n]);\nadd(\"purple\", [128, 0]);\nadd(\"fuchsia\", [255, 0]);\nadd(\"green\", [0, 128]);\nadd(\"lime\", [0, 255]);\nadd(\"olive\", [\n\t128,\n\t128,\n\t0\n]);\nadd(\"yellow\", [\n\t255,\n\t255,\n\t0\n]);\nadd(\"navy\", [\n\t0,\n\t0,\n\t128\n]);\nadd(\"blue\", [\n\t0,\n\t0,\n\t255\n]);\nadd(\"teal\", [\n\t0,\n\t128,\n\t128\n]);\nadd(\"aqua\", [\n\t0,\n\t255,\n\t255\n]);\n/**\n* List of extended colors. From https://drafts.csswg.org/css-color/\n*/\nadd(\"aliceblue\", [\n\t240,\n\t248,\n\t255\n]);\nadd(\"antiquewhite\", [\n\t250,\n\t235,\n\t215\n]);\nadd(\"aqua\", [\n\t0,\n\t255,\n\t255\n]);\nadd(\"aquamarine\", [\n\t127,\n\t255,\n\t212\n]);\nadd(\"azure\", [\n\t240,\n\t255,\n\t255\n]);\nadd(\"beige\", [\n\t245,\n\t245,\n\t220\n]);\nadd(\"bisque\", [\n\t255,\n\t228,\n\t196\n]);\nadd(\"black\", [0]);\nadd(\"blanchedalmond\", [\n\t255,\n\t235,\n\t205\n]);\nadd(\"blue\", [\n\t0,\n\t0,\n\t255\n]);\nadd(\"blueviolet\", [\n\t138,\n\t43,\n\t226\n]);\nadd(\"brown\", [\n\t165,\n\t42,\n\t42\n]);\nadd(\"burlywood\", [\n\t222,\n\t184,\n\t135\n]);\nadd(\"cadetblue\", [\n\t95,\n\t158,\n\t160\n]);\nadd(\"chartreuse\", [\n\t127,\n\t255,\n\t0\n]);\nadd(\"chocolate\", [\n\t210,\n\t105,\n\t30\n]);\nadd(\"coral\", [\n\t255,\n\t127,\n\t80\n]);\nadd(\"cornflowerblue\", [\n\t100,\n\t149,\n\t237\n]);\nadd(\"cornsilk\", [\n\t255,\n\t248,\n\t220\n]);\nadd(\"crimson\", [\n\t220,\n\t20,\n\t60\n]);\nadd(\"cyan\", [\n\t0,\n\t255,\n\t255\n]);\nadd(\"darkblue\", [\n\t0,\n\t0,\n\t139\n]);\nadd(\"darkcyan\", [\n\t0,\n\t139,\n\t139\n]);\nadd(\"darkgoldenrod\", [\n\t184,\n\t134,\n\t11\n]);\nadd(\"darkgray\", [169]);\nadd(\"darkgreen\", [0, 100]);\nadd(\"darkgrey\", [169]);\nadd(\"darkkhaki\", [\n\t189,\n\t183,\n\t107\n]);\nadd(\"darkmagenta\", [139, 0]);\nadd(\"darkolivegreen\", [\n\t85,\n\t107,\n\t47\n]);\nadd(\"darkorange\", [\n\t255,\n\t140,\n\t0\n]);\nadd(\"darkorchid\", [\n\t153,\n\t50,\n\t204\n]);\nadd(\"darkred\", [\n\t139,\n\t0,\n\t0\n]);\nadd(\"darksalmon\", [\n\t233,\n\t150,\n\t122\n]);\nadd(\"darkseagreen\", [143, 188]);\nadd(\"darkslateblue\", [\n\t72,\n\t61,\n\t139\n]);\nadd(\"darkslategray\", [\n\t47,\n\t79,\n\t79\n]);\nadd(\"darkslategrey\", [\n\t47,\n\t79,\n\t79\n]);\nadd(\"darkturquoise\", [\n\t0,\n\t206,\n\t209\n]);\nadd(\"darkviolet\", [\n\t148,\n\t0,\n\t211\n]);\nadd(\"deeppink\", [\n\t255,\n\t20,\n\t147\n]);\nadd(\"deepskyblue\", [\n\t0,\n\t191,\n\t255\n]);\nadd(\"dimgray\", [105]);\nadd(\"dimgrey\", [105]);\nadd(\"dodgerblue\", [\n\t30,\n\t144,\n\t255\n]);\nadd(\"firebrick\", [\n\t178,\n\t34,\n\t34\n]);\nadd(\"floralwhite\", [\n\t255,\n\t250,\n\t240\n]);\nadd(\"forestgreen\", [34, 139]);\nadd(\"fuchsia\", [255, 0]);\nadd(\"gainsboro\", [220]);\nadd(\"ghostwhite\", [\n\t248,\n\t248,\n\t255\n]);\nadd(\"gold\", [\n\t255,\n\t215,\n\t0\n]);\nadd(\"goldenrod\", [\n\t218,\n\t165,\n\t32\n]);\nadd(\"gray\", [128]);\nadd(\"green\", [0, 128]);\nadd(\"greenyellow\", [\n\t173,\n\t255,\n\t47\n]);\nadd(\"grey\", [128]);\nadd(\"honeydew\", [240, 255]);\nadd(\"hotpink\", [\n\t255,\n\t105,\n\t180\n]);\nadd(\"indianred\", [\n\t205,\n\t92,\n\t92\n]);\nadd(\"indigo\", [\n\t75,\n\t0,\n\t130\n]);\nadd(\"ivory\", [\n\t255,\n\t255,\n\t240\n]);\nadd(\"khaki\", [\n\t240,\n\t230,\n\t140\n]);\nadd(\"lavender\", [\n\t230,\n\t230,\n\t250\n]);\nadd(\"lavenderblush\", [\n\t255,\n\t240,\n\t245\n]);\nadd(\"lawngreen\", [\n\t124,\n\t252,\n\t0\n]);\nadd(\"lemonchiffon\", [\n\t255,\n\t250,\n\t205\n]);\nadd(\"lightblue\", [\n\t173,\n\t216,\n\t230\n]);\nadd(\"lightcoral\", [\n\t240,\n\t128,\n\t128\n]);\nadd(\"lightcyan\", [\n\t224,\n\t255,\n\t255\n]);\nadd(\"lightgoldenrodyellow\", [\n\t250,\n\t250,\n\t210\n]);\nadd(\"lightgray\", [211]);\nadd(\"lightgreen\", [144, 238]);\nadd(\"lightgrey\", [211]);\nadd(\"lightpink\", [\n\t255,\n\t182,\n\t193\n]);\nadd(\"lightsalmon\", [\n\t255,\n\t160,\n\t122\n]);\nadd(\"lightseagreen\", [\n\t32,\n\t178,\n\t170\n]);\nadd(\"lightskyblue\", [\n\t135,\n\t206,\n\t250\n]);\nadd(\"lightslategray\", [\n\t119,\n\t136,\n\t153\n]);\nadd(\"lightslategrey\", [\n\t119,\n\t136,\n\t153\n]);\nadd(\"lightsteelblue\", [\n\t176,\n\t196,\n\t222\n]);\nadd(\"lightyellow\", [\n\t255,\n\t255,\n\t224\n]);\nadd(\"lime\", [0, 255]);\nadd(\"limegreen\", [50, 205]);\nadd(\"linen\", [\n\t250,\n\t240,\n\t230\n]);\nadd(\"magenta\", [255, 0]);\nadd(\"maroon\", [\n\t128,\n\t0,\n\t0\n]);\nadd(\"mediumaquamarine\", [\n\t102,\n\t205,\n\t170\n]);\nadd(\"mediumblue\", [\n\t0,\n\t0,\n\t205\n]);\nadd(\"mediumorchid\", [\n\t186,\n\t85,\n\t211\n]);\nadd(\"mediumpurple\", [\n\t147,\n\t112,\n\t219\n]);\nadd(\"mediumseagreen\", [\n\t60,\n\t179,\n\t113\n]);\nadd(\"mediumslateblue\", [\n\t123,\n\t104,\n\t238\n]);\nadd(\"mediumspringgreen\", [\n\t0,\n\t250,\n\t154\n]);\nadd(\"mediumturquoise\", [\n\t72,\n\t209,\n\t204\n]);\nadd(\"mediumvioletred\", [\n\t199,\n\t21,\n\t133\n]);\nadd(\"midnightblue\", [\n\t25,\n\t25,\n\t112\n]);\nadd(\"mintcream\", [\n\t245,\n\t255,\n\t250\n]);\nadd(\"mistyrose\", [\n\t255,\n\t228,\n\t225\n]);\nadd(\"moccasin\", [\n\t255,\n\t228,\n\t181\n]);\nadd(\"navajowhite\", [\n\t255,\n\t222,\n\t173\n]);\nadd(\"navy\", [\n\t0,\n\t0,\n\t128\n]);\nadd(\"oldlace\", [\n\t253,\n\t245,\n\t230\n]);\nadd(\"olive\", [\n\t128,\n\t128,\n\t0\n]);\nadd(\"olivedrab\", [\n\t107,\n\t142,\n\t35\n]);\nadd(\"orange\", [\n\t255,\n\t165,\n\t0\n]);\nadd(\"orangered\", [\n\t255,\n\t69,\n\t0\n]);\nadd(\"orchid\", [\n\t218,\n\t112,\n\t214\n]);\nadd(\"palegoldenrod\", [\n\t238,\n\t232,\n\t170\n]);\nadd(\"palegreen\", [152, 251]);\nadd(\"paleturquoise\", [\n\t175,\n\t238,\n\t238\n]);\nadd(\"palevioletred\", [\n\t219,\n\t112,\n\t147\n]);\nadd(\"papayawhip\", [\n\t255,\n\t239,\n\t213\n]);\nadd(\"peachpuff\", [\n\t255,\n\t218,\n\t185\n]);\nadd(\"peru\", [\n\t205,\n\t133,\n\t63\n]);\nadd(\"pink\", [\n\t255,\n\t192,\n\t203\n]);\nadd(\"plum\", [221, 160]);\nadd(\"powderblue\", [\n\t176,\n\t224,\n\t230\n]);\nadd(\"purple\", [128, 0]);\nadd(\"rebeccapurple\", [\n\t102,\n\t51,\n\t153\n]);\nadd(\"red\", [\n\t255,\n\t0,\n\t0\n]);\nadd(\"rosybrown\", [\n\t188,\n\t143,\n\t143\n]);\nadd(\"royalblue\", [\n\t65,\n\t105,\n\t225\n]);\nadd(\"saddlebrown\", [\n\t139,\n\t69,\n\t19\n]);\nadd(\"salmon\", [\n\t250,\n\t128,\n\t114\n]);\nadd(\"sandybrown\", [\n\t244,\n\t164,\n\t96\n]);\nadd(\"seagreen\", [\n\t46,\n\t139,\n\t87\n]);\nadd(\"seashell\", [\n\t255,\n\t245,\n\t238\n]);\nadd(\"sienna\", [\n\t160,\n\t82,\n\t45\n]);\nadd(\"silver\", [192]);\nadd(\"skyblue\", [\n\t135,\n\t206,\n\t235\n]);\nadd(\"slateblue\", [\n\t106,\n\t90,\n\t205\n]);\nadd(\"slategray\", [\n\t112,\n\t128,\n\t144\n]);\nadd(\"slategrey\", [\n\t112,\n\t128,\n\t144\n]);\nadd(\"snow\", [\n\t255,\n\t250,\n\t250\n]);\nadd(\"springgreen\", [\n\t0,\n\t255,\n\t127\n]);\nadd(\"steelblue\", [\n\t70,\n\t130,\n\t180\n]);\nadd(\"tan\", [\n\t210,\n\t180,\n\t140\n]);\nadd(\"teal\", [\n\t0,\n\t128,\n\t128\n]);\nadd(\"thistle\", [216, 191]);\nadd(\"tomato\", [\n\t255,\n\t99,\n\t71\n]);\nadd(\"turquoise\", [\n\t64,\n\t224,\n\t208\n]);\nadd(\"violet\", [238, 130]);\nadd(\"wheat\", [\n\t245,\n\t222,\n\t179\n]);\nadd(\"white\", [255]);\nadd(\"whitesmoke\", [245]);\nadd(\"yellow\", [\n\t255,\n\t255,\n\t0\n]);\nadd(\"yellowgreen\", [\n\t154,\n\t205,\n\t50\n]);\n\nexport { colorKeywords };", "import { defaultIconProps } from \"../icon/defaults.js\";\nimport { getIconData } from \"../icon-set/get-icon.js\";\nimport { generateItemCSSRules, generateItemContent, getCommonCSSRules } from \"./common.js\";\nimport { formatCSS } from \"./format.js\";\n\nconst commonSelector = \".icon--{prefix}\";\nconst iconSelector = \".icon--{prefix}--{name}\";\nconst contentSelector = \".icon--{prefix}--{name}::after\";\nconst defaultSelectors = {\n\tcommonSelector,\n\ticonSelector,\n\toverrideSelector: commonSelector + iconSelector\n};\n/**\n* Get data for getIconsCSS()\n*/\nfunction getIconsCSSData(iconSet, names, options = {}) {\n\tconst css = [];\n\tconst errors = [];\n\tconst palette = options.color ? true : void 0;\n\tlet mode = options.mode || typeof palette === \"boolean\" && (palette ? \"background\" : \"mask\");\n\tif (!mode) {\n\t\tfor (let i = 0; i < names.length; i++) {\n\t\t\tconst name = names[i];\n\t\t\tconst icon = getIconData(iconSet, name);\n\t\t\tif (icon) {\n\t\t\t\tconst body = options.customise ? options.customise(icon.body, name) : icon.body;\n\t\t\t\tmode = body.includes(\"currentColor\") ? \"mask\" : \"background\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!mode) {\n\t\t\tmode = \"mask\";\n\t\t\terrors.push(\"/* cannot detect icon mode: not set in options and icon set is missing info, rendering as \" + mode + \" */\");\n\t\t}\n\t}\n\tlet varName = options.varName;\n\tif (varName === void 0 && mode === \"mask\") varName = \"svg\";\n\tconst newOptions = {\n\t\t...options,\n\t\tmode,\n\t\tvarName\n\t};\n\tconst { commonSelector: commonSelector$1, iconSelector: iconSelector$1, overrideSelector } = newOptions.iconSelector ? newOptions : defaultSelectors;\n\tconst iconSelectorWithPrefix = iconSelector$1.replace(/{prefix}/g, iconSet.prefix);\n\tconst commonRules = {\n\t\t...options.rules,\n\t\t...getCommonCSSRules(newOptions)\n\t};\n\tconst hasCommonRules = commonSelector$1 && commonSelector$1 !== iconSelector$1;\n\tconst commonSelectors = /* @__PURE__ */ new Set();\n\tif (hasCommonRules) css.push({\n\t\tselector: commonSelector$1.replace(/{prefix}/g, iconSet.prefix),\n\t\trules: commonRules\n\t});\n\tfor (let i = 0; i < names.length; i++) {\n\t\tconst name = names[i];\n\t\tconst iconData = getIconData(iconSet, name);\n\t\tif (!iconData) {\n\t\t\terrors.push(\"/* Could not find icon: \" + name + \" */\");\n\t\t\tcontinue;\n\t\t}\n\t\tconst body = options.customise ? options.customise(iconData.body, name) : iconData.body;\n\t\tconst rules = generateItemCSSRules({\n\t\t\t...defaultIconProps,\n\t\t\t...iconData,\n\t\t\tbody\n\t\t}, newOptions);\n\t\tlet requiresOverride = false;\n\t\tif (hasCommonRules && overrideSelector) {\n\t\t\tfor (const key in rules) if (key in commonRules) requiresOverride = true;\n\t\t}\n\t\tconst selector = (requiresOverride && overrideSelector ? overrideSelector.replace(/{prefix}/g, iconSet.prefix) : iconSelectorWithPrefix).replace(/{name}/g, name);\n\t\tcss.push({\n\t\t\tselector,\n\t\t\trules\n\t\t});\n\t\tif (!hasCommonRules) commonSelectors.add(selector);\n\t}\n\tconst result = {\n\t\tcss,\n\t\terrors\n\t};\n\tif (!hasCommonRules && commonSelectors.size) {\n\t\tconst selector = Array.from(commonSelectors).join(newOptions.format === \"compressed\" ? \",\" : \", \");\n\t\tresult.common = {\n\t\t\tselector,\n\t\t\trules: commonRules\n\t\t};\n\t}\n\treturn result;\n}\n/**\n* Get CSS for icons as background/mask\n*/\nfunction getIconsCSS(iconSet, names, options = {}) {\n\tconst { css, errors, common } = getIconsCSSData(iconSet, names, options);\n\tif (common) if (css.length === 1 && css[0].selector === common.selector) css[0].rules = {\n\t\t...common.rules,\n\t\t...css[0].rules\n\t};\n\telse css.unshift(common);\n\treturn formatCSS(css, options.format) + (errors.length ? \"\\n\" + errors.join(\"\\n\") + \"\\n\" : \"\");\n}\n/**\n* Get CSS for icons as content\n*/\nfunction getIconsContentCSS(iconSet, names, options) {\n\tconst errors = [];\n\tconst css = [];\n\tconst iconSelectorWithPrefix = (options.iconSelector ?? contentSelector).replace(/{prefix}/g, iconSet.prefix);\n\tfor (let i = 0; i < names.length; i++) {\n\t\tconst name = names[i];\n\t\tconst iconData = getIconData(iconSet, name);\n\t\tif (!iconData) {\n\t\t\terrors.push(\"/* Could not find icon: \" + name + \" */\");\n\t\t\tcontinue;\n\t\t}\n\t\tconst body = options.customise ? options.customise(iconData.body, name) : iconData.body;\n\t\tconst content = generateItemContent({\n\t\t\t...defaultIconProps,\n\t\t\t...iconData,\n\t\t\tbody\n\t\t}, options);\n\t\tconst selector = iconSelectorWithPrefix.replace(/{name}/g, name);\n\t\tcss.push({\n\t\t\tselector,\n\t\t\trules: {\n\t\t\t\t...options.rules,\n\t\t\t\tcontent\n\t\t\t}\n\t\t});\n\t}\n\treturn formatCSS(css, options.format) + (errors.length ? \"\\n\" + errors.join(\"\\n\") + \"\\n\" : \"\");\n}\n\nexport { getIconsCSS, getIconsCSSData, getIconsContentCSS };", "import { trimSVG } from \"../svg/trim.js\";\nimport { mergeIconProps } from \"./utils.js\";\nimport createDebugger from \"debug\";\n\nconst debug = createDebugger(\"@iconify-loader:custom\");\n/**\n* Get custom icon from inline collection or using loader\n*/\nasync function getCustomIcon(custom, collection, icon, options) {\n\tlet result;\n\tdebug(`${collection}:${icon}`);\n\ttry {\n\t\tif (typeof custom === \"function\") result = await custom(icon);\n\t\telse {\n\t\t\tconst inline = custom[icon];\n\t\t\tresult = typeof inline === \"function\" ? await inline() : inline;\n\t\t}\n\t} catch (err) {\n\t\tconsole.warn(`Failed to load custom icon \"${icon}\" in \"${collection}\":`, err);\n\t\treturn;\n\t}\n\tif (result) {\n\t\tconst cleanupIdx = result.indexOf(\"<svg\");\n\t\tif (cleanupIdx > 0) result = result.slice(cleanupIdx);\n\t\tconst { transform } = options?.customizations ?? {};\n\t\tresult = typeof transform === \"function\" ? await transform(result, collection, icon) : result;\n\t\tif (!result.startsWith(\"<svg\")) {\n\t\t\tconsole.warn(`Custom icon \"${icon}\" in \"${collection}\" is not a valid SVG`);\n\t\t\treturn result;\n\t\t}\n\t\treturn await mergeIconProps(options?.customizations?.trimCustomSvg === true ? trimSVG(result) : result, collection, icon, options, void 0);\n\t}\n}\n\nexport { getCustomIcon };", "import { defaultIconCustomisations } from \"../customisations/defaults.js\";\nimport { getIconData } from \"../icon-set/get-icon.js\";\nimport { calculateSize } from \"../svg/size.js\";\nimport { iconToSVG, isUnsetKeyword } from \"../svg/build.js\";\nimport { mergeIconProps } from \"./utils.js\";\nimport createDebugger from \"debug\";\n\nconst debug = createDebugger(\"@iconify-loader:icon\");\nasync function searchForIcon(iconSet, collection, ids, options) {\n\tlet iconData;\n\tconst { customize } = options?.customizations ?? {};\n\tfor (const id of ids) {\n\t\ticonData = getIconData(iconSet, id);\n\t\tif (iconData) {\n\t\t\tdebug(`${collection}:${id}`);\n\t\t\tlet defaultCustomizations = { ...defaultIconCustomisations };\n\t\t\tif (typeof customize === \"function\") {\n\t\t\t\ticonData = Object.assign({}, iconData);\n\t\t\t\tdefaultCustomizations = customize(defaultCustomizations, iconData, `${collection}:${id}`) ?? defaultCustomizations;\n\t\t\t}\n\t\t\tconst { attributes: { width, height,...restAttributes }, body } = iconToSVG(iconData, defaultCustomizations);\n\t\t\tconst scale = options?.scale;\n\t\t\treturn await mergeIconProps(`<svg >${body}</svg>`, collection, id, options, () => {\n\t\t\t\treturn { ...restAttributes };\n\t\t\t}, (props) => {\n\t\t\t\tconst check = (prop, defaultValue) => {\n\t\t\t\t\tconst propValue = props[prop];\n\t\t\t\t\tlet value;\n\t\t\t\t\tif (!isUnsetKeyword(propValue)) {\n\t\t\t\t\t\tif (propValue) return;\n\t\t\t\t\t\tif (typeof scale === \"number\") {\n\t\t\t\t\t\t\tif (scale) value = calculateSize(defaultValue ?? \"1em\", scale);\n\t\t\t\t\t\t} else value = defaultValue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!value) delete props[prop];\n\t\t\t\t\telse props[prop] = value;\n\t\t\t\t};\n\t\t\t\tcheck(\"width\", width);\n\t\t\t\tcheck(\"height\", height);\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport { searchForIcon };", "import { convertEmojiSequenceToUTF16, convertEmojiSequenceToUTF32 } from \"./convert.js\";\n\nconst defaultUnicodeOptions = {\n\tprefix: \"\",\n\tseparator: \"\",\n\tcase: \"lower\",\n\tformat: \"utf-32\",\n\tadd0: false,\n\tthrowOnError: true\n};\n/**\n* Convert number to string\n*/\nfunction convert(sequence, options) {\n\tconst prefix = options.prefix;\n\tconst func = options.case === \"upper\" ? \"toUpperCase\" : \"toLowerCase\";\n\tconst cleanSequence = options.format === \"utf-16\" ? convertEmojiSequenceToUTF16(sequence) : convertEmojiSequenceToUTF32(sequence, options.throwOnError);\n\treturn cleanSequence.map((code) => {\n\t\tlet str = code.toString(16);\n\t\tif (options.add0 && str.length < 4) str = \"0\".repeat(4 - str.length) + str;\n\t\treturn prefix + str[func]();\n\t}).join(options.separator);\n}\n/**\n* Convert unicode number to string\n*\n* Example:\n* \t0x1F600 => '1F600'\n*/\nfunction getEmojiUnicodeString(code, options = {}) {\n\treturn convert([code], {\n\t\t...defaultUnicodeOptions,\n\t\t...options\n\t});\n}\nconst defaultSequenceOptions = {\n\t...defaultUnicodeOptions,\n\tseparator: \"-\"\n};\n/**\n* Convert unicode numbers sequence to string\n*\n* Example:\n* \t[0x1f441, 0xfe0f] => '1f441-fe0f'\n*/\nfunction getEmojiSequenceString(sequence, options = {}) {\n\treturn convert(sequence, {\n\t\t...defaultSequenceOptions,\n\t\t...options\n\t});\n}\n/**\n* Convert unicode numbers sequence to string\n*\n* Simple version of `getEmojiSequenceString()` without options that otherwise add to bundle\n*/\nfunction getEmojiSequenceKeyword(sequence) {\n\treturn sequence.map((code) => code.toString(16)).join(\"-\");\n}\n\nexport { getEmojiSequenceKeyword, getEmojiSequenceString, getEmojiUnicodeString };", "import {\n  decodeEntities\n} from \"./chunk-S3R3BYOJ.mjs\";\nimport {\n  common_default,\n  getConfig,\n  hasKatex,\n  renderKatexSanitized,\n  sanitizeText\n} from \"./chunk-ABZYJK2D.mjs\";\nimport {\n  __name,\n  log\n} from \"./chunk-AGHRB4JF.mjs\";\n\n// src/rendering-util/icons.ts\nimport { getIconData, iconToHTML, iconToSVG, replaceIDs, stringToIcon } from \"@iconify/utils\";\nvar unknownIcon = {\n  body: '<g><rect width=\"80\" height=\"80\" style=\"fill: #087ebf; stroke-width: 0px;\"/><text transform=\"translate(21.16 64.67)\" style=\"fill: #fff; font-family: ArialMT, Arial; font-size: 67.75px;\"><tspan x=\"0\" y=\"0\">?</tspan></text></g>',\n  height: 80,\n  width: 80\n};\nvar iconsStore = /* @__PURE__ */ new Map();\nvar loaderStore = /* @__PURE__ */ new Map();\nvar registerIconPacks = /* @__PURE__ */ __name((iconLoaders) => {\n  for (const iconLoader of iconLoaders) {\n    if (!iconLoader.name) {\n      throw new Error(\n        'Invalid icon loader. Must have a \"name\" property with non-empty string value.'\n      );\n    }\n    log.debug(\"Registering icon pack:\", iconLoader.name);\n    if (\"loader\" in iconLoader) {\n      loaderStore.set(iconLoader.name, iconLoader.loader);\n    } else if (\"icons\" in iconLoader) {\n      iconsStore.set(iconLoader.name, iconLoader.icons);\n    } else {\n      log.error(\"Invalid icon loader:\", iconLoader);\n      throw new Error('Invalid icon loader. Must have either \"icons\" or \"loader\" property.');\n    }\n  }\n}, \"registerIconPacks\");\nvar getRegisteredIconData = /* @__PURE__ */ __name(async (iconName, fallbackPrefix) => {\n  const data = stringToIcon(iconName, true, fallbackPrefix !== void 0);\n  if (!data) {\n    throw new Error(`Invalid icon name: ${iconName}`);\n  }\n  const prefix = data.prefix || fallbackPrefix;\n  if (!prefix) {\n    throw new Error(`Icon name must contain a prefix: ${iconName}`);\n  }\n  let icons = iconsStore.get(prefix);\n  if (!icons) {\n    const loader = loaderStore.get(prefix);\n    if (!loader) {\n      throw new Error(`Icon set not found: ${data.prefix}`);\n    }\n    try {\n      const loaded = await loader();\n      icons = { ...loaded, prefix };\n      iconsStore.set(prefix, icons);\n    } catch (e) {\n      log.error(e);\n      throw new Error(`Failed to load icon set: ${data.prefix}`);\n    }\n  }\n  const iconData = getIconData(icons, data.name);\n  if (!iconData) {\n    throw new Error(`Icon not found: ${iconName}`);\n  }\n  return iconData;\n}, \"getRegisteredIconData\");\nvar isIconAvailable = /* @__PURE__ */ __name(async (iconName) => {\n  try {\n    await getRegisteredIconData(iconName);\n    return true;\n  } catch {\n    return false;\n  }\n}, \"isIconAvailable\");\nvar getIconSVG = /* @__PURE__ */ __name(async (iconName, customisations, extraAttributes) => {\n  let iconData;\n  try {\n    iconData = await getRegisteredIconData(iconName, customisations?.fallbackPrefix);\n  } catch (e) {\n    log.error(e);\n    iconData = unknownIcon;\n  }\n  const renderData = iconToSVG(iconData, customisations);\n  const svg = iconToHTML(replaceIDs(renderData.body), {\n    ...renderData.attributes,\n    ...extraAttributes\n  });\n  return sanitizeText(svg, getConfig());\n}, \"getIconSVG\");\n\n// src/rendering-util/createText.ts\nimport { select } from \"d3\";\n\n// src/rendering-util/handle-markdown-text.ts\nimport { marked } from \"marked\";\nimport { dedent } from \"ts-dedent\";\nfunction preprocessMarkdown(markdown, { markdownAutoWrap }) {\n  const withoutBR = markdown.replace(/<br\\/>/g, \"\\n\");\n  const withoutMultipleNewlines = withoutBR.replace(/\\n{2,}/g, \"\\n\");\n  const withoutExtraSpaces = dedent(withoutMultipleNewlines);\n  if (markdownAutoWrap === false) {\n    return withoutExtraSpaces.replace(/ /g, \"&nbsp;\");\n  }\n  return withoutExtraSpaces;\n}\n__name(preprocessMarkdown, \"preprocessMarkdown\");\nfunction markdownToLines(markdown, config = {}) {\n  const preprocessedMarkdown = preprocessMarkdown(markdown, config);\n  const nodes = marked.lexer(preprocessedMarkdown);\n  const lines = [[]];\n  let currentLine = 0;\n  function processNode(node, parentType = \"normal\") {\n    if (node.type === \"text\") {\n      const textLines = node.text.split(\"\\n\");\n      textLines.forEach((textLine, index) => {\n        if (index !== 0) {\n          currentLine++;\n          lines.push([]);\n        }\n        textLine.split(\" \").forEach((word) => {\n          word = word.replace(/&#39;/g, `'`);\n          if (word) {\n            lines[currentLine].push({ content: word, type: parentType });\n          }\n        });\n      });\n    } else if (node.type === \"strong\" || node.type === \"em\") {\n      node.tokens.forEach((contentNode) => {\n        processNode(contentNode, node.type);\n      });\n    } else if (node.type === \"html\") {\n      lines[currentLine].push({ content: node.text, type: \"normal\" });\n    }\n  }\n  __name(processNode, \"processNode\");\n  nodes.forEach((treeNode) => {\n    if (treeNode.type === \"paragraph\") {\n      treeNode.tokens?.forEach((contentNode) => {\n        processNode(contentNode);\n      });\n    } else if (treeNode.type === \"html\") {\n      lines[currentLine].push({ content: treeNode.text, type: \"normal\" });\n    } else {\n      lines[currentLine].push({ content: treeNode.raw, type: \"normal\" });\n    }\n  });\n  return lines;\n}\n__name(markdownToLines, \"markdownToLines\");\nfunction markdownToHTML(markdown, { markdownAutoWrap } = {}) {\n  const nodes = marked.lexer(markdown);\n  function output(node) {\n    if (node.type === \"text\") {\n      if (markdownAutoWrap === false) {\n        return node.text.replace(/\\n */g, \"<br/>\").replace(/ /g, \"&nbsp;\");\n      }\n      return node.text.replace(/\\n */g, \"<br/>\");\n    } else if (node.type === \"strong\") {\n      return `<strong>${node.tokens?.map(output).join(\"\")}</strong>`;\n    } else if (node.type === \"em\") {\n      return `<em>${node.tokens?.map(output).join(\"\")}</em>`;\n    } else if (node.type === \"paragraph\") {\n      return `<p>${node.tokens?.map(output).join(\"\")}</p>`;\n    } else if (node.type === \"space\") {\n      return \"\";\n    } else if (node.type === \"html\") {\n      return `${node.text}`;\n    } else if (node.type === \"escape\") {\n      return node.text;\n    }\n    log.warn(`Unsupported markdown: ${node.type}`);\n    return node.raw;\n  }\n  __name(output, \"output\");\n  return nodes.map(output).join(\"\");\n}\n__name(markdownToHTML, \"markdownToHTML\");\n\n// src/rendering-util/splitText.ts\nfunction splitTextToChars(text) {\n  if (Intl.Segmenter) {\n    return [...new Intl.Segmenter().segment(text)].map((s) => s.segment);\n  }\n  return [...text];\n}\n__name(splitTextToChars, \"splitTextToChars\");\nfunction splitWordToFitWidth(checkFit, word) {\n  const characters = splitTextToChars(word.content);\n  return splitWordToFitWidthRecursion(checkFit, [], characters, word.type);\n}\n__name(splitWordToFitWidth, \"splitWordToFitWidth\");\nfunction splitWordToFitWidthRecursion(checkFit, usedChars, remainingChars, type) {\n  if (remainingChars.length === 0) {\n    return [\n      { content: usedChars.join(\"\"), type },\n      { content: \"\", type }\n    ];\n  }\n  const [nextChar, ...rest] = remainingChars;\n  const newWord = [...usedChars, nextChar];\n  if (checkFit([{ content: newWord.join(\"\"), type }])) {\n    return splitWordToFitWidthRecursion(checkFit, newWord, rest, type);\n  }\n  if (usedChars.length === 0 && nextChar) {\n    usedChars.push(nextChar);\n    remainingChars.shift();\n  }\n  return [\n    { content: usedChars.join(\"\"), type },\n    { content: remainingChars.join(\"\"), type }\n  ];\n}\n__name(splitWordToFitWidthRecursion, \"splitWordToFitWidthRecursion\");\nfunction splitLineToFitWidth(line, checkFit) {\n  if (line.some(({ content }) => content.includes(\"\\n\"))) {\n    throw new Error(\"splitLineToFitWidth does not support newlines in the line\");\n  }\n  return splitLineToFitWidthRecursion(line, checkFit);\n}\n__name(splitLineToFitWidth, \"splitLineToFitWidth\");\nfunction splitLineToFitWidthRecursion(words, checkFit, lines = [], newLine = []) {\n  if (words.length === 0) {\n    if (newLine.length > 0) {\n      lines.push(newLine);\n    }\n    return lines.length > 0 ? lines : [];\n  }\n  let joiner = \"\";\n  if (words[0].content === \" \") {\n    joiner = \" \";\n    words.shift();\n  }\n  const nextWord = words.shift() ?? { content: \" \", type: \"normal\" };\n  const lineWithNextWord = [...newLine];\n  if (joiner !== \"\") {\n    lineWithNextWord.push({ content: joiner, type: \"normal\" });\n  }\n  lineWithNextWord.push(nextWord);\n  if (checkFit(lineWithNextWord)) {\n    return splitLineToFitWidthRecursion(words, checkFit, lines, lineWithNextWord);\n  }\n  if (newLine.length > 0) {\n    lines.push(newLine);\n    words.unshift(nextWord);\n  } else if (nextWord.content) {\n    const [line, rest] = splitWordToFitWidth(checkFit, nextWord);\n    lines.push([line]);\n    if (rest.content) {\n      words.unshift(rest);\n    }\n  }\n  return splitLineToFitWidthRecursion(words, checkFit, lines);\n}\n__name(splitLineToFitWidthRecursion, \"splitLineToFitWidthRecursion\");\n\n// src/rendering-util/createText.ts\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr(\"style\", styleFn);\n  }\n}\n__name(applyStyle, \"applyStyle\");\nasync function addHtmlSpan(element, node, width, classes, addBackground = false, config = getConfig()) {\n  const fo = element.append(\"foreignObject\");\n  fo.attr(\"width\", `${10 * width}px`);\n  fo.attr(\"height\", `${10 * width}px`);\n  const div = fo.append(\"xhtml:div\");\n  const sanitizedLabel = hasKatex(node.label) ? await renderKatexSanitized(node.label.replace(common_default.lineBreakRegex, \"\\n\"), config) : sanitizeText(node.label, config);\n  const labelClass = node.isNode ? \"nodeLabel\" : \"edgeLabel\";\n  const span = div.append(\"span\");\n  span.html(sanitizedLabel);\n  applyStyle(span, node.labelStyle);\n  span.attr(\"class\", `${labelClass} ${classes}`);\n  applyStyle(div, node.labelStyle);\n  div.style(\"display\", \"table-cell\");\n  div.style(\"white-space\", \"nowrap\");\n  div.style(\"line-height\", \"1.5\");\n  div.style(\"max-width\", width + \"px\");\n  div.style(\"text-align\", \"center\");\n  div.attr(\"xmlns\", \"http://www.w3.org/1999/xhtml\");\n  if (addBackground) {\n    div.attr(\"class\", \"labelBkg\");\n  }\n  let bbox = div.node().getBoundingClientRect();\n  if (bbox.width === width) {\n    div.style(\"display\", \"table\");\n    div.style(\"white-space\", \"break-spaces\");\n    div.style(\"width\", width + \"px\");\n    bbox = div.node().getBoundingClientRect();\n  }\n  return fo.node();\n}\n__name(addHtmlSpan, \"addHtmlSpan\");\nfunction createTspan(textElement, lineIndex, lineHeight) {\n  return textElement.append(\"tspan\").attr(\"class\", \"text-outer-tspan\").attr(\"x\", 0).attr(\"y\", lineIndex * lineHeight - 0.1 + \"em\").attr(\"dy\", lineHeight + \"em\");\n}\n__name(createTspan, \"createTspan\");\nfunction computeWidthOfText(parentNode, lineHeight, line) {\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, line);\n  const textLength = testSpan.node().getComputedTextLength();\n  testElement.remove();\n  return textLength;\n}\n__name(computeWidthOfText, \"computeWidthOfText\");\nfunction computeDimensionOfText(parentNode, lineHeight, text) {\n  const testElement = parentNode.append(\"text\");\n  const testSpan = createTspan(testElement, 1, lineHeight);\n  updateTextContentAndStyles(testSpan, [{ content: text, type: \"normal\" }]);\n  const textDimension = testSpan.node()?.getBoundingClientRect();\n  if (textDimension) {\n    testElement.remove();\n  }\n  return textDimension;\n}\n__name(computeDimensionOfText, \"computeDimensionOfText\");\nfunction createFormattedText(width, g, structuredText, addBackground = false) {\n  const lineHeight = 1.1;\n  const labelGroup = g.append(\"g\");\n  const bkg = labelGroup.insert(\"rect\").attr(\"class\", \"background\").attr(\"style\", \"stroke: none\");\n  const textElement = labelGroup.append(\"text\").attr(\"y\", \"-10.1\");\n  let lineIndex = 0;\n  for (const line of structuredText) {\n    const checkWidth = /* @__PURE__ */ __name((line2) => computeWidthOfText(labelGroup, lineHeight, line2) <= width, \"checkWidth\");\n    const linesUnderWidth = checkWidth(line) ? [line] : splitLineToFitWidth(line, checkWidth);\n    for (const preparedLine of linesUnderWidth) {\n      const tspan = createTspan(textElement, lineIndex, lineHeight);\n      updateTextContentAndStyles(tspan, preparedLine);\n      lineIndex++;\n    }\n  }\n  if (addBackground) {\n    const bbox = textElement.node().getBBox();\n    const padding = 2;\n    bkg.attr(\"x\", bbox.x - padding).attr(\"y\", bbox.y - padding).attr(\"width\", bbox.width + 2 * padding).attr(\"height\", bbox.height + 2 * padding);\n    return labelGroup.node();\n  } else {\n    return textElement.node();\n  }\n}\n__name(createFormattedText, \"createFormattedText\");\nfunction updateTextContentAndStyles(tspan, wrappedLine) {\n  tspan.text(\"\");\n  wrappedLine.forEach((word, index) => {\n    const innerTspan = tspan.append(\"tspan\").attr(\"font-style\", word.type === \"em\" ? \"italic\" : \"normal\").attr(\"class\", \"text-inner-tspan\").attr(\"font-weight\", word.type === \"strong\" ? \"bold\" : \"normal\");\n    if (index === 0) {\n      innerTspan.text(word.content);\n    } else {\n      innerTspan.text(\" \" + word.content);\n    }\n  });\n}\n__name(updateTextContentAndStyles, \"updateTextContentAndStyles\");\nasync function replaceIconSubstring(text, config = {}) {\n  const pendingReplacements = [];\n  text.replace(/(fa[bklrs]?):fa-([\\w-]+)/g, (fullMatch, prefix, iconName) => {\n    pendingReplacements.push(\n      (async () => {\n        const registeredIconName = `${prefix}:${iconName}`;\n        if (await isIconAvailable(registeredIconName)) {\n          return await getIconSVG(registeredIconName, void 0, { class: \"label-icon\" });\n        } else {\n          return `<i class='${sanitizeText(fullMatch, config).replace(\":\", \" \")}'></i>`;\n        }\n      })()\n    );\n    return fullMatch;\n  });\n  const replacements = await Promise.all(pendingReplacements);\n  return text.replace(/(fa[bklrs]?):fa-([\\w-]+)/g, () => replacements.shift() ?? \"\");\n}\n__name(replaceIconSubstring, \"replaceIconSubstring\");\nvar createText = /* @__PURE__ */ __name(async (el, text = \"\", {\n  style = \"\",\n  isTitle = false,\n  classes = \"\",\n  useHtmlLabels = true,\n  isNode = true,\n  width = 200,\n  addSvgBackground = false\n} = {}, config) => {\n  log.debug(\n    \"XYZ createText\",\n    text,\n    style,\n    isTitle,\n    classes,\n    useHtmlLabels,\n    isNode,\n    \"addSvgBackground: \",\n    addSvgBackground\n  );\n  if (useHtmlLabels) {\n    const htmlText = markdownToHTML(text, config);\n    const decodedReplacedText = await replaceIconSubstring(decodeEntities(htmlText), config);\n    const inputForKatex = text.replace(/\\\\\\\\/g, \"\\\\\");\n    const node = {\n      isNode,\n      label: hasKatex(text) ? inputForKatex : decodedReplacedText,\n      labelStyle: style.replace(\"fill:\", \"color:\")\n    };\n    const vertexNode = await addHtmlSpan(el, node, width, classes, addSvgBackground, config);\n    return vertexNode;\n  } else {\n    const sanitizeBR = text.replace(/<br\\s*\\/?>/g, \"<br/>\");\n    const structuredText = markdownToLines(sanitizeBR.replace(\"<br>\", \"<br/>\"), config);\n    const svgLabel = createFormattedText(\n      width,\n      el,\n      structuredText,\n      text ? addSvgBackground : false\n    );\n    if (isNode) {\n      if (/stroke:/.exec(style)) {\n        style = style.replace(\"stroke:\", \"lineColor:\");\n      }\n      const nodeLabelTextStyle = style.replace(/stroke:[^;]+;?/g, \"\").replace(/stroke-width:[^;]+;?/g, \"\").replace(/fill:[^;]+;?/g, \"\").replace(/color:/g, \"fill:\");\n      select(svgLabel).attr(\"style\", nodeLabelTextStyle);\n    } else {\n      const edgeLabelRectStyle = style.replace(/stroke:[^;]+;?/g, \"\").replace(/stroke-width:[^;]+;?/g, \"\").replace(/fill:[^;]+;?/g, \"\").replace(/background:/g, \"fill:\");\n      select(svgLabel).select(\"rect\").attr(\"style\", edgeLabelRectStyle.replace(/background:/g, \"fill:\"));\n      const edgeLabelTextStyle = style.replace(/stroke:[^;]+;?/g, \"\").replace(/stroke-width:[^;]+;?/g, \"\").replace(/fill:[^;]+;?/g, \"\").replace(/color:/g, \"fill:\");\n      select(svgLabel).select(\"text\").attr(\"style\", edgeLabelTextStyle);\n    }\n    return svgLabel;\n  }\n}, \"createText\");\n\nexport {\n  unknownIcon,\n  registerIconPacks,\n  getIconSVG,\n  computeDimensionOfText,\n  replaceIconSubstring,\n  createText\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAM,SAAU,OACd,OAAoC;AACpC,MAAA,SAAA,CAAA;WAAA,KAAA,GAAA,KAAA,UAAA,QAAA,MAAoB;AAApB,WAAA,KAAA,CAAA,IAAA,UAAA,EAAA;;AAEA,MAAI,UAAU,MAAM,KAAK,OAAO,UAAU,WAAW,CAAC,KAAK,IAAI,KAAK;AAGpE,UAAQ,QAAQ,SAAS,CAAC,IAAI,QAAQ,QAAQ,SAAS,CAAC,EAAE,QACxD,kBACA,EAAE;AAIJ,MAAM,gBAAgB,QAAQ,OAAO,SAAC,KAAK,KAAG;AAC5C,QAAM,UAAU,IAAI,MAAM,qBAAqB;AAC/C,QAAI,SAAS;AACX,aAAO,IAAI,OACT,QAAQ,IAAI,SAAC,OAAK;AAAA,YAAA,IAAA;AAAK,gBAAA,MAAA,KAAA,MAAM,MAAM,QAAQ,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,YAAM,QAAA,OAAA,SAAA,KAAI;MAAC,CAAA,CAAC;;AAG9D,WAAO;EACT,GAAa,CAAA,CAAE;AAGf,MAAI,cAAc,QAAQ;AACxB,QAAM,YAAU,IAAI,OAAO,YAAW,KAAK,IAAG,MAAR,MAAY,aAAa,IAAA,KAAM,GAAG;AAExE,cAAU,QAAQ,IAAI,SAAC,KAAG;AAAK,aAAA,IAAI,QAAQ,WAAS,IAAI;IAAzB,CAA0B;;AAI3D,UAAQ,CAAC,IAAI,QAAQ,CAAC,EAAE,QAAQ,UAAU,EAAE;AAG5C,MAAI,SAAS,QAAQ,CAAC;AAEtB,SAAO,QAAQ,SAAC,OAAO,GAAC;AAEtB,QAAM,eAAe,OAAO,MAAM,eAAe;AACjD,QAAM,cAAc,eAAe,aAAa,CAAC,IAAI;AACrD,QAAI,gBAAgB;AAEpB,QAAI,OAAO,UAAU,YAAY,MAAM,SAAS,IAAI,GAAG;AACrD,sBAAgB,OAAO,KAAK,EACzB,MAAM,IAAI,EACV,IAAI,SAAC,KAAKA,IAAC;AACV,eAAOA,OAAM,IAAI,MAAM,KAAG,cAAc;MAC1C,CAAC,EACA,KAAK,IAAI;;AAGd,cAAU,gBAAgB,QAAQ,IAAI,CAAC;EACzC,CAAC;AAED,SAAO;AACT;;;ACpDA,IAAM,wBAAwB,OAAO,OAAO;AAAA,EAC3C,MAAM;AAAA,EACN,KAAK;AAAA,EACL,OAAO;AAAA,EACP,QAAQ;AACT,CAAC;AAID,IAAM,6BAA6B,OAAO,OAAO;AAAA,EAChD,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,OAAO;AACR,CAAC;AAID,IAAM,mBAAmB,OAAO,OAAO;AAAA,EACtC,GAAG;AAAA,EACH,GAAG;AACJ,CAAC;AAID,IAAM,2BAA2B,OAAO,OAAO;AAAA,EAC9C,GAAG;AAAA,EACH,MAAM;AAAA,EACN,QAAQ;AACT,CAAC;;;AC1BD,IAAM,gCAAgC,OAAO,OAAO;AAAA,EACnD,OAAO;AAAA,EACP,QAAQ;AACT,CAAC;AACD,IAAM,4BAA4B,OAAO,OAAO;AAAA,EAC/C,GAAG;AAAA,EACH,GAAG;AACJ,CAAC;;;ACFD,IAAM,eAAe,CAAC,OAAO,UAAU,iBAAiB,WAAW,OAAO;AACzE,QAAM,iBAAiB,MAAM,MAAM,GAAG;AACtC,MAAI,MAAM,MAAM,GAAG,CAAC,MAAM,KAAK;AAC9B,QAAI,eAAe,SAAS,KAAK,eAAe,SAAS,EAAG,QAAO;AACnE,eAAW,eAAe,MAAM,EAAE,MAAM,CAAC;AAAA,EAC1C;AACA,MAAI,eAAe,SAAS,KAAK,CAAC,eAAe,OAAQ,QAAO;AAChE,MAAI,eAAe,SAAS,GAAG;AAC9B,UAAM,SAAS,eAAe,IAAI;AAClC,UAAM,SAAS,eAAe,IAAI;AAClC,UAAM,SAAS;AAAA,MACd,UAAU,eAAe,SAAS,IAAI,eAAe,CAAC,IAAI;AAAA,MAC1D;AAAA,MACA,MAAM;AAAA,IACP;AACA,WAAO,YAAY,CAAC,iBAAiB,MAAM,IAAI,OAAO;AAAA,EACvD;AACA,QAAM,OAAO,eAAe,CAAC;AAC7B,QAAM,gBAAgB,KAAK,MAAM,GAAG;AACpC,MAAI,cAAc,SAAS,GAAG;AAC7B,UAAM,SAAS;AAAA,MACd;AAAA,MACA,QAAQ,cAAc,MAAM;AAAA,MAC5B,MAAM,cAAc,KAAK,GAAG;AAAA,IAC7B;AACA,WAAO,YAAY,CAAC,iBAAiB,MAAM,IAAI,OAAO;AAAA,EACvD;AACA,MAAI,mBAAmB,aAAa,IAAI;AACvC,UAAM,SAAS;AAAA,MACd;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,IACD;AACA,WAAO,YAAY,CAAC,iBAAiB,QAAQ,eAAe,IAAI,OAAO;AAAA,EACxE;AACA,SAAO;AACR;AAMA,IAAM,mBAAmB,CAAC,MAAM,oBAAoB;AACnD,MAAI,CAAC,KAAM,QAAO;AAClB,SAAO,CAAC,GAAG,mBAAmB,KAAK,WAAW,MAAM,CAAC,CAAC,KAAK,WAAW,CAAC,CAAC,KAAK;AAC9E;;;ACpDA,SAAS,yBAAyB,MAAM,MAAM;AAC7C,QAAM,SAAS,CAAC;AAChB,MAAI,CAAC,KAAK,UAAU,CAAC,KAAK,MAAO,QAAO,QAAQ;AAChD,MAAI,CAAC,KAAK,UAAU,CAAC,KAAK,MAAO,QAAO,QAAQ;AAChD,QAAM,WAAW,KAAK,UAAU,MAAM,KAAK,UAAU,MAAM;AAC3D,MAAI,OAAQ,QAAO,SAAS;AAC5B,SAAO;AACR;;;ACFA,SAAS,cAAc,QAAQ,OAAO;AACrC,QAAM,SAAS,yBAAyB,QAAQ,KAAK;AACrD,aAAW,OAAO,yBAA0B,KAAI,OAAO,4BAA4B;AAClF,QAAI,OAAO,UAAU,EAAE,OAAO,QAAS,QAAO,GAAG,IAAI,2BAA2B,GAAG;AAAA,EACpF,WAAW,OAAO,MAAO,QAAO,GAAG,IAAI,MAAM,GAAG;AAAA,WACvC,OAAO,OAAQ,QAAO,GAAG,IAAI,OAAO,GAAG;AAChD,SAAO;AACR;;;ACVA,SAAS,aAAa,MAAM,OAAO;AAClC,QAAM,QAAQ,KAAK;AACnB,QAAM,UAAU,KAAK,WAAW,uBAAO,OAAO,IAAI;AAClD,QAAM,WAAW,uBAAO,OAAO,IAAI;AACnC,WAAS,QAAQ,MAAM;AACtB,QAAI,MAAM,IAAI,EAAG,QAAO,SAAS,IAAI,IAAI,CAAC;AAC1C,QAAI,EAAE,QAAQ,WAAW;AACxB,eAAS,IAAI,IAAI;AACjB,YAAM,SAAS,QAAQ,IAAI,KAAK,QAAQ,IAAI,EAAE;AAC9C,YAAM,QAAQ,UAAU,QAAQ,MAAM;AACtC,UAAI,MAAO,UAAS,IAAI,IAAI,CAAC,MAAM,EAAE,OAAO,KAAK;AAAA,IAClD;AACA,WAAO,SAAS,IAAI;AAAA,EACrB;AACA,GAAC,SAAS,OAAO,KAAK,KAAK,EAAE,OAAO,OAAO,KAAK,OAAO,CAAC,GAAG,QAAQ,OAAO;AAC1E,SAAO;AACR;;;ACfA,SAAS,oBAAoB,MAAM,MAAM,MAAM;AAC9C,QAAM,QAAQ,KAAK;AACnB,QAAM,UAAU,KAAK,WAAW,uBAAO,OAAO,IAAI;AAClD,MAAI,eAAe,CAAC;AACpB,WAAS,MAAM,QAAQ;AACtB,mBAAe,cAAc,MAAM,MAAM,KAAK,QAAQ,MAAM,GAAG,YAAY;AAAA,EAC5E;AACA,QAAM,IAAI;AACV,OAAK,QAAQ,KAAK;AAClB,SAAO,cAAc,MAAM,YAAY;AACxC;AAIA,SAAS,YAAY,MAAM,MAAM;AAChC,MAAI,KAAK,MAAM,IAAI,EAAG,QAAO,oBAAoB,MAAM,MAAM,CAAC,CAAC;AAC/D,QAAM,OAAO,aAAa,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI;AAC5C,SAAO,OAAO,oBAAoB,MAAM,MAAM,IAAI,IAAI;AACvD;;;ACnBA,IAAM,2BAA2B;AAAA,EAChC,UAAU;AAAA,EACV,SAAS,CAAC;AAAA,EACV,WAAW,CAAC;AAAA,EACZ,GAAG;AACJ;;;ACJA,IAAM,cAAc,OAAO,KAAK,qBAAqB,EAAE,OAAO,CAAC,UAAU,CAAC;;;ACH1E,IAAM,aAAa;AACnB,IAAM,YAAY;AAClB,SAAS,cAAc,MAAM,OAAO,WAAW;AAC9C,MAAI,UAAU,EAAG,QAAO;AACxB,cAAY,aAAa;AACzB,MAAI,OAAO,SAAS,SAAU,QAAO,KAAK,KAAK,OAAO,QAAQ,SAAS,IAAI;AAC3E,MAAI,OAAO,SAAS,SAAU,QAAO;AACrC,QAAM,WAAW,KAAK,MAAM,UAAU;AACtC,MAAI,aAAa,QAAQ,CAAC,SAAS,OAAQ,QAAO;AAClD,QAAM,WAAW,CAAC;AAClB,MAAI,OAAO,SAAS,MAAM;AAC1B,MAAI,WAAW,UAAU,KAAK,IAAI;AAClC,SAAO,MAAM;AACZ,QAAI,UAAU;AACb,YAAM,MAAM,WAAW,IAAI;AAC3B,UAAI,MAAM,GAAG,EAAG,UAAS,KAAK,IAAI;AAAA,UAC7B,UAAS,KAAK,KAAK,KAAK,MAAM,QAAQ,SAAS,IAAI,SAAS;AAAA,IAClE,MAAO,UAAS,KAAK,IAAI;AACzB,WAAO,SAAS,MAAM;AACtB,QAAI,SAAS,OAAQ,QAAO,SAAS,KAAK,EAAE;AAC5C,eAAW,CAAC;AAAA,EACb;AACD;;;ACzBA,SAAS,aAAa,SAAS,MAAM,QAAQ;AAC5C,MAAI,OAAO;AACX,QAAM,QAAQ,QAAQ,QAAQ,MAAM,GAAG;AACvC,SAAO,SAAS,GAAG;AAClB,UAAM,QAAQ,QAAQ,QAAQ,KAAK,KAAK;AACxC,UAAM,MAAM,QAAQ,QAAQ,OAAO,GAAG;AACtC,QAAI,UAAU,MAAM,QAAQ,GAAI;AAChC,UAAM,SAAS,QAAQ,QAAQ,KAAK,GAAG;AACvC,QAAI,WAAW,GAAI;AACnB,YAAQ,QAAQ,MAAM,QAAQ,GAAG,GAAG,EAAE,KAAK;AAC3C,cAAU,QAAQ,MAAM,GAAG,KAAK,EAAE,KAAK,IAAI,QAAQ,MAAM,SAAS,CAAC;AAAA,EACpE;AACA,SAAO;AAAA,IACN;AAAA,IACA;AAAA,EACD;AACD;AAIA,SAAS,oBAAoB,MAAM,SAAS;AAC3C,SAAO,OAAO,WAAW,OAAO,YAAY,UAAU;AACvD;AAIA,SAAS,eAAe,MAAM,OAAO,KAAK;AACzC,QAAM,QAAQ,aAAa,IAAI;AAC/B,SAAO,oBAAoB,MAAM,MAAM,QAAQ,MAAM,UAAU,GAAG;AACnE;;;ACrBA,IAAM,iBAAiB,CAAC,UAAU,UAAU,WAAW,UAAU,eAAe,UAAU;AAW1F,SAAS,UAAU,MAAM,gBAAgB;AACxC,QAAM,WAAW;AAAA,IAChB,GAAG;AAAA,IACH,GAAG;AAAA,EACJ;AACA,QAAM,qBAAqB;AAAA,IAC1B,GAAG;AAAA,IACH,GAAG;AAAA,EACJ;AACA,QAAM,MAAM;AAAA,IACX,MAAM,SAAS;AAAA,IACf,KAAK,SAAS;AAAA,IACd,OAAO,SAAS;AAAA,IAChB,QAAQ,SAAS;AAAA,EAClB;AACA,MAAI,OAAO,SAAS;AACpB,GAAC,UAAU,kBAAkB,EAAE,QAAQ,CAAC,UAAU;AACjD,UAAM,kBAAkB,CAAC;AACzB,UAAM,QAAQ,MAAM;AACpB,UAAM,QAAQ,MAAM;AACpB,QAAI,WAAW,MAAM;AACrB,QAAI,MAAO,KAAI,MAAO,aAAY;AAAA,SAC7B;AACJ,sBAAgB,KAAK,gBAAgB,IAAI,QAAQ,IAAI,MAAM,SAAS,IAAI,OAAO,IAAI,IAAI,KAAK,SAAS,IAAI,GAAG;AAC5G,sBAAgB,KAAK,aAAa;AAClC,UAAI,MAAM,IAAI,OAAO;AAAA,IACtB;AAAA,aACS,OAAO;AACf,sBAAgB,KAAK,gBAAgB,IAAI,IAAI,MAAM,SAAS,IAAI,OAAO,IAAI,SAAS,IAAI,KAAK,SAAS,IAAI,GAAG;AAC7G,sBAAgB,KAAK,aAAa;AAClC,UAAI,MAAM,IAAI,OAAO;AAAA,IACtB;AACA,QAAI;AACJ,QAAI,WAAW,EAAG,aAAY,KAAK,MAAM,WAAW,CAAC,IAAI;AACzD,eAAW,WAAW;AACtB,YAAQ,UAAU;AAAA,MACjB,KAAK;AACJ,oBAAY,IAAI,SAAS,IAAI,IAAI;AACjC,wBAAgB,QAAQ,eAAe,UAAU,SAAS,IAAI,MAAM,UAAU,SAAS,IAAI,GAAG;AAC9F;AAAA,MACD,KAAK;AACJ,wBAAgB,QAAQ,iBAAiB,IAAI,QAAQ,IAAI,IAAI,MAAM,SAAS,IAAI,OAAO,IAAI,SAAS,IAAI,IAAI,KAAK,SAAS,IAAI,GAAG;AACjI;AAAA,MACD,KAAK;AACJ,oBAAY,IAAI,QAAQ,IAAI,IAAI;AAChC,wBAAgB,QAAQ,gBAAgB,UAAU,SAAS,IAAI,MAAM,UAAU,SAAS,IAAI,GAAG;AAC/F;AAAA,IACF;AACA,QAAI,WAAW,MAAM,GAAG;AACvB,UAAI,IAAI,SAAS,IAAI,KAAK;AACzB,oBAAY,IAAI;AAChB,YAAI,OAAO,IAAI;AACf,YAAI,MAAM;AAAA,MACX;AACA,UAAI,IAAI,UAAU,IAAI,QAAQ;AAC7B,oBAAY,IAAI;AAChB,YAAI,QAAQ,IAAI;AAChB,YAAI,SAAS;AAAA,MACd;AAAA,IACD;AACA,QAAI,gBAAgB,OAAQ,QAAO,eAAe,MAAM,mBAAoB,gBAAgB,KAAK,GAAG,IAAI,MAAO,MAAM;AAAA,EACtH,CAAC;AACD,QAAM,sBAAsB,mBAAmB;AAC/C,QAAM,uBAAuB,mBAAmB;AAChD,QAAM,WAAW,IAAI;AACrB,QAAM,YAAY,IAAI;AACtB,MAAI;AACJ,MAAI;AACJ,MAAI,wBAAwB,MAAM;AACjC,aAAS,yBAAyB,OAAO,QAAQ,yBAAyB,SAAS,YAAY;AAC/F,YAAQ,cAAc,QAAQ,WAAW,SAAS;AAAA,EACnD,OAAO;AACN,YAAQ,wBAAwB,SAAS,WAAW;AACpD,aAAS,yBAAyB,OAAO,cAAc,OAAO,YAAY,QAAQ,IAAI,yBAAyB,SAAS,YAAY;AAAA,EACrI;AACA,QAAM,aAAa,CAAC;AACpB,QAAM,UAAU,CAAC,MAAM,UAAU;AAChC,QAAI,CAAC,eAAe,KAAK,EAAG,YAAW,IAAI,IAAI,MAAM,SAAS;AAAA,EAC/D;AACA,UAAQ,SAAS,KAAK;AACtB,UAAQ,UAAU,MAAM;AACxB,QAAM,UAAU;AAAA,IACf,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ;AAAA,IACA;AAAA,EACD;AACA,aAAW,UAAU,QAAQ,KAAK,GAAG;AACrC,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACD;;;AChGA,IAAM,QAAQ;AAMd,IAAM,eAAe,cAAc,KAAK,IAAI,EAAE,SAAS,EAAE,KAAK,KAAK,OAAO,IAAI,WAAW,GAAG,SAAS,EAAE;AAIvG,IAAI,UAAU;AAId,SAAS,WAAW,MAAM,SAAS,cAAc;AAChD,QAAM,MAAM,CAAC;AACb,MAAI;AACJ,SAAO,QAAQ,MAAM,KAAK,IAAI,EAAG,KAAI,KAAK,MAAM,CAAC,CAAC;AAClD,MAAI,CAAC,IAAI,OAAQ,QAAO;AACxB,QAAM,SAAS,YAAY,KAAK,OAAO,IAAI,WAAW,KAAK,IAAI,GAAG,SAAS,EAAE;AAC7E,MAAI,QAAQ,CAAC,OAAO;AACnB,UAAM,QAAQ,OAAO,WAAW,aAAa,OAAO,EAAE,IAAI,UAAU,WAAW,SAAS;AACxF,UAAM,YAAY,GAAG,QAAQ,uBAAuB,MAAM;AAC1D,WAAO,KAAK,QAAQ,IAAI,OAAO,aAAc,YAAY,oBAAqB,GAAG,GAAG,OAAO,QAAQ,SAAS,IAAI;AAAA,EACjH,CAAC;AACD,SAAO,KAAK,QAAQ,IAAI,OAAO,QAAQ,GAAG,GAAG,EAAE;AAC/C,SAAO;AACR;;;ACxCA,SAAS,WAAW,MAAM,YAAY;AACrC,MAAI,oBAAoB,KAAK,QAAQ,QAAQ,MAAM,KAAK,KAAK;AAC7D,aAAW,QAAQ,WAAY,sBAAqB,MAAM,OAAO,OAAQ,WAAW,IAAI,IAAI;AAC5F,SAAO,4CAA8C,oBAAoB,MAAM,OAAO;AACvF;;;ACJA,IAAM,gBAAgB;AAAA,EACrB,aAAa,EAAE,MAAM,cAAc;AAAA,EACnC,MAAM,EAAE,MAAM,OAAO;AAAA,EACrB,cAAc,EAAE,MAAM,UAAU;AACjC;AAIA,SAAS,IAAI,SAAS,QAAQ;AAC7B,QAAM,OAAO;AACb,QAAM,IAAI,OAAO,CAAC;AAClB,QAAM,SAAS,OAAO;AACtB,gBAAc,OAAO,IAAI;AAAA,IACxB;AAAA,IACA;AAAA,IACA,GAAG,SAAS,IAAI,OAAO,CAAC,IAAI;AAAA,IAC5B,GAAG,SAAS,IAAI,OAAO,CAAC,IAAI;AAAA,IAC5B,OAAO,SAAS,IAAI,OAAO,CAAC,IAAI;AAAA,EACjC;AACD;AAIA,IAAI,UAAU,CAAC,GAAG,CAAC;AACnB,IAAI,QAAQ,CAAC,GAAG,CAAC;AACjB,IAAI,SAAS,CAAC,GAAG,CAAC;AAClB,IAAI,UAAU;AAAA,EACb;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,OAAO;AAAA,EACV;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC;AACtB,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;AACvB,IAAI,SAAS,CAAC,GAAG,GAAG,CAAC;AACrB,IAAI,QAAQ,CAAC,GAAG,GAAG,CAAC;AACpB,IAAI,SAAS;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,UAAU;AAAA,EACb;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AACD,CAAC;AAID,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,gBAAgB;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,cAAc;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,SAAS;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,SAAS;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,UAAU;AAAA,EACb;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,SAAS,CAAC,CAAC,CAAC;AAChB,IAAI,kBAAkB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,cAAc;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,SAAS;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,cAAc;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,SAAS;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,kBAAkB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,YAAY;AAAA,EACf;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,WAAW;AAAA,EACd;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,YAAY;AAAA,EACf;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,YAAY;AAAA,EACf;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,iBAAiB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,YAAY,CAAC,GAAG,CAAC;AACrB,IAAI,aAAa,CAAC,GAAG,GAAG,CAAC;AACzB,IAAI,YAAY,CAAC,GAAG,CAAC;AACrB,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;AAC3B,IAAI,kBAAkB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,cAAc;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,cAAc;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,WAAW;AAAA,EACd;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,cAAc;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,gBAAgB,CAAC,KAAK,GAAG,CAAC;AAC9B,IAAI,iBAAiB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,iBAAiB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,iBAAiB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,iBAAiB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,cAAc;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,YAAY;AAAA,EACf;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,eAAe;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,WAAW,CAAC,GAAG,CAAC;AACpB,IAAI,WAAW,CAAC,GAAG,CAAC;AACpB,IAAI,cAAc;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,eAAe;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,eAAe,CAAC,IAAI,GAAG,CAAC;AAC5B,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;AACvB,IAAI,aAAa,CAAC,GAAG,CAAC;AACtB,IAAI,cAAc;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ,CAAC,GAAG,CAAC;AACjB,IAAI,SAAS,CAAC,GAAG,GAAG,CAAC;AACrB,IAAI,eAAe;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ,CAAC,GAAG,CAAC;AACjB,IAAI,YAAY,CAAC,KAAK,GAAG,CAAC;AAC1B,IAAI,WAAW;AAAA,EACd;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,UAAU;AAAA,EACb;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,SAAS;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,SAAS;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,YAAY;AAAA,EACf;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,iBAAiB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,gBAAgB;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,cAAc;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,wBAAwB;AAAA,EAC3B;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa,CAAC,GAAG,CAAC;AACtB,IAAI,cAAc,CAAC,KAAK,GAAG,CAAC;AAC5B,IAAI,aAAa,CAAC,GAAG,CAAC;AACtB,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,eAAe;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,iBAAiB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,gBAAgB;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,kBAAkB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,kBAAkB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,kBAAkB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,eAAe;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ,CAAC,GAAG,GAAG,CAAC;AACpB,IAAI,aAAa,CAAC,IAAI,GAAG,CAAC;AAC1B,IAAI,SAAS;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC;AACvB,IAAI,UAAU;AAAA,EACb;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,oBAAoB;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,cAAc;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,gBAAgB;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,gBAAgB;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,kBAAkB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,mBAAmB;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,qBAAqB;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,mBAAmB;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,mBAAmB;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,gBAAgB;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,YAAY;AAAA,EACf;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,eAAe;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,WAAW;AAAA,EACd;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,SAAS;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,UAAU;AAAA,EACb;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,UAAU;AAAA,EACb;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,iBAAiB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa,CAAC,KAAK,GAAG,CAAC;AAC3B,IAAI,iBAAiB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,iBAAiB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,cAAc;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ,CAAC,KAAK,GAAG,CAAC;AACtB,IAAI,cAAc;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC;AACtB,IAAI,iBAAiB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,OAAO;AAAA,EACV;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,eAAe;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,UAAU;AAAA,EACb;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,cAAc;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,YAAY;AAAA,EACf;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,YAAY;AAAA,EACf;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,UAAU;AAAA,EACb;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,UAAU,CAAC,GAAG,CAAC;AACnB,IAAI,WAAW;AAAA,EACd;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,eAAe;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,OAAO;AAAA,EACV;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,QAAQ;AAAA,EACX;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,WAAW,CAAC,KAAK,GAAG,CAAC;AACzB,IAAI,UAAU;AAAA,EACb;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,aAAa;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,UAAU,CAAC,KAAK,GAAG,CAAC;AACxB,IAAI,SAAS;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,SAAS,CAAC,GAAG,CAAC;AAClB,IAAI,cAAc,CAAC,GAAG,CAAC;AACvB,IAAI,UAAU;AAAA,EACb;AAAA,EACA;AAAA,EACA;AACD,CAAC;AACD,IAAI,eAAe;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AACD,CAAC;;;ACtrBD,IAAM,iBAAiB;AACvB,IAAM,eAAe;AAErB,IAAM,mBAAmB;AAAA,EACxB;AAAA,EACA;AAAA,EACA,kBAAkB,iBAAiB;AACpC;;;ACVA,mBAA2B;AAE3B,IAAM,YAAQ,aAAAC,SAAe,wBAAwB;;;ACCrD,IAAAC,gBAA2B;AAE3B,IAAMC,aAAQ,cAAAC,SAAe,sBAAsB;;;ACLnD,IAAM,wBAAwB;AAAA,EAC7B,QAAQ;AAAA,EACR,WAAW;AAAA,EACX,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,cAAc;AACf;AA0BA,IAAM,yBAAyB;AAAA,EAC9B,GAAG;AAAA,EACH,WAAW;AACZ;;;ACrBA,IAAI,cAAc;AAAA,EAChB,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,OAAO;AACT;AACA,IAAI,aAA6B,oBAAI,IAAI;AACzC,IAAI,cAA8B,oBAAI,IAAI;AAC1C,IAAI,oBAAoC,OAAO,CAAC,gBAAgB;AAC9D,aAAW,cAAc,aAAa;AACpC,QAAI,CAAC,WAAW,MAAM;AACpB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AACA,QAAI,MAAM,0BAA0B,WAAW,IAAI;AACnD,QAAI,YAAY,YAAY;AAC1B,kBAAY,IAAI,WAAW,MAAM,WAAW,MAAM;AAAA,IACpD,WAAW,WAAW,YAAY;AAChC,iBAAW,IAAI,WAAW,MAAM,WAAW,KAAK;AAAA,IAClD,OAAO;AACL,UAAI,MAAM,wBAAwB,UAAU;AAC5C,YAAM,IAAI,MAAM,qEAAqE;AAAA,IACvF;AAAA,EACF;AACF,GAAG,mBAAmB;AACtB,IAAI,wBAAwC,OAAO,OAAO,UAAU,mBAAmB;AACrF,QAAM,OAAO,aAAa,UAAU,MAAM,mBAAmB,MAAM;AACnE,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,MAAM,sBAAsB,QAAQ,EAAE;AAAA,EAClD;AACA,QAAM,SAAS,KAAK,UAAU;AAC9B,MAAI,CAAC,QAAQ;AACX,UAAM,IAAI,MAAM,oCAAoC,QAAQ,EAAE;AAAA,EAChE;AACA,MAAI,QAAQ,WAAW,IAAI,MAAM;AACjC,MAAI,CAAC,OAAO;AACV,UAAM,SAAS,YAAY,IAAI,MAAM;AACrC,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI,MAAM,uBAAuB,KAAK,MAAM,EAAE;AAAA,IACtD;AACA,QAAI;AACF,YAAM,SAAS,MAAM,OAAO;AAC5B,cAAQ,EAAE,GAAG,QAAQ,OAAO;AAC5B,iBAAW,IAAI,QAAQ,KAAK;AAAA,IAC9B,SAAS,GAAG;AACV,UAAI,MAAM,CAAC;AACX,YAAM,IAAI,MAAM,4BAA4B,KAAK,MAAM,EAAE;AAAA,IAC3D;AAAA,EACF;AACA,QAAM,WAAW,YAAY,OAAO,KAAK,IAAI;AAC7C,MAAI,CAAC,UAAU;AACb,UAAM,IAAI,MAAM,mBAAmB,QAAQ,EAAE;AAAA,EAC/C;AACA,SAAO;AACT,GAAG,uBAAuB;AAC1B,IAAI,kBAAkC,OAAO,OAAO,aAAa;AAC/D,MAAI;AACF,UAAM,sBAAsB,QAAQ;AACpC,WAAO;AAAA,EACT,QAAQ;AACN,WAAO;AAAA,EACT;AACF,GAAG,iBAAiB;AACpB,IAAI,aAA6B,OAAO,OAAO,UAAU,gBAAgB,oBAAoB;AAC3F,MAAI;AACJ,MAAI;AACF,eAAW,MAAM,sBAAsB,UAAU,iDAAgB,cAAc;AAAA,EACjF,SAAS,GAAG;AACV,QAAI,MAAM,CAAC;AACX,eAAW;AAAA,EACb;AACA,QAAM,aAAa,UAAU,UAAU,cAAc;AACrD,QAAM,MAAM,WAAW,WAAW,WAAW,IAAI,GAAG;AAAA,IAClD,GAAG,WAAW;AAAA,IACd,GAAG;AAAA,EACL,CAAC;AACD,SAAO,aAAa,KAAK,UAAU,CAAC;AACtC,GAAG,YAAY;AAQf,SAAS,mBAAmB,UAAU,EAAE,iBAAiB,GAAG;AAC1D,QAAM,YAAY,SAAS,QAAQ,WAAW,IAAI;AAClD,QAAM,0BAA0B,UAAU,QAAQ,WAAW,IAAI;AACjE,QAAM,qBAAqB,OAAO,uBAAuB;AACzD,MAAI,qBAAqB,OAAO;AAC9B,WAAO,mBAAmB,QAAQ,MAAM,QAAQ;AAAA,EAClD;AACA,SAAO;AACT;AACA,OAAO,oBAAoB,oBAAoB;AAC/C,SAAS,gBAAgB,UAAU,SAAS,CAAC,GAAG;AAC9C,QAAM,uBAAuB,mBAAmB,UAAU,MAAM;AAChE,QAAM,QAAQ,EAAO,MAAM,oBAAoB;AAC/C,QAAM,QAAQ,CAAC,CAAC,CAAC;AACjB,MAAI,cAAc;AAClB,WAAS,YAAY,MAAM,aAAa,UAAU;AAChD,QAAI,KAAK,SAAS,QAAQ;AACxB,YAAM,YAAY,KAAK,KAAK,MAAM,IAAI;AACtC,gBAAU,QAAQ,CAAC,UAAU,UAAU;AACrC,YAAI,UAAU,GAAG;AACf;AACA,gBAAM,KAAK,CAAC,CAAC;AAAA,QACf;AACA,iBAAS,MAAM,GAAG,EAAE,QAAQ,CAAC,SAAS;AACpC,iBAAO,KAAK,QAAQ,UAAU,GAAG;AACjC,cAAI,MAAM;AACR,kBAAM,WAAW,EAAE,KAAK,EAAE,SAAS,MAAM,MAAM,WAAW,CAAC;AAAA,UAC7D;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAAA,IACH,WAAW,KAAK,SAAS,YAAY,KAAK,SAAS,MAAM;AACvD,WAAK,OAAO,QAAQ,CAAC,gBAAgB;AACnC,oBAAY,aAAa,KAAK,IAAI;AAAA,MACpC,CAAC;AAAA,IACH,WAAW,KAAK,SAAS,QAAQ;AAC/B,YAAM,WAAW,EAAE,KAAK,EAAE,SAAS,KAAK,MAAM,MAAM,SAAS,CAAC;AAAA,IAChE;AAAA,EACF;AACA,SAAO,aAAa,aAAa;AACjC,QAAM,QAAQ,CAAC,aAAa;AA7I9B;AA8II,QAAI,SAAS,SAAS,aAAa;AACjC,qBAAS,WAAT,mBAAiB,QAAQ,CAAC,gBAAgB;AACxC,oBAAY,WAAW;AAAA,MACzB;AAAA,IACF,WAAW,SAAS,SAAS,QAAQ;AACnC,YAAM,WAAW,EAAE,KAAK,EAAE,SAAS,SAAS,MAAM,MAAM,SAAS,CAAC;AAAA,IACpE,OAAO;AACL,YAAM,WAAW,EAAE,KAAK,EAAE,SAAS,SAAS,KAAK,MAAM,SAAS,CAAC;AAAA,IACnE;AAAA,EACF,CAAC;AACD,SAAO;AACT;AACA,OAAO,iBAAiB,iBAAiB;AACzC,SAAS,eAAe,UAAU,EAAE,iBAAiB,IAAI,CAAC,GAAG;AAC3D,QAAM,QAAQ,EAAO,MAAM,QAAQ;AACnC,WAAS,OAAO,MAAM;AA7JxB;AA8JI,QAAI,KAAK,SAAS,QAAQ;AACxB,UAAI,qBAAqB,OAAO;AAC9B,eAAO,KAAK,KAAK,QAAQ,SAAS,OAAO,EAAE,QAAQ,MAAM,QAAQ;AAAA,MACnE;AACA,aAAO,KAAK,KAAK,QAAQ,SAAS,OAAO;AAAA,IAC3C,WAAW,KAAK,SAAS,UAAU;AACjC,aAAO,YAAW,UAAK,WAAL,mBAAa,IAAI,QAAQ,KAAK,GAAG;AAAA,IACrD,WAAW,KAAK,SAAS,MAAM;AAC7B,aAAO,QAAO,UAAK,WAAL,mBAAa,IAAI,QAAQ,KAAK,GAAG;AAAA,IACjD,WAAW,KAAK,SAAS,aAAa;AACpC,aAAO,OAAM,UAAK,WAAL,mBAAa,IAAI,QAAQ,KAAK,GAAG;AAAA,IAChD,WAAW,KAAK,SAAS,SAAS;AAChC,aAAO;AAAA,IACT,WAAW,KAAK,SAAS,QAAQ;AAC/B,aAAO,GAAG,KAAK,IAAI;AAAA,IACrB,WAAW,KAAK,SAAS,UAAU;AACjC,aAAO,KAAK;AAAA,IACd;AACA,QAAI,KAAK,yBAAyB,KAAK,IAAI,EAAE;AAC7C,WAAO,KAAK;AAAA,EACd;AACA,SAAO,QAAQ,QAAQ;AACvB,SAAO,MAAM,IAAI,MAAM,EAAE,KAAK,EAAE;AAClC;AACA,OAAO,gBAAgB,gBAAgB;AAGvC,SAAS,iBAAiB,MAAM;AAC9B,MAAI,KAAK,WAAW;AAClB,WAAO,CAAC,GAAG,IAAI,KAAK,UAAU,EAAE,QAAQ,IAAI,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,OAAO;AAAA,EACrE;AACA,SAAO,CAAC,GAAG,IAAI;AACjB;AACA,OAAO,kBAAkB,kBAAkB;AAC3C,SAAS,oBAAoB,UAAU,MAAM;AAC3C,QAAM,aAAa,iBAAiB,KAAK,OAAO;AAChD,SAAO,6BAA6B,UAAU,CAAC,GAAG,YAAY,KAAK,IAAI;AACzE;AACA,OAAO,qBAAqB,qBAAqB;AACjD,SAAS,6BAA6B,UAAU,WAAW,gBAAgB,MAAM;AAC/E,MAAI,eAAe,WAAW,GAAG;AAC/B,WAAO;AAAA,MACL,EAAE,SAAS,UAAU,KAAK,EAAE,GAAG,KAAK;AAAA,MACpC,EAAE,SAAS,IAAI,KAAK;AAAA,IACtB;AAAA,EACF;AACA,QAAM,CAAC,UAAU,GAAG,IAAI,IAAI;AAC5B,QAAM,UAAU,CAAC,GAAG,WAAW,QAAQ;AACvC,MAAI,SAAS,CAAC,EAAE,SAAS,QAAQ,KAAK,EAAE,GAAG,KAAK,CAAC,CAAC,GAAG;AACnD,WAAO,6BAA6B,UAAU,SAAS,MAAM,IAAI;AAAA,EACnE;AACA,MAAI,UAAU,WAAW,KAAK,UAAU;AACtC,cAAU,KAAK,QAAQ;AACvB,mBAAe,MAAM;AAAA,EACvB;AACA,SAAO;AAAA,IACL,EAAE,SAAS,UAAU,KAAK,EAAE,GAAG,KAAK;AAAA,IACpC,EAAE,SAAS,eAAe,KAAK,EAAE,GAAG,KAAK;AAAA,EAC3C;AACF;AACA,OAAO,8BAA8B,8BAA8B;AACnE,SAAS,oBAAoB,MAAM,UAAU;AAC3C,MAAI,KAAK,KAAK,CAAC,EAAE,QAAQ,MAAM,QAAQ,SAAS,IAAI,CAAC,GAAG;AACtD,UAAM,IAAI,MAAM,2DAA2D;AAAA,EAC7E;AACA,SAAO,6BAA6B,MAAM,QAAQ;AACpD;AACA,OAAO,qBAAqB,qBAAqB;AACjD,SAAS,6BAA6B,OAAO,UAAU,QAAQ,CAAC,GAAG,UAAU,CAAC,GAAG;AAC/E,MAAI,MAAM,WAAW,GAAG;AACtB,QAAI,QAAQ,SAAS,GAAG;AACtB,YAAM,KAAK,OAAO;AAAA,IACpB;AACA,WAAO,MAAM,SAAS,IAAI,QAAQ,CAAC;AAAA,EACrC;AACA,MAAI,SAAS;AACb,MAAI,MAAM,CAAC,EAAE,YAAY,KAAK;AAC5B,aAAS;AACT,UAAM,MAAM;AAAA,EACd;AACA,QAAM,WAAW,MAAM,MAAM,KAAK,EAAE,SAAS,KAAK,MAAM,SAAS;AACjE,QAAM,mBAAmB,CAAC,GAAG,OAAO;AACpC,MAAI,WAAW,IAAI;AACjB,qBAAiB,KAAK,EAAE,SAAS,QAAQ,MAAM,SAAS,CAAC;AAAA,EAC3D;AACA,mBAAiB,KAAK,QAAQ;AAC9B,MAAI,SAAS,gBAAgB,GAAG;AAC9B,WAAO,6BAA6B,OAAO,UAAU,OAAO,gBAAgB;AAAA,EAC9E;AACA,MAAI,QAAQ,SAAS,GAAG;AACtB,UAAM,KAAK,OAAO;AAClB,UAAM,QAAQ,QAAQ;AAAA,EACxB,WAAW,SAAS,SAAS;AAC3B,UAAM,CAAC,MAAM,IAAI,IAAI,oBAAoB,UAAU,QAAQ;AAC3D,UAAM,KAAK,CAAC,IAAI,CAAC;AACjB,QAAI,KAAK,SAAS;AAChB,YAAM,QAAQ,IAAI;AAAA,IACpB;AAAA,EACF;AACA,SAAO,6BAA6B,OAAO,UAAU,KAAK;AAC5D;AACA,OAAO,8BAA8B,8BAA8B;AAGnE,SAAS,WAAW,KAAK,SAAS;AAChC,MAAI,SAAS;AACX,QAAI,KAAK,SAAS,OAAO;AAAA,EAC3B;AACF;AACA,OAAO,YAAY,YAAY;AAC/B,eAAe,YAAY,SAAS,MAAM,OAAO,SAAS,gBAAgB,OAAO,SAAS,UAAU,GAAG;AACrG,QAAM,KAAK,QAAQ,OAAO,eAAe;AACzC,KAAG,KAAK,SAAS,GAAG,KAAK,KAAK,IAAI;AAClC,KAAG,KAAK,UAAU,GAAG,KAAK,KAAK,IAAI;AACnC,QAAM,MAAM,GAAG,OAAO,WAAW;AACjC,QAAM,iBAAiB,SAAS,KAAK,KAAK,IAAI,MAAM,qBAAqB,KAAK,MAAM,QAAQ,eAAe,gBAAgB,IAAI,GAAG,MAAM,IAAI,aAAa,KAAK,OAAO,MAAM;AAC3K,QAAM,aAAa,KAAK,SAAS,cAAc;AAC/C,QAAM,OAAO,IAAI,OAAO,MAAM;AAC9B,OAAK,KAAK,cAAc;AACxB,aAAW,MAAM,KAAK,UAAU;AAChC,OAAK,KAAK,SAAS,GAAG,UAAU,IAAI,OAAO,EAAE;AAC7C,aAAW,KAAK,KAAK,UAAU;AAC/B,MAAI,MAAM,WAAW,YAAY;AACjC,MAAI,MAAM,eAAe,QAAQ;AACjC,MAAI,MAAM,eAAe,KAAK;AAC9B,MAAI,MAAM,aAAa,QAAQ,IAAI;AACnC,MAAI,MAAM,cAAc,QAAQ;AAChC,MAAI,KAAK,SAAS,8BAA8B;AAChD,MAAI,eAAe;AACjB,QAAI,KAAK,SAAS,UAAU;AAAA,EAC9B;AACA,MAAI,OAAO,IAAI,KAAK,EAAE,sBAAsB;AAC5C,MAAI,KAAK,UAAU,OAAO;AACxB,QAAI,MAAM,WAAW,OAAO;AAC5B,QAAI,MAAM,eAAe,cAAc;AACvC,QAAI,MAAM,SAAS,QAAQ,IAAI;AAC/B,WAAO,IAAI,KAAK,EAAE,sBAAsB;AAAA,EAC1C;AACA,SAAO,GAAG,KAAK;AACjB;AACA,OAAO,aAAa,aAAa;AACjC,SAAS,YAAY,aAAa,WAAW,YAAY;AACvD,SAAO,YAAY,OAAO,OAAO,EAAE,KAAK,SAAS,kBAAkB,EAAE,KAAK,KAAK,CAAC,EAAE,KAAK,KAAK,YAAY,aAAa,MAAM,IAAI,EAAE,KAAK,MAAM,aAAa,IAAI;AAC/J;AACA,OAAO,aAAa,aAAa;AACjC,SAAS,mBAAmB,YAAY,YAAY,MAAM;AACxD,QAAM,cAAc,WAAW,OAAO,MAAM;AAC5C,QAAM,WAAW,YAAY,aAAa,GAAG,UAAU;AACvD,6BAA2B,UAAU,IAAI;AACzC,QAAM,aAAa,SAAS,KAAK,EAAE,sBAAsB;AACzD,cAAY,OAAO;AACnB,SAAO;AACT;AACA,OAAO,oBAAoB,oBAAoB;AAC/C,SAAS,uBAAuB,YAAY,YAAY,MAAM;AAxT9D;AAyTE,QAAM,cAAc,WAAW,OAAO,MAAM;AAC5C,QAAM,WAAW,YAAY,aAAa,GAAG,UAAU;AACvD,6BAA2B,UAAU,CAAC,EAAE,SAAS,MAAM,MAAM,SAAS,CAAC,CAAC;AACxE,QAAM,iBAAgB,cAAS,KAAK,MAAd,mBAAiB;AACvC,MAAI,eAAe;AACjB,gBAAY,OAAO;AAAA,EACrB;AACA,SAAO;AACT;AACA,OAAO,wBAAwB,wBAAwB;AACvD,SAAS,oBAAoB,OAAO,GAAG,gBAAgB,gBAAgB,OAAO;AAC5E,QAAM,aAAa;AACnB,QAAM,aAAa,EAAE,OAAO,GAAG;AAC/B,QAAM,MAAM,WAAW,OAAO,MAAM,EAAE,KAAK,SAAS,YAAY,EAAE,KAAK,SAAS,cAAc;AAC9F,QAAM,cAAc,WAAW,OAAO,MAAM,EAAE,KAAK,KAAK,OAAO;AAC/D,MAAI,YAAY;AAChB,aAAW,QAAQ,gBAAgB;AACjC,UAAM,aAA6B,OAAO,CAAC,UAAU,mBAAmB,YAAY,YAAY,KAAK,KAAK,OAAO,YAAY;AAC7H,UAAM,kBAAkB,WAAW,IAAI,IAAI,CAAC,IAAI,IAAI,oBAAoB,MAAM,UAAU;AACxF,eAAW,gBAAgB,iBAAiB;AAC1C,YAAM,QAAQ,YAAY,aAAa,WAAW,UAAU;AAC5D,iCAA2B,OAAO,YAAY;AAC9C;AAAA,IACF;AAAA,EACF;AACA,MAAI,eAAe;AACjB,UAAM,OAAO,YAAY,KAAK,EAAE,QAAQ;AACxC,UAAM,UAAU;AAChB,QAAI,KAAK,KAAK,KAAK,IAAI,OAAO,EAAE,KAAK,KAAK,KAAK,IAAI,OAAO,EAAE,KAAK,SAAS,KAAK,QAAQ,IAAI,OAAO,EAAE,KAAK,UAAU,KAAK,SAAS,IAAI,OAAO;AAC5I,WAAO,WAAW,KAAK;AAAA,EACzB,OAAO;AACL,WAAO,YAAY,KAAK;AAAA,EAC1B;AACF;AACA,OAAO,qBAAqB,qBAAqB;AACjD,SAAS,2BAA2B,OAAO,aAAa;AACtD,QAAM,KAAK,EAAE;AACb,cAAY,QAAQ,CAAC,MAAM,UAAU;AACnC,UAAM,aAAa,MAAM,OAAO,OAAO,EAAE,KAAK,cAAc,KAAK,SAAS,OAAO,WAAW,QAAQ,EAAE,KAAK,SAAS,kBAAkB,EAAE,KAAK,eAAe,KAAK,SAAS,WAAW,SAAS,QAAQ;AACtM,QAAI,UAAU,GAAG;AACf,iBAAW,KAAK,KAAK,OAAO;AAAA,IAC9B,OAAO;AACL,iBAAW,KAAK,MAAM,KAAK,OAAO;AAAA,IACpC;AAAA,EACF,CAAC;AACH;AACA,OAAO,4BAA4B,4BAA4B;AAC/D,eAAe,qBAAqB,MAAM,SAAS,CAAC,GAAG;AACrD,QAAM,sBAAsB,CAAC;AAC7B,OAAK,QAAQ,6BAA6B,CAAC,WAAW,QAAQ,aAAa;AACzE,wBAAoB;AAAA,OACjB,YAAY;AACX,cAAM,qBAAqB,GAAG,MAAM,IAAI,QAAQ;AAChD,YAAI,MAAM,gBAAgB,kBAAkB,GAAG;AAC7C,iBAAO,MAAM,WAAW,oBAAoB,QAAQ,EAAE,OAAO,aAAa,CAAC;AAAA,QAC7E,OAAO;AACL,iBAAO,aAAa,aAAa,WAAW,MAAM,EAAE,QAAQ,KAAK,GAAG,CAAC;AAAA,QACvE;AAAA,MACF,GAAG;AAAA,IACL;AACA,WAAO;AAAA,EACT,CAAC;AACD,QAAM,eAAe,MAAM,QAAQ,IAAI,mBAAmB;AAC1D,SAAO,KAAK,QAAQ,6BAA6B,MAAM,aAAa,MAAM,KAAK,EAAE;AACnF;AACA,OAAO,sBAAsB,sBAAsB;AACnD,IAAI,aAA6B,OAAO,OAAO,IAAI,OAAO,IAAI;AAAA,EAC5D,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,UAAU;AAAA,EACV,gBAAgB;AAAA,EAChB,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,mBAAmB;AACrB,IAAI,CAAC,GAAG,WAAW;AACjB,MAAI;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,MAAI,eAAe;AACjB,UAAM,WAAW,eAAe,MAAM,MAAM;AAC5C,UAAM,sBAAsB,MAAM,qBAAqB,eAAe,QAAQ,GAAG,MAAM;AACvF,UAAM,gBAAgB,KAAK,QAAQ,SAAS,IAAI;AAChD,UAAM,OAAO;AAAA,MACX;AAAA,MACA,OAAO,SAAS,IAAI,IAAI,gBAAgB;AAAA,MACxC,YAAY,MAAM,QAAQ,SAAS,QAAQ;AAAA,IAC7C;AACA,UAAM,aAAa,MAAM,YAAY,IAAI,MAAM,OAAO,SAAS,kBAAkB,MAAM;AACvF,WAAO;AAAA,EACT,OAAO;AACL,UAAM,aAAa,KAAK,QAAQ,eAAe,OAAO;AACtD,UAAM,iBAAiB,gBAAgB,WAAW,QAAQ,QAAQ,OAAO,GAAG,MAAM;AAClF,UAAM,WAAW;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA,OAAO,mBAAmB;AAAA,IAC5B;AACA,QAAI,QAAQ;AACV,UAAI,UAAU,KAAK,KAAK,GAAG;AACzB,gBAAQ,MAAM,QAAQ,WAAW,YAAY;AAAA,MAC/C;AACA,YAAM,qBAAqB,MAAM,QAAQ,mBAAmB,EAAE,EAAE,QAAQ,yBAAyB,EAAE,EAAE,QAAQ,iBAAiB,EAAE,EAAE,QAAQ,WAAW,OAAO;AAC5J,qBAAO,QAAQ,EAAE,KAAK,SAAS,kBAAkB;AAAA,IACnD,OAAO;AACL,YAAM,qBAAqB,MAAM,QAAQ,mBAAmB,EAAE,EAAE,QAAQ,yBAAyB,EAAE,EAAE,QAAQ,iBAAiB,EAAE,EAAE,QAAQ,gBAAgB,OAAO;AACjK,qBAAO,QAAQ,EAAE,OAAO,MAAM,EAAE,KAAK,SAAS,mBAAmB,QAAQ,gBAAgB,OAAO,CAAC;AACjG,YAAM,qBAAqB,MAAM,QAAQ,mBAAmB,EAAE,EAAE,QAAQ,yBAAyB,EAAE,EAAE,QAAQ,iBAAiB,EAAE,EAAE,QAAQ,WAAW,OAAO;AAC5J,qBAAO,QAAQ,EAAE,OAAO,MAAM,EAAE,KAAK,SAAS,kBAAkB;AAAA,IAClE;AACA,WAAO;AAAA,EACT;AACF,GAAG,YAAY;",
  "names": ["i", "createDebugger", "import_debug", "debug", "createDebugger"]
}
