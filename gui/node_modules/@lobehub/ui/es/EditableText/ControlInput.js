'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["value", "onChange", "onValueChanging", "onChangeEnd", "onCompositionEnd", "onCompositionStart", "onPressEnter", "onFocus", "submitIcon", "style", "texts"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { RotateCcw, Save } from 'lucide-react';
import { memo, useEffect, useRef, useState } from 'react';
import { Flexbox } from 'react-layout-kit';
import ActionIcon from "../ActionIcon";
import Input from "../Input";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var ControlInput = /*#__PURE__*/memo(function (_ref) {
  var value = _ref.value,
    onChange = _ref.onChange,
    onValueChanging = _ref.onValueChanging,
    onChangeEnd = _ref.onChangeEnd,
    _onCompositionEnd = _ref.onCompositionEnd,
    _onCompositionStart = _ref.onCompositionStart,
    _onPressEnter = _ref.onPressEnter,
    onFocus = _ref.onFocus,
    submitIcon = _ref.submitIcon,
    style = _ref.style,
    texts = _ref.texts,
    rest = _objectWithoutProperties(_ref, _excluded);
  var ref = useRef(null);
  var _useState = useState(value || ''),
    _useState2 = _slicedToArray(_useState, 2),
    input = _useState2[0],
    setInput = _useState2[1];
  var isChineseInput = useRef(false);
  useEffect(function () {
    if (value !== undefined) setInput(value);
  }, [value]);
  var handleUpload = function handleUpload() {
    var _ref$current;
    onChange === null || onChange === void 0 || onChange(input);
    ref === null || ref === void 0 || (_ref$current = ref.current) === null || _ref$current === void 0 || _ref$current.blur();
    onChangeEnd === null || onChangeEnd === void 0 || onChangeEnd(input);
  };
  return /*#__PURE__*/_jsx(Input, _objectSpread({
    autoFocus: true,
    onChange: function onChange(e) {
      setInput(e.target.value);
      onValueChanging === null || onValueChanging === void 0 || onValueChanging(e.target.value);
    },
    onCompositionEnd: function onCompositionEnd(e) {
      isChineseInput.current = false;
      _onCompositionEnd === null || _onCompositionEnd === void 0 || _onCompositionEnd(e);
    },
    onCompositionStart: function onCompositionStart(e) {
      isChineseInput.current = true;
      _onCompositionStart === null || _onCompositionStart === void 0 || _onCompositionStart(e);
    },
    onFocus: onFocus,
    onPressEnter: function onPressEnter(e) {
      if (!e.shiftKey && !isChineseInput.current) {
        e.preventDefault();
        handleUpload();
        _onPressEnter === null || _onPressEnter === void 0 || _onPressEnter(e);
      }
    },
    ref: ref,
    style: _objectSpread({
      width: '100%'
    }, style),
    suffix: value === input ? /*#__PURE__*/_jsx("span", {}) : /*#__PURE__*/_jsxs(Flexbox, {
      gap: 2,
      horizontal: true,
      style: {
        marginRight: -4,
        zIndex: 1
      },
      children: [/*#__PURE__*/_jsx(ActionIcon, {
        icon: RotateCcw,
        onClick: function onClick(e) {
          e.preventDefault();
          setInput(value || '');
        },
        size: "small",
        title: (texts === null || texts === void 0 ? void 0 : texts.reset) || 'Reset'
      }), /*#__PURE__*/_jsx(ActionIcon, {
        icon: submitIcon || Save,
        onClick: function onClick(e) {
          e.preventDefault();
          handleUpload();
        },
        size: "small",
        title: (texts === null || texts === void 0 ? void 0 : texts.submit) || 'Submit',
        variant: 'filled'
      })]
    }),
    value: input
  }, rest));
});
ControlInput.displayName = 'ControlInput';
export default ControlInput;