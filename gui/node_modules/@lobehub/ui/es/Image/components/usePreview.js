function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["onVisibleChange", "styles", "minScale", "maxScale", "toolbarAddon", "rootClassName", "imageRender", "toolbarRender"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { X } from 'lucide-react';
import { useMemo, useState } from 'react';
import Icon from "../../Icon";
import { useStyles } from "../style";
import Preview from "./Preview";
import Toolbar from "./Toolbar";
import { jsx as _jsx } from "react/jsx-runtime";
export var usePreview = function usePreview(props) {
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    visible = _useState2[0],
    setVisible = _useState2[1];
  var _useStyles = useStyles(),
    cx = _useStyles.cx,
    styles = _useStyles.styles;
  return useMemo(function () {
    if (props === false) return props;
    var _ref = props === true ? {} : props || {},
      _onVisibleChange = _ref.onVisibleChange,
      _ref$styles = _ref.styles,
      previewStyle = _ref$styles === void 0 ? {} : _ref$styles,
      _ref$minScale = _ref.minScale,
      minScale = _ref$minScale === void 0 ? 0.32 : _ref$minScale,
      _ref$maxScale = _ref.maxScale,
      maxScale = _ref$maxScale === void 0 ? 32 : _ref$maxScale,
      toolbarAddon = _ref.toolbarAddon,
      rootClassName = _ref.rootClassName,
      _imageRender = _ref.imageRender,
      _toolbarRender = _ref.toolbarRender,
      rest = _objectWithoutProperties(_ref, _excluded);
    return _objectSpread({
      closeIcon: /*#__PURE__*/_jsx(Icon, {
        color: '#fff',
        icon: X
      }),
      imageRender: function imageRender(originalNode, info) {
        var node = /*#__PURE__*/_jsx(Preview, {
          visible: visible,
          children: originalNode
        });
        if (_imageRender) return _imageRender(node, info);
        return node;
      },
      maxScale: maxScale,
      minScale: minScale,
      onVisibleChange: function onVisibleChange(visible, prevVisible) {
        setVisible(visible);
        _onVisibleChange === null || _onVisibleChange === void 0 || _onVisibleChange(visible, prevVisible);
      },
      rootClassName: cx(styles.preview, rootClassName),
      styles: _objectSpread({
        mask: {
          backdropFilter: 'blur(8px)'
        }
      }, previewStyle),
      toolbarRender: function toolbarRender(_, info) {
        var originalNode = /*#__PURE__*/_jsx(Toolbar, {
          info: info,
          maxScale: maxScale,
          minScale: minScale,
          children: toolbarAddon
        });
        if (_toolbarRender) return _toolbarRender(originalNode, info);
        return originalNode;
      }
    }, rest);
  }, [props, visible, styles]);
};
export default usePreview;