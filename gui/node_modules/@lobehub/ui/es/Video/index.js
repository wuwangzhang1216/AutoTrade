'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["ref", "preload", "src", "style", "classNames", "className", "maxHeight", "maxWidth", "minHeight", "minWidth", "onEnded", "onPause", "onPlay", "onPlaying", "width", "height", "onMouseEnter", "styles", "onMouseLeave", "preview", "isLoading", "variant", "autoPlay"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { Skeleton } from 'antd';
import { cva } from 'class-variance-authority';
import { PlayIcon } from 'lucide-react';
import { memo, useMemo, useState } from 'react';
import { Flexbox } from 'react-layout-kit';
import ActionIcon from "../ActionIcon";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var Video = /*#__PURE__*/memo(function (_ref) {
  var ref = _ref.ref,
    _ref$preload = _ref.preload,
    preload = _ref$preload === void 0 ? 'auto' : _ref$preload,
    src = _ref.src,
    style = _ref.style,
    classNames = _ref.classNames,
    className = _ref.className,
    _ref$maxHeight = _ref.maxHeight,
    maxHeight = _ref$maxHeight === void 0 ? '100%' : _ref$maxHeight,
    _ref$maxWidth = _ref.maxWidth,
    maxWidth = _ref$maxWidth === void 0 ? '100%' : _ref$maxWidth,
    minHeight = _ref.minHeight,
    minWidth = _ref.minWidth,
    _onEnded = _ref.onEnded,
    _onPause = _ref.onPause,
    _onPlay = _ref.onPlay,
    _onPlaying = _ref.onPlaying,
    width = _ref.width,
    height = _ref.height,
    _onMouseEnter = _ref.onMouseEnter,
    customStyles = _ref.styles,
    _onMouseLeave = _ref.onMouseLeave,
    _ref$preview = _ref.preview,
    preview = _ref$preview === void 0 ? true : _ref$preview,
    isLoading = _ref.isLoading,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'filled' : _ref$variant,
    autoPlay = _ref.autoPlay,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isPlaying = _useState2[0],
    setIsPlaying = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    showControls = _useState4[0],
    setShowControls = _useState4[1];
  var _useStyles = useStyles({
      maxHeight: maxHeight,
      maxWidth: maxWidth,
      minHeight: minHeight,
      minWidth: minWidth
    }),
    cx = _useStyles.cx,
    styles = _useStyles.styles,
    theme = _useStyles.theme;
  var variants = useMemo(function () {
    return cva(styles.root, {
      defaultVariants: {
        variant: 'filled'
      },
      /* eslint-disable sort-keys-fix/sort-keys-fix */
      variants: {
        variant: {
          filled: styles.filled,
          outlined: styles.outlined,
          borderless: styles.borderless
        }
      }
      /* eslint-enable sort-keys-fix/sort-keys-fix */
    });
  }, [styles]);
  if (isLoading) return /*#__PURE__*/_jsx(Skeleton.Avatar, {
    active: true,
    style: {
      borderRadius: theme.borderRadius,
      height: height,
      maxHeight: maxHeight,
      maxWidth: maxWidth,
      minHeight: minHeight,
      minWidth: minWidth,
      width: width
    }
  });
  return /*#__PURE__*/_jsxs(Flexbox, {
    className: cx(variants({
      variant: variant
    }), className, classNames === null || classNames === void 0 ? void 0 : classNames.wrapper),
    height: height,
    ref: ref,
    style: _objectSpread(_objectSpread({}, style), customStyles === null || customStyles === void 0 ? void 0 : customStyles.wrapper),
    width: width,
    children: [preview && !isPlaying && /*#__PURE__*/_jsx(Flexbox, {
      align: 'center',
      className: cx(styles.mask, classNames === null || classNames === void 0 ? void 0 : classNames.mask),
      justify: 'center',
      style: customStyles === null || customStyles === void 0 ? void 0 : customStyles.mask,
      children: /*#__PURE__*/_jsx(ActionIcon, {
        color: '#fff',
        icon: PlayIcon,
        variant: 'filled'
      })
    }), /*#__PURE__*/_jsx("video", _objectSpread(_objectSpread({
      autoPlay: autoPlay,
      className: cx(styles.video, classNames === null || classNames === void 0 ? void 0 : classNames.video),
      controls: showControls,
      height: height,
      onEnded: function onEnded(e) {
        setIsPlaying(false);
        _onEnded === null || _onEnded === void 0 || _onEnded(e);
      },
      onMouseEnter: function onMouseEnter(e) {
        setShowControls(true);
        _onMouseEnter === null || _onMouseEnter === void 0 || _onMouseEnter(e);
      },
      onMouseLeave: function onMouseLeave(e) {
        setShowControls(false);
        _onMouseLeave === null || _onMouseLeave === void 0 || _onMouseLeave(e);
      },
      onPause: function onPause(e) {
        setIsPlaying(false);
        _onPause === null || _onPause === void 0 || _onPause(e);
      },
      onPlay: function onPlay(e) {
        setIsPlaying(true);
        _onPlay === null || _onPlay === void 0 || _onPlay(e);
      },
      onPlaying: function onPlaying(e) {
        setIsPlaying(true);
        _onPlaying === null || _onPlaying === void 0 || _onPlaying(e);
      },
      preload: preload,
      style: _objectSpread({
        height: 'auto',
        maxWidth: '100%'
      }, customStyles === null || customStyles === void 0 ? void 0 : customStyles.video),
      width: width
    }, rest), {}, {
      children: /*#__PURE__*/_jsx("source", {
        src: src
      })
    }))]
  });
});
Video.displayName = 'Video';
export default Video;