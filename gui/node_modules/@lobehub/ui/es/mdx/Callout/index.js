'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["children", "type", "className", "style"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { AlertOctagon, AlertTriangle, Info, Lightbulb, MessageSquareWarning } from 'lucide-react';
import { useMemo } from 'react';
import { Flexbox } from 'react-layout-kit';
import Icon from "../../Icon";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var Callout = function Callout(_ref) {
  var children = _ref.children,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'info' : _ref$type,
    className = _ref.className,
    style = _ref.style,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useStyles = useStyles(),
    cx = _useStyles.cx,
    styles = _useStyles.styles,
    theme = _useStyles.theme;
  var typeConfig = useMemo(function () {
    return {
      error: {
        background: theme.colorErrorFillTertiary,
        color: theme.colorError,
        icon: AlertOctagon
      },
      important: {
        background: theme.purpleFillTertiary,
        color: theme.purple,
        icon: MessageSquareWarning
      },
      info: {
        background: theme.colorInfoFillTertiary,
        color: theme.colorInfo,
        icon: Info
      },
      tip: {
        background: theme.colorSuccessFillTertiary,
        color: theme.colorSuccess,
        icon: Lightbulb
      },
      warning: {
        background: theme.colorWarningFillTertiary,
        color: theme.colorWarning,
        icon: AlertTriangle
      }
    };
  }, [theme]);
  var selectedType = (typeConfig === null || typeConfig === void 0 ? void 0 : typeConfig[type]) || typeConfig.info;
  var icon = selectedType.icon,
    color = selectedType.color,
    background = selectedType.background;
  return /*#__PURE__*/_jsxs(Flexbox, _objectSpread(_objectSpread({
    align: 'flex-start',
    className: cx(styles.container, className),
    horizontal: true,
    style: _objectSpread({
      background: background,
      boxShadow: "0 0 0 1px ".concat(background, " inset"),
      color: color
    }, style)
  }, rest), {}, {
    children: [/*#__PURE__*/_jsx(Icon, {
      icon: icon,
      size: {
        size: '1.2em'
      },
      style: {
        marginBlock: '0.25em'
      }
    }), /*#__PURE__*/_jsx("div", {
      className: cx(styles.content, type === 'info' && styles.underlineAnchor),
      children: /*#__PURE__*/_jsx("div", {
        children: children
      })
    })]
  }));
};
Callout.displayName = 'MdxCallout';
export default Callout;