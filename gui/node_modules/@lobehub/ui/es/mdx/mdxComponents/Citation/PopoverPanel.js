'use client';

var _templateObject, _templateObject2;
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
import { Popover } from 'antd';
import { createStyles } from 'antd-style';
import { ArrowRightIcon } from 'lucide-react';
import { useMemo } from 'react';
import { Flexbox } from 'react-layout-kit';
import Icon from "../../../Icon";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var useStyles = createStyles(function (_ref) {
  var css = _ref.css,
    token = _ref.token;
  return {
    link: css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    cursor: pointer;\n    color: ", ";\n\n    :hover {\n      color: ", ";\n    }\n  "])), token.colorTextSecondary, token.colorText),
    url: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n\n    max-width: 400px;\n\n    text-overflow: ellipsis;\n  "])))
  };
});
var PopoverPanel = function PopoverPanel(_ref2) {
  var children = _ref2.children,
    usePopover = _ref2.usePopover,
    title = _ref2.title,
    alt = _ref2.alt,
    url = _ref2.url;
  var _useStyles = useStyles(),
    styles = _useStyles.styles;
  var _useMemo = useMemo(function () {
      try {
        var urlObj = new URL(url);
        var hostForUrl = urlObj.host;
        var _displayTitle = title;
        if (title === url) {
          _displayTitle = '';
        }
        var _domain = urlObj.hostname.replace('www.', '');
        if (!_displayTitle) _domain = url;
        return [_displayTitle, _domain, hostForUrl];
      } catch (_unused) {
        return [title, url, url];
      }
    }, [url, title]),
    _useMemo2 = _slicedToArray(_useMemo, 3),
    displayTitle = _useMemo2[0],
    domain = _useMemo2[1],
    host = _useMemo2[2];
  return usePopover && url ? /*#__PURE__*/_jsx(Popover, {
    arrow: false,
    content: /*#__PURE__*/_jsxs(Flexbox, {
      gap: 8,
      children: [/*#__PURE__*/_jsxs(Flexbox, {
        className: styles.link,
        gap: 12,
        horizontal: true,
        justify: 'space-between',
        onClick: function onClick() {
          window.open(url, '_blank');
        },
        children: [/*#__PURE__*/_jsxs(Flexbox, {
          align: 'center',
          gap: 4,
          horizontal: true,
          children: [/*#__PURE__*/_jsx("img", {
            alt: alt || title || url,
            height: 14,
            src: "https://icons.duckduckgo.com/ip3/".concat(host, ".ico"),
            style: {
              borderRadius: 4
            },
            width: 14
          }), /*#__PURE__*/_jsx("span", {
            className: styles.url,
            children: domain
          })]
        }), /*#__PURE__*/_jsx(Icon, {
          icon: ArrowRightIcon
        })]
      }), displayTitle]
    }),
    trigger: 'hover',
    children: children
  }) : children;
};
PopoverPanel.displayName = 'MdxPopoverPanel';
export default PopoverPanel;