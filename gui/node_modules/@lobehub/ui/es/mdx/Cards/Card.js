'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["tag", "tagColor", "icon", "title", "desc", "href", "iconProps", "className", "image", "variant"];
var _templateObject, _templateObject2, _templateObject3;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
import { createStyles } from 'antd-style';
import { Flexbox } from 'react-layout-kit';
import A from "../../A";
import Block from "../../Block";
import Icon from "../../Icon";
import Img from "../../Img";
import Tag from "../../Tag";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var useStyles = createStyles(function (_ref) {
  var css = _ref.css,
    cx = _ref.cx,
    token = _ref.token;
  var icon = cx(css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    margin-block: 0.1em;\n    opacity: 0.5;\n    transition: opacity 0.2s ", ";\n  "])), token.motionEaseInOut));
  return {
    card: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      --lobe-markdown-header-multiple: 0.2;\n      --lobe-markdown-margin-multiple: 1;\n\n      overflow: hidden;\n      height: 100%;\n      color: ", ";\n\n      h3,\n      p {\n        margin-block: 0 !important;\n      }\n\n      p {\n        color: ", ";\n        transition: color 0.2s ", ";\n      }\n\n      &:hover {\n        p {\n          color: ", ";\n        }\n\n        .", " {\n          opacity: 1;\n        }\n      }\n    "])), token.colorText, token.colorTextDescription, token.motionEaseInOut, token.colorTextSecondary, icon),
    content: css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n      width: 100%;\n      padding: 1.4em;\n    "]))),
    icon: icon
  };
});
var Card = function Card(_ref2) {
  var tag = _ref2.tag,
    _ref2$tagColor = _ref2.tagColor,
    tagColor = _ref2$tagColor === void 0 ? 'blue' : _ref2$tagColor,
    icon = _ref2.icon,
    title = _ref2.title,
    desc = _ref2.desc,
    href = _ref2.href,
    iconProps = _ref2.iconProps,
    className = _ref2.className,
    image = _ref2.image,
    _ref2$variant = _ref2.variant,
    variant = _ref2$variant === void 0 ? 'filled' : _ref2$variant,
    rest = _objectWithoutProperties(_ref2, _excluded);
  var _useStyles = useStyles(),
    cx = _useStyles.cx,
    styles = _useStyles.styles;
  return /*#__PURE__*/_jsx(A, {
    href: href,
    children: /*#__PURE__*/_jsxs(Block, _objectSpread(_objectSpread({
      align: 'flex-start',
      className: cx(styles.card, className),
      clickable: true,
      variant: variant
    }, rest), {}, {
      children: [image && /*#__PURE__*/_jsx(Img, {
        alt: title,
        height: 100,
        src: image,
        style: {
          height: 'auto',
          width: '100%'
        },
        width: 250
      }), tag && /*#__PURE__*/_jsx(Flexbox, {
        align: 'flex-start',
        className: styles.content,
        style: {
          paddingBottom: '0.2em',
          paddingTop: '1.8em'
        },
        children: /*#__PURE__*/_jsx(Tag, {
          color: tagColor,
          style: {
            borderRadius: '1em',
            fontSize: '0.8em',
            fontWeight: 500,
            paddingBlock: '0.1em',
            paddingInline: '0.6em'
          },
          children: tag
        })
      }), /*#__PURE__*/_jsxs(Flexbox, {
        align: desc ? 'flex-start' : 'center',
        className: styles.content,
        gap: '0.75em',
        horizontal: true,
        children: [!image && icon && /*#__PURE__*/_jsx(Icon, _objectSpread({
          className: styles.icon,
          icon: icon,
          size: {
            size: '1.5em'
          }
        }, iconProps)), /*#__PURE__*/_jsxs(Flexbox, {
          gap: '0.2em',
          children: [/*#__PURE__*/_jsx("h3", {
            children: title
          }), desc && /*#__PURE__*/_jsx("p", {
            children: desc
          })]
        })]
      })]
    }))
  });
};
Card.displayName = 'MdxCard';
export default Card;