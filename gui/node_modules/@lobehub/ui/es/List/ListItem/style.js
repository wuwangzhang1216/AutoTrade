var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
import { createStyles } from 'antd-style';
export var useStyles = createStyles(function (_ref) {
  var cx = _ref.cx,
    css = _ref.css,
    token = _ref.token,
    stylish = _ref.stylish;
  return {
    actions: css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      position: absolute;\n      inset-block-start: 50%;\n      inset-inline-end: 16px;\n      transform: translateY(-50%);\n    "]))),
    active: stylish.active,
    content: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      position: relative;\n      overflow: hidden;\n      flex: 1;\n      align-self: center;\n    "]))),
    date: css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n      font-size: 12px;\n      color: ", ";\n    "])), token.colorTextPlaceholder),
    desc: css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n      width: 100%;\n      margin: 0;\n\n      font-size: 12px;\n      line-height: 1.2;\n      color: ", ";\n    "])), token.colorTextDescription),
    pin: css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n      position: absolute;\n      inset-block-start: 6px;\n      inset-inline-end: 6px;\n    "]))),
    root: cx(stylish.variantBorderless, css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n        cursor: pointer;\n        position: relative;\n        border-radius: ", "px;\n        color: ", ";\n      "])), token.borderRadius, token.colorTextTertiary)),
    title: css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n      width: 100%;\n      margin: 0;\n\n      font-size: 14px;\n      font-weight: 500;\n      line-height: 1.2;\n      color: ", ";\n    "])), token.colorText),
    triangle: css(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n      width: 10px;\n      height: 10px;\n      border-radius: 2px;\n\n      opacity: 0.5;\n      background: ", ";\n      clip-path: polygon(0% 0%, 100% 0%, 100% 100%);\n    "])), token.colorPrimaryBorder)
  };
});