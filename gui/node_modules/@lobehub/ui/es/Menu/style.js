var _templateObject, _templateObject2, _templateObject3;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
import { createStyles } from 'antd-style';
export var useStyles = createStyles(function (_ref) {
  var cx = _ref.cx,
    css = _ref.css,
    token = _ref.token,
    stylish = _ref.stylish,
    prefixCls = _ref.prefixCls;
  return {
    borderless: cx(stylish.variantBorderlessWithoutHover, css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      padding: 0;\n      border-radius: unset;\n    "])))),
    compact: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    &.", "-menu {\n      .", "-menu-item-divider {\n        margin: 0;\n      }\n    }\n  "])), prefixCls, prefixCls),
    filled: stylish.variantFilledWithoutHover,
    outlined: stylish.variantOutlinedWithoutHover,
    root: css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    &.", "-menu {\n      flex: 1;\n\n      padding: 4px;\n\n      background: transparent;\n      border: none !important;\n      border-radius: ", "px;\n\n      .", "-menu-sub.", "-menu-inline {\n        background: transparent;\n        > .", "-menu-item {\n          padding-inline-start: 36px !important;\n        }\n      }\n\n      .", "-menu-item-divider {\n        margin-block: 1em;\n      }\n    }\n  "])), prefixCls, token.borderRadiusLG, prefixCls, prefixCls, prefixCls, prefixCls),
    shadow: stylish.shadow
  };
});