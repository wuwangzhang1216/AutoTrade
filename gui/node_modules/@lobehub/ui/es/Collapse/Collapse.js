'use client';

var _excluded = ["style", "variant", "gap", "className", "padding", "size", "collapsible", "items", "styles", "classNames", "ref"],
  _excluded2 = ["icon", "desc", "label"];
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { Collapse as AntdCollapse, ConfigProvider } from 'antd';
import { cva } from 'class-variance-authority';
import { ChevronDown } from 'lucide-react';
import { isValidElement, memo, useMemo } from 'react';
import { Flexbox } from 'react-layout-kit';
import Icon from "../Icon";
import { DEFAULT_PADDING, getPadding, useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var Collapse = /*#__PURE__*/memo(function (_ref) {
  var style = _ref.style,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'filled' : _ref$variant,
    _ref$gap = _ref.gap,
    gap = _ref$gap === void 0 ? 0 : _ref$gap,
    className = _ref.className,
    _ref$padding = _ref.padding,
    padding = _ref$padding === void 0 ? DEFAULT_PADDING : _ref$padding,
    size = _ref.size,
    _ref$collapsible = _ref.collapsible,
    collapsible = _ref$collapsible === void 0 ? true : _ref$collapsible,
    items = _ref.items,
    customStyles = _ref.styles,
    classNames = _ref.classNames,
    ref = _ref.ref,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useStyles = useStyles(),
    cx = _useStyles.cx,
    styles = _useStyles.styles;
  var variants = useMemo(function () {
    return cva(styles.root, {
      compoundVariants: [{
        class: styles.gapOutlined,
        gap: true,
        variant: 'outlined'
      }],
      defaultVariants: {
        collapsible: true,
        gap: false
      },
      /* eslint-disable sort-keys-fix/sort-keys-fix */
      variants: {
        variant: {
          filled: styles.filled,
          outlined: styles.outlined,
          borderless: styles.borderless
        },
        gap: {
          false: null,
          true: styles.gapRoot
        },
        collapsible: {
          false: styles.hideCollapsibleIcon,
          true: null
        }
      }
      /* eslint-enable sort-keys-fix/sort-keys-fix */
    });
  }, [styles]);
  var antdItems = useMemo(function () {
    return items.map(function (_ref2) {
      var icon = _ref2.icon,
        desc = _ref2.desc,
        label = _ref2.label,
        itemRest = _objectWithoutProperties(_ref2, _excluded2);
      var content = /*#__PURE__*/_jsx("div", {
        className: cx(styles.title, !icon && !desc && (classNames === null || classNames === void 0 ? void 0 : classNames.header), classNames === null || classNames === void 0 ? void 0 : classNames.title),
        style: _objectSpread(_objectSpread({}, !icon && !desc ? customStyles === null || customStyles === void 0 ? void 0 : customStyles.header : {}), customStyles === null || customStyles === void 0 ? void 0 : customStyles.title),
        children: label
      });
      if (icon) {
        content = /*#__PURE__*/_jsxs(Flexbox, {
          className: cx(styles.title, !desc && (classNames === null || classNames === void 0 ? void 0 : classNames.header)),
          gap: 8,
          horizontal: true,
          style: desc ? undefined : customStyles === null || customStyles === void 0 ? void 0 : customStyles.header,
          children: [/*#__PURE__*/isValidElement(icon) ? icon : /*#__PURE__*/_jsx(Icon, {
            icon: icon,
            size: {
              size: '1.1em'
            }
          }), content]
        });
      }
      if (desc) {
        content = /*#__PURE__*/_jsxs(Flexbox, {
          className: classNames === null || classNames === void 0 ? void 0 : classNames.header,
          style: customStyles === null || customStyles === void 0 ? void 0 : customStyles.header,
          children: [content, /*#__PURE__*/_jsx("div", {
            className: cx(styles.desc, classNames === null || classNames === void 0 ? void 0 : classNames.desc),
            style: customStyles === null || customStyles === void 0 ? void 0 : customStyles.desc,
            children: desc
          })]
        });
      }
      return _objectSpread({
        label: content
      }, itemRest);
    });
  }, [items, classNames, customStyles, styles]);
  return /*#__PURE__*/_jsx(ConfigProvider, {
    theme: {
      components: {
        Collapse: {
          contentPadding: getPadding(_typeof(padding) === 'object' ? padding === null || padding === void 0 ? void 0 : padding.body : padding),
          headerPadding: getPadding(_typeof(padding) === 'object' ? padding === null || padding === void 0 ? void 0 : padding.header : padding)
        }
      }
    },
    children: /*#__PURE__*/_jsx(AntdCollapse, _objectSpread({
      bordered: false,
      className: cx(variants({
        collapsible: collapsible,
        gap: !!gap,
        variant: variant
      }), className),
      collapsible: collapsible ? 'header' : 'icon',
      expandIcon: function expandIcon(_ref3) {
        var isActive = _ref3.isActive;
        return /*#__PURE__*/_jsx(Icon, {
          className: styles.icon,
          icon: ChevronDown,
          size: 16,
          style: {
            rotate: isActive ? undefined : '-90deg'
          }
        });
      },
      ghost: true,
      items: antdItems,
      ref: ref,
      size: size,
      style: _objectSpread({
        gap: gap
      }, style)
    }, rest))
  });
});
Collapse.displayName = 'Collapse';
export default Collapse;