'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["closeIcon", "closable", "description", "showIcon", "type", "glass", "icon", "colorfulText", "iconProps", "style", "extra", "classNames", "text", "extraDefaultExpand", "extraIsolate", "banner", "variant", "ref"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { Alert as AntdAlert, message } from 'antd';
import { cva } from 'class-variance-authority';
import { camelCase } from 'lodash-es';
import { AlertTriangle, CheckCircle, ChevronDown, ChevronRight, Info, X, XCircle } from 'lucide-react';
import { memo, useMemo, useState } from 'react';
import { Flexbox } from 'react-layout-kit';
import ActionIcon from "../ActionIcon";
import Icon from "../Icon";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var typeIcons = {
  error: XCircle,
  info: Info,
  success: CheckCircle,
  warning: AlertTriangle
};
var colors = function colors(theme) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';
  for (var _len = arguments.length, keys = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    keys[_key - 2] = arguments[_key];
  }
  return theme[camelCase(['color', type].concat(keys).join('-'))];
};
var Alert = /*#__PURE__*/memo(function (_ref) {
  var closeIcon = _ref.closeIcon,
    _ref$closable = _ref.closable,
    closable = _ref$closable === void 0 ? false : _ref$closable,
    description = _ref.description,
    _ref$showIcon = _ref.showIcon,
    showIcon = _ref$showIcon === void 0 ? true : _ref$showIcon,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'info' : _ref$type,
    glass = _ref.glass,
    icon = _ref.icon,
    _ref$colorfulText = _ref.colorfulText,
    colorfulText = _ref$colorfulText === void 0 ? true : _ref$colorfulText,
    iconProps = _ref.iconProps,
    style = _ref.style,
    extra = _ref.extra,
    classNames = _ref.classNames,
    text = _ref.text,
    _ref$extraDefaultExpa = _ref.extraDefaultExpand,
    extraDefaultExpand = _ref$extraDefaultExpa === void 0 ? false : _ref$extraDefaultExpa,
    extraIsolate = _ref.extraIsolate,
    banner = _ref.banner,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'filled' : _ref$variant,
    ref = _ref.ref,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(extraDefaultExpand),
    _useState2 = _slicedToArray(_useState, 2),
    expand = _useState2[0],
    setExpand = _useState2[1];
  var _useStyles = useStyles({
      closable: !!closable,
      hasTitle: !!description,
      showIcon: !!showIcon
    }),
    theme = _useStyles.theme,
    styles = _useStyles.styles,
    cx = _useStyles.cx;
  var variants = useMemo(function () {
    return cva(styles.root, {
      defaultVariants: {
        colorfulText: true,
        glass: false,
        variant: 'filled'
      },
      /* eslint-disable sort-keys-fix/sort-keys-fix */
      variants: {
        variant: {
          filled: styles.filled,
          outlined: styles.outlined,
          borderless: styles.borderless
        },
        glass: {
          false: null,
          true: styles.glass
        },
        colorfulText: {
          false: null,
          true: styles.colorfulText
        },
        hasExtra: {
          false: null,
          true: styles.hasExtra
        }
      }
      /* eslint-enable sort-keys-fix/sort-keys-fix */
    });
  }, [styles]);
  var extraVariants = useMemo(function () {
    return cva(styles.extra, {
      defaultVariants: {
        variant: 'filled'
      },
      /* eslint-disable sort-keys-fix/sort-keys-fix */
      variants: {
        variant: {
          filled: styles.filled,
          outlined: styles.outlined,
          borderless: styles.borderless
        },
        banner: {
          false: null,
          true: styles.banner
        }
      }
      /* eslint-enable sort-keys-fix/sort-keys-fix */
    });
  }, [styles]);
  var extraHeaderVariants = useMemo(function () {
    return cva(styles.extraHeader, {
      defaultVariants: {
        variant: 'filled'
      },
      /* eslint-disable sort-keys-fix/sort-keys-fix */
      variants: {
        variant: {
          filled: null,
          outlined: null,
          borderless: styles.borderlessExtraHeader
        }
      }
      /* eslint-enable sort-keys-fix/sort-keys-fix */
    });
  }, [styles]);
  var extraBodyVariants = useMemo(function () {
    return cva(styles.extraBody, {
      defaultVariants: {
        variant: 'filled'
      },
      /* eslint-disable sort-keys-fix/sort-keys-fix */
      variants: {
        variant: {
          filled: null,
          outlined: null,
          borderless: styles.borderless
        }
      }
      /* eslint-enable sort-keys-fix/sort-keys-fix */
    });
  }, [styles]);
  var isInsideExtra = Boolean(!extraIsolate && !!extra);
  var alert = /*#__PURE__*/_jsx(AntdAlert, _objectSpread({
    banner: banner,
    className: cx(variants({
      colorfulText: colorfulText,
      glass: glass,
      hasExtra: isInsideExtra,
      variant: variant
    }), classNames === null || classNames === void 0 ? void 0 : classNames.alert),
    closable: closable,
    closeIcon: closeIcon || /*#__PURE__*/_jsx(ActionIcon, {
      color: colors(theme, type),
      icon: X,
      size: 'small'
    }),
    description: description,
    icon: /*#__PURE__*/_jsx(Icon, _objectSpread({
      icon: typeIcons[type] || icon,
      size: description ? 24 : 18
    }, iconProps)),
    ref: ref,
    showIcon: showIcon,
    style: _objectSpread({
      background: colors(theme, type, 'fillTertiary'),
      borderColor: colors(theme, type, 'fillSecondary'),
      color: colorfulText ? colors(theme, type) : undefined
    }, style),
    type: type
  }, rest));
  if (!extra) return alert;
  if (extraIsolate) return /*#__PURE__*/_jsxs(Flexbox, {
    className: classNames === null || classNames === void 0 ? void 0 : classNames.container,
    gap: 8,
    children: [alert, extra]
  });
  return /*#__PURE__*/_jsxs(Flexbox, {
    className: classNames === null || classNames === void 0 ? void 0 : classNames.container,
    children: [alert, /*#__PURE__*/_jsxs(Flexbox, {
      className: extraVariants({
        banner: banner,
        variant: variant
      }),
      style: {
        background: colors(theme, type, 'fillTertiary'),
        borderColor: colors(theme, type, 'fillSecondary'),
        color: colors(theme, type),
        fontSize: description ? 14 : 12
      },
      children: [/*#__PURE__*/_jsxs(Flexbox, {
        align: 'center',
        className: extraHeaderVariants({
          variant: variant
        }),
        gap: message ? 6 : 10,
        horizontal: true,
        style: {
          borderColor: colors(theme, type, 'fillSecondary')
        },
        children: [/*#__PURE__*/_jsx(ActionIcon, {
          color: colors(theme, type),
          icon: expand ? ChevronDown : ChevronRight,
          onClick: function onClick() {
            return setExpand(!expand);
          },
          size: 18
        }), /*#__PURE__*/_jsx("div", {
          className: cx(styles.expandText),
          onClick: function onClick() {
            return setExpand(!expand);
          },
          children: (text === null || text === void 0 ? void 0 : text.detail) || 'Show Details'
        })]
      }), expand && /*#__PURE__*/_jsx("div", {
        className: extraBodyVariants({
          variant: variant
        }),
        children: extra
      })]
    })]
  });
});
Alert.displayName = 'Alert';
export default Alert;