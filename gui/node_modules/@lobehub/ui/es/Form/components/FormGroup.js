'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["className", "icon", "title", "children", "extra", "variant", "defaultActive", "collapsible", "active", "keyValue", "onCollapse", "desc"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { useResponsive } from 'antd-style';
import { cva } from 'class-variance-authority';
import { isUndefined } from 'lodash-es';
import { memo, useMemo } from 'react';
import { Flexbox } from 'react-layout-kit';
import Collapse from "../../Collapse";
import Icon from "../../Icon";
import { useGroupStyles as useStyles } from "../style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var FormGroup = /*#__PURE__*/memo(function (_ref) {
  var className = _ref.className,
    icon = _ref.icon,
    title = _ref.title,
    children = _ref.children,
    extra = _ref.extra,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'borderless' : _ref$variant,
    _ref$defaultActive = _ref.defaultActive,
    defaultActive = _ref$defaultActive === void 0 ? true : _ref$defaultActive,
    collapsible = _ref.collapsible,
    active = _ref.active,
    _ref$keyValue = _ref.keyValue,
    keyValue = _ref$keyValue === void 0 ? 'group' : _ref$keyValue,
    onCollapse = _ref.onCollapse,
    desc = _ref.desc,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useResponsive = useResponsive(),
    mobile = _useResponsive.mobile;
  var _useStyles = useStyles(variant),
    cx = _useStyles.cx,
    styles = _useStyles.styles;
  var isBorderless = variant === 'borderless';
  var defaultCollapsible = isUndefined(collapsible) ? !isBorderless : collapsible;
  var titleVariants = useMemo(function () {
    return cva(styles.title, {
      defaultVariants: {
        variant: 'borderless'
      },
      /* eslint-disable sort-keys-fix/sort-keys-fix */
      variants: {
        variant: {
          filled: null,
          outlined: null,
          borderless: styles.titleBorderless
        }
      }
      /* eslint-enable sort-keys-fix/sort-keys-fix */
    });
  }, [styles]);
  var titleContent = /*#__PURE__*/_jsxs(Flexbox, {
    className: cx(titleVariants({
      variant: variant
    }), styles.titleMobile),
    gap: 8,
    horizontal: true,
    children: [icon && /*#__PURE__*/_jsx(Icon, {
      icon: icon
    }), title]
  });
  if (mobile) return /*#__PURE__*/_jsxs(Flexbox, {
    className: className,
    children: [/*#__PURE__*/_jsxs(Flexbox, {
      className: styles.mobileGroupHeader,
      horizontal: true,
      justify: 'space-between',
      children: [titleContent, extra]
    }), /*#__PURE__*/_jsx("div", {
      className: styles.mobileGroupBody,
      children: children
    })]
  });
  return /*#__PURE__*/_jsx(Collapse, _objectSpread({
    activeKey: isUndefined(active) ? undefined : active ? [keyValue] : [],
    className: className,
    classNames: {
      header: variant === 'borderless' ? styles.titleBorderless : undefined,
      title: variant === 'borderless' ? styles.titleBorderless : undefined
    },
    collapsible: defaultCollapsible,
    defaultActiveKey: defaultActive ? [keyValue] : undefined,
    items: [{
      children: children,
      desc: desc,
      extra: extra,
      icon: icon,
      key: keyValue,
      label: title
    }],
    onChange: function onChange(v) {
      return onCollapse === null || onCollapse === void 0 ? void 0 : onCollapse(v.length > 0);
    },
    variant: variant
  }, rest));
});
FormGroup.displayName = 'FormGroup';
export default FormGroup;