'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["enableReset", "buttonProps", "float", "onReset", "saveButtonProps", "resetButtonProps", "enableUnsavedWarning", "children", "texts", "className"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { Form } from 'antd';
import isEqual from 'fast-deep-equal';
import { motion } from 'framer-motion';
import { InfoIcon } from 'lucide-react';
import { memo, useEffect, useMemo, useState } from 'react';
import { Flexbox } from 'react-layout-kit';
import Button from "../../Button";
import Icon from "../../Icon";
import { useSubmitFooterStyles as useStyles } from "../style";
import { useFormContext } from "./FormProvider";
import { merge, removeUndefined } from "./merge";
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var FormSubmitFooter = /*#__PURE__*/memo(function (_ref) {
  var _ref$enableReset = _ref.enableReset,
    enableReset = _ref$enableReset === void 0 ? true : _ref$enableReset,
    buttonProps = _ref.buttonProps,
    float = _ref.float,
    onReset = _ref.onReset,
    saveButtonProps = _ref.saveButtonProps,
    resetButtonProps = _ref.resetButtonProps,
    enableUnsavedWarning = _ref.enableUnsavedWarning,
    children = _ref.children,
    texts = _ref.texts,
    className = _ref.className,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useFormContext = useFormContext(),
    form = _useFormContext.form,
    initialValues = _useFormContext.initialValues,
    submitLoading = _useFormContext.submitLoading;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    hasUnsavedChanges = _useState2[0],
    setHasUnsavedChanges = _useState2[1];
  var values = Form.useWatch([], form) || {};
  var _useStyles = useStyles(),
    cx = _useStyles.cx,
    styles = _useStyles.styles,
    theme = _useStyles.theme;
  var v = useMemo(function () {
    return removeUndefined(values);
  }, [values]);
  var initialV = useMemo(function () {
    return removeUndefined(initialValues);
  }, [initialValues]);
  var mergedV = useMemo(function () {
    return merge(initialV, v);
  }, [v, initialV]);
  useEffect(function () {
    setHasUnsavedChanges(!isEqual(mergedV, initialV));
  }, [mergedV, initialV, submitLoading]);
  var fn = function fn(e) {
    if (hasUnsavedChanges) {
      e.returnValue = (texts === null || texts === void 0 ? void 0 : texts.unSavedWarning) || 'You have unsaved changes. Are you sure you want to leave?';
    } else {
      delete e.returnValue;
    }
  };
  useEffect(function () {
    if (!enableUnsavedWarning) return;
    if (typeof window === 'undefined' || !hasUnsavedChanges) return;
    // 添加离开页面的提示
    window.addEventListener('beforeunload', fn);
    return function () {
      return window.removeEventListener('beforeunload', fn);
    };
  }, [enableUnsavedWarning, hasUnsavedChanges]);
  var content = /*#__PURE__*/_jsxs(_Fragment, {
    children: [(float || hasUnsavedChanges) && /*#__PURE__*/_jsxs(_Fragment, {
      children: [/*#__PURE__*/_jsx(Icon, {
        color: theme.colorTextDescription,
        icon: InfoIcon,
        size: 12,
        style: {
          marginLeft: 8
        }
      }), /*#__PURE__*/_jsx("span", {
        style: {
          color: theme.colorTextDescription,
          flex: 'none',
          fontSize: 12,
          marginRight: float ? 16 : 4
        },
        children: (texts === null || texts === void 0 ? void 0 : texts.unSaved) || 'Unsaved changes'
      })]
    }), children, enableReset && (float || hasUnsavedChanges) && /*#__PURE__*/_jsx(Button, _objectSpread(_objectSpread(_objectSpread({
      htmlType: "button",
      onClick: function onClick() {
        onReset === null || onReset === void 0 || onReset(v, initialV);
        form === null || form === void 0 || form.resetFields();
      },
      shape: float ? 'round' : undefined,
      variant: 'filled'
    }, buttonProps), resetButtonProps), {}, {
      children: (texts === null || texts === void 0 ? void 0 : texts.reset) || 'Reset'
    })), /*#__PURE__*/_jsx(Button, _objectSpread(_objectSpread(_objectSpread({
      htmlType: "submit",
      loading: submitLoading,
      shape: float ? 'round' : undefined,
      type: "primary"
    }, buttonProps), saveButtonProps), {}, {
      children: (texts === null || texts === void 0 ? void 0 : texts.submit) || 'Submit'
    }))]
  });
  if (!float) return /*#__PURE__*/_jsx(Flexbox, _objectSpread(_objectSpread({
    align: 'center',
    className: cx(styles.footer, className),
    gap: 8,
    horizontal: true,
    justify: 'flex-end'
  }, rest), {}, {
    children: content
  }));
  return /*#__PURE__*/_jsx(motion.div, {
    animate: hasUnsavedChanges ? 'visible' : 'hidden',
    className: styles.floatFooter,
    initial: 'hidden',
    transition: {
      duration: 0.1,
      ease: 'easeOut'
    },
    variants: {
      hidden: {
        opacity: 0,
        x: '-50%',
        y: 20
      },
      visible: {
        opacity: 1,
        x: '-50%',
        y: 0
      }
    },
    children: /*#__PURE__*/_jsx(Flexbox, _objectSpread(_objectSpread({
      align: 'center',
      className: className,
      gap: 8,
      horizontal: true,
      justify: 'center'
    }, rest), {}, {
      children: content
    }))
  });
});
FormSubmitFooter.displayName = 'FormSubmitFooter';
export default FormSubmitFooter;