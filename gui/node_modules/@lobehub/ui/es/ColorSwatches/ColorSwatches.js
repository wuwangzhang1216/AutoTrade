'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["enableColorPicker", "enableColorSwatches", "defaultValue", "value", "style", "colors", "onChange", "size", "shape", "texts", "ref"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { ColorPicker } from 'antd';
import chroma from 'chroma-js';
import { CheckIcon } from 'lucide-react';
import { readableColor, rgba } from 'polished';
import { memo, useMemo } from 'react';
import { Center, Flexbox } from 'react-layout-kit';
import useMergeState from 'use-merge-value';
import Icon from "../Icon";
import Tooltip from "../Tooltip";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var ColorSwatches = /*#__PURE__*/memo(function (_ref) {
  var enableColorPicker = _ref.enableColorPicker,
    _ref$enableColorSwatc = _ref.enableColorSwatches,
    enableColorSwatches = _ref$enableColorSwatc === void 0 ? true : _ref$enableColorSwatc,
    defaultValue = _ref.defaultValue,
    value = _ref.value,
    style = _ref.style,
    colors = _ref.colors,
    onChange = _ref.onChange,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 24 : _ref$size,
    _ref$shape = _ref.shape,
    shape = _ref$shape === void 0 ? 'circle' : _ref$shape,
    texts = _ref.texts,
    ref = _ref.ref,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useMergeState = useMergeState(defaultValue, {
      defaultValue: defaultValue,
      onChange: onChange,
      value: value
    }),
    _useMergeState2 = _slicedToArray(_useMergeState, 2),
    active = _useMergeState2[0],
    setActive = _useMergeState2[1];
  var _useStyles = useStyles(size),
    cx = _useStyles.cx,
    styles = _useStyles.styles,
    theme = _useStyles.theme;
  var isCustomActive = useMemo(function () {
    return active && active !== theme.colorPrimary && !colors.some(function (c) {
      return c.color === active;
    });
  }, [active, colors, theme.colorPrimary]);
  return /*#__PURE__*/_jsxs(Flexbox, _objectSpread(_objectSpread({
    gap: 6,
    horizontal: true,
    ref: ref,
    style: _objectSpread({
      flexWrap: 'wrap'
    }, style)
  }, rest), {}, {
    children: [enableColorSwatches && colors.map(function (c, i) {
      var color = c.color || theme.colorPrimary;
      var isActive = !active && !c.color || color === active;
      var isTransparent = c.color === 'transparent' || chroma(c.color).alpha() === 0;
      return /*#__PURE__*/_jsx(Tooltip, {
        title: c.title,
        children: /*#__PURE__*/_jsx(Center, {
          className: cx(styles.container, isTransparent && styles.transparent, isActive && styles.active),
          onClick: function onClick() {
            return setActive(c.color || undefined);
          },
          style: {
            background: isTransparent ? undefined : color,
            borderRadius: shape === 'circle' ? '50%' : theme.borderRadius
          },
          children: isActive && /*#__PURE__*/_jsx(Icon, {
            color: rgba(readableColor(color), 0.33),
            icon: CheckIcon,
            size: {
              size: 14,
              strokeWidth: 4
            },
            style: {
              pointerEvents: 'none'
            }
          })
        })
      }, (c === null || c === void 0 ? void 0 : c.key) || i);
    }), enableColorPicker && /*#__PURE__*/_jsx(Tooltip, {
      title: (texts === null || texts === void 0 ? void 0 : texts.custom) || 'Custom',
      children: /*#__PURE__*/_jsx(ColorPicker, {
        arrow: false,
        className: cx(styles.picker, enableColorSwatches && styles.conic, isCustomActive && styles.active),
        defaultValue: theme.colorPrimary,
        disabledAlpha: true,
        format: 'hex',
        onChangeComplete: function onChangeComplete(c) {
          if (c.toHexString() === theme.colorPrimary) {
            setActive('');
          } else {
            setActive(c.toHexString());
          }
        },
        presets: enableColorSwatches ? undefined : [{
          colors: colors.map(function (c) {
            return c.color;
          }),
          label: (texts === null || texts === void 0 ? void 0 : texts.presets) || 'Presets'
        }],
        style: {
          borderRadius: shape === 'circle' ? '50%' : theme.borderRadius
        },
        value: enableColorSwatches ? undefined : active
      })
    })]
  }));
});
ColorSwatches.displayName = 'ColorSwatches';
export default ColorSwatches;