'use client';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { useTheme } from 'antd-style';
import { kebabCase } from 'lodash-es';
import { memo, useEffect, useId, useMemo, useState } from 'react';
import Image from "../../Image";
import { useMermaid } from "../../hooks/useMermaid";
import { mermaidThemes } from "../const";
import { jsx as _jsx } from "react/jsx-runtime";
var SyntaxMermaid = /*#__PURE__*/memo(function (_ref) {
  var ref = _ref.ref,
    children = _ref.children,
    customTheme = _ref.theme,
    variant = _ref.variant,
    enablePanZoom = _ref.enablePanZoom;
  var isDefaultTheme = customTheme === 'lobe-theme' || !customTheme;
  var background = useMemo(function () {
    var _mermaidThemes$find;
    if (isDefaultTheme) return;
    return (_mermaidThemes$find = mermaidThemes.find(function (item) {
      return item.id === customTheme;
    })) === null || _mermaidThemes$find === void 0 ? void 0 : _mermaidThemes$find.background;
  }, [isDefaultTheme, customTheme]);
  var id = useId();
  var theme = useTheme();
  var mermaidId = kebabCase("mermaid-".concat(id));
  var _useMermaid = useMermaid(children, {
      id: mermaidId,
      theme: isDefaultTheme ? undefined : customTheme
    }),
    data = _useMermaid.data,
    isLoading = _useMermaid.isLoading;
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    blobUrl = _useState2[0],
    setBlobUrl = _useState2[1];

  // 组件卸载时清理 Blob URL，避免内存泄漏
  useEffect(function () {
    return function () {
      if (blobUrl) URL.revokeObjectURL(blobUrl);
    };
  }, [blobUrl]);
  useEffect(function () {
    if (isLoading || !data) return;
    var finalSvgString = data;

    // 修复Firefox点击预览mermaid图时宽高为0导致不显示的异常
    if (typeof window !== 'undefined' && typeof navigator !== 'undefined' && navigator.userAgent.includes('Firefox')) {
      var parser = new DOMParser();
      var svgDoc = parser.parseFromString(data, 'image/svg+xml');
      var svgElement = svgDoc.documentElement;
      if (svgElement && svgElement.hasAttribute('viewBox')) {
        var viewBox = svgElement.getAttribute('viewBox');
        var viewBoxParts = viewBox.split(' ');
        if (Array.isArray(viewBoxParts) && viewBoxParts.length === 4) {
          svgElement.setAttribute('width', viewBoxParts[2]);
          svgElement.setAttribute('height', viewBoxParts[3]);
        }
        finalSvgString = new XMLSerializer().serializeToString(svgDoc);
      }
    }

    // // 创建Blob对象
    var svgBlob = new Blob([finalSvgString], {
      type: 'image/svg+xml'
    });
    // // 创建并保存Blob URL
    var url = URL.createObjectURL(svgBlob);
    setBlobUrl(url);
  }, [isLoading, data]);
  if (!blobUrl) return null;
  return /*#__PURE__*/_jsx(Image, {
    alt: 'mermaid',
    maxHeight: 480,
    minWidth: 300,
    objectFit: 'contain',
    preview: enablePanZoom ? {
      mask: false,
      styles: {
        mask: {
          background: background || theme.colorBgContainerSecondary
        }
      }
    } : false,
    ref: ref,
    src: blobUrl,
    style: {
      background: variant === 'filled' ? background : undefined,
      borderRadius: 0,
      margin: 0,
      minWidth: 300,
      padding: variant === 'borderless' ? 0 : 16,
      position: 'relative',
      width: '100%'
    },
    variant: 'borderless',
    width: '100%'
  });
}, function (prevProps, nextProps) {
  return prevProps.children === nextProps.children;
});
SyntaxMermaid.displayName = 'SyntaxMermaid';
export default SyntaxMermaid;