var _templateObject, _templateObject2, _templateObject3;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
import { createStyles } from 'antd-style';
import { rgba } from 'polished';
export var useStyles = createStyles(function (_ref) {
  var cx = _ref.cx,
    css = _ref.css,
    token = _ref.token,
    isDarkMode = _ref.isDarkMode,
    stylish = _ref.stylish;
  return {
    borderless: cx(stylish.variantBorderlessWithoutHover, css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n        padding-inline: 4px;\n      "])))),
    filled: stylish.variantFilledWithoutHover,
    inverseTheme: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      color: ", ";\n      background: ", ";\n    "])), rgba(token.colorBgContainer, 0.75), rgba(token.colorBgContainer, isDarkMode ? 0.08 : 0.16)),
    outlined: stylish.variantOutlinedWithoutHover,
    root: css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n      overflow: hidden;\n\n      min-width: 1.8em;\n      height: 1.8em;\n      padding-block: 0;\n      padding-inline: 8px;\n\n      font-family: ", ";\n      font-size: 12px;\n      line-height: 1.1;\n      color: ", ";\n      text-align: center;\n      white-space: nowrap;\n\n      border: none;\n      border-radius: ", "px;\n    "])), token.fontFamily, token.colorTextSecondary, token.borderRadiusSM)
  };
});