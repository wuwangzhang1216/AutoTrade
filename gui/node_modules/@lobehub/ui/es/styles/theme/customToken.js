function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { camelCase } from 'lodash-es';
import { mix } from 'polished';
import { colorScales } from "../../color/colors";
var generateColorPalette = function generateColorPalette(_ref) {
  var _ref2;
  var name = _ref.name,
    scale = _ref.scale,
    appearance = _ref.appearance;
  var isDarkMode = appearance === 'dark';
  return _ref2 = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref2, "".concat(name, "Fill"), scale["".concat(appearance, "A")][isDarkMode ? 3 : 4]), "".concat(name, "FillSecondary"), scale["".concat(appearance, "A")][isDarkMode ? 2 : 3]), "".concat(name, "FillTertiary"), scale["".concat(appearance, "A")][isDarkMode ? 1 : 2]), "".concat(name, "FillQuaternary"), scale["".concat(appearance, "A")][isDarkMode ? 0 : 1]), "".concat(name, "Bg"), scale["".concat(appearance, "A")][1]), "".concat(name, "BgHover"), scale["".concat(appearance, "A")][2]), "".concat(name, "Border"), scale[appearance][4]), "".concat(name, "BorderSecondary"), scale[appearance][3]), "".concat(name, "BorderHover"), scale[appearance][isDarkMode ? 5 : 3]), "".concat(name, "Hover"), scale[appearance][isDarkMode ? 10 : 8]), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref2, "".concat(name), scale[appearance][9]), "".concat(name, "Active"), scale[appearance][isDarkMode ? 7 : 10]), "".concat(name, "TextHover"), scale["".concat(appearance, "A")][isDarkMode ? 10 : 8]), "".concat(name, "Text"), scale["".concat(appearance, "A")][9]), "".concat(name, "TextActive"), scale["".concat(appearance, "A")][isDarkMode ? 7 : 10]);
};
var generateCustomColorPalette = function generateCustomColorPalette(_ref3) {
  var name = _ref3.name,
    scale = _ref3.scale,
    appearance = _ref3.appearance;
  var colorStepPalette = {};
  var _iterator = _createForOfIteratorHelper(scale[appearance].entries()),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
        index = _step$value[0],
        color = _step$value[1];
      if (index === 0 || index === 12) continue;
      colorStepPalette["".concat(name).concat(index)] = color;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var _iterator2 = _createForOfIteratorHelper(scale["".concat(appearance, "A")].entries()),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _step2$value = _slicedToArray(_step2.value, 2),
        _index = _step2$value[0],
        _color = _step2$value[1];
      if (_index === 0 || _index === 12) continue;
      colorStepPalette["".concat(name).concat(_index, "A")] = _color;
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return _objectSpread(_objectSpread({}, colorStepPalette), generateColorPalette({
    appearance: appearance,
    name: name,
    scale: scale
  }));
};
export var generateCustomToken = function generateCustomToken(_ref4) {
  var isDarkMode = _ref4.isDarkMode,
    token = _ref4.token;
  var colorCustomToken = {};
  for (var _i = 0, _Object$entries = Object.entries(colorScales); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
      type = _Object$entries$_i[0],
      scale = _Object$entries$_i[1];
    colorCustomToken = _objectSpread(_objectSpread({}, colorCustomToken), generateCustomColorPalette({
      appearance: isDarkMode ? 'dark' : 'light',
      name: camelCase(type),
      scale: scale
    }));
  }
  return _objectSpread(_objectSpread({}, colorCustomToken), {}, {
    colorBgContainerSecondary: mix(0.5, token.colorBgLayout, token.colorBgContainer)
  });
};