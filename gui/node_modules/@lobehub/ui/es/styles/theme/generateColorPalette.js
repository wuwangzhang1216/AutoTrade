function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { capitalize } from 'lodash-es';
export var generateColorPalette = function generateColorPalette(_ref) {
  var _ref2;
  var type = _ref.type,
    scale = _ref.scale,
    appearance = _ref.appearance;
  var name = capitalize(type);
  var isDarkMode = appearance === 'dark';
  return _ref2 = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref2, "color".concat(name, "Fill"), scale["".concat(appearance, "A")][isDarkMode ? 3 : 4]), "color".concat(name, "FillSecondary"), scale["".concat(appearance, "A")][isDarkMode ? 2 : 3]), "color".concat(name, "FillTertiary"), scale["".concat(appearance, "A")][isDarkMode ? 1 : 2]), "color".concat(name, "FillQuaternary"), scale["".concat(appearance, "A")][isDarkMode ? 0 : 1]), "color".concat(name, "Bg"), scale[appearance][1]), "color".concat(name, "BgHover"), scale[appearance][2]), "color".concat(name, "Border"), scale[appearance][4]), "color".concat(name, "BorderHover"), scale[appearance][isDarkMode ? 5 : 3]), "color".concat(name, "Hover"), scale[appearance][isDarkMode ? 10 : 8]), "color".concat(name), scale[appearance][9]), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref2, "color".concat(name, "Active"), scale[appearance][isDarkMode ? 7 : 10]), "color".concat(name, "TextHover"), scale[appearance][isDarkMode ? 10 : 8]), "color".concat(name, "Text"), scale[appearance][9]), "color".concat(name, "TextActive"), scale[appearance][isDarkMode ? 7 : 10]);
};
export var generateColorNeutralPalette = function generateColorNeutralPalette(_ref3) {
  var scale = _ref3.scale,
    appearance = _ref3.appearance;
  return {
    colorBgContainer: appearance === 'dark' ? scale[appearance][1] : scale[appearance][0],
    colorBgElevated: appearance === 'dark' ? scale[appearance][2] : scale[appearance][0],
    colorBgLayout: appearance === 'dark' ? scale[appearance][0] : scale[appearance][1],
    colorBgMask: scale.lightA[8],
    colorBgSpotlight: scale[appearance][4],
    colorBorder: scale[appearance][3],
    colorBorderSecondary: scale[appearance][2],
    colorFill: scale["".concat(appearance, "A")][3],
    colorFillQuaternary: scale["".concat(appearance, "A")][0],
    colorFillSecondary: scale["".concat(appearance, "A")][2],
    colorFillTertiary: scale["".concat(appearance, "A")][1],
    colorText: scale[appearance][12],
    colorTextQuaternary: scale[appearance][6],
    colorTextSecondary: scale[appearance][10],
    colorTextTertiary: scale[appearance][8]
  };
};