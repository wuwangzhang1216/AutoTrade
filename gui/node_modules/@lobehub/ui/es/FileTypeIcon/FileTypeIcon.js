'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["icon", "color", "filetype", "type", "size", "style", "variant", "className", "ref"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { memo, useMemo } from 'react';
import { Center } from 'react-layout-kit';
import FileIcon from "./components/FileIcon";
import FolderIcon from "./components/FolderIcon";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var FileTypeIcon = /*#__PURE__*/memo(function (_ref) {
  var icon = _ref.icon,
    color = _ref.color,
    filetype = _ref.filetype,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'file' : _ref$type,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 48 : _ref$size,
    style = _ref.style,
    variant = _ref.variant,
    className = _ref.className,
    ref = _ref.ref,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useStyles = useStyles(),
    cx = _useStyles.cx,
    styles = _useStyles.styles,
    theme = _useStyles.theme;
  var isMono = variant === 'mono';
  var filetypeShort = useMemo(function () {
    return filetype && filetype.length > 4 ? filetype.slice(0, 4) : filetype;
  }, [filetype]);
  var fontSize = useMemo(function () {
    if (filetypeShort && filetypeShort.length > 3) {
      return 24 / (4 + (filetypeShort.length - 3));
    }
    return 6;
  }, [filetypeShort]);
  var iconColor = useMemo(function () {
    return isMono ? theme.isDarkMode ? theme.colorFill : theme.colorBgContainer : color || theme.geekblue;
  }, [isMono, theme.isDarkMode, theme.colorFill, theme.colorBgContainer, color]);
  var content = type === 'file' ? /*#__PURE__*/_jsx(FileIcon, _objectSpread({
    filetypeShort: filetypeShort,
    fontSize: fontSize,
    hasIcon: !!icon,
    iconColor: iconColor,
    isMono: isMono,
    size: size
  }, rest)) : /*#__PURE__*/_jsx(FolderIcon, _objectSpread({
    filetype: filetype,
    fontSize: fontSize,
    hasIcon: !!icon,
    iconColor: iconColor,
    isMono: isMono,
    size: size
  }, rest));
  if (!icon) return content;
  return /*#__PURE__*/_jsxs(Center, _objectSpread(_objectSpread({
    className: cx(styles.container, className),
    flex: 'none',
    height: size,
    ref: ref,
    style: style,
    width: size
  }, rest), {}, {
    children: [/*#__PURE__*/_jsx("div", {
      className: styles.inner,
      style: {
        fontSize: size / 2.4,
        top: type === 'file' ? '20%' : '16%'
      },
      children: icon
    }), content]
  }));
});
FileTypeIcon.displayName = 'FileTypeIcon';
export default FileTypeIcon;