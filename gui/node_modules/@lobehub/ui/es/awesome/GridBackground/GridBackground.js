'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["flip", "reverse", "showBackground", "backgroundColor", "random", "animationDuration", "className", "colorFront", "colorBack", "strokeWidth", "style", "animation"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { useSize } from 'ahooks';
import { shuffle } from 'lodash-es';
import { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';
import Grid from "./components/Grid";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var initialGroup = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];
var GridBackground = /*#__PURE__*/memo(function (_ref) {
  var flip = _ref.flip,
    reverse = _ref.reverse,
    showBackground = _ref.showBackground,
    backgroundColor = _ref.backgroundColor,
    random = _ref.random,
    _ref$animationDuratio = _ref.animationDuration,
    animationDuration = _ref$animationDuratio === void 0 ? 8 : _ref$animationDuratio,
    className = _ref.className,
    colorFront = _ref.colorFront,
    colorBack = _ref.colorBack,
    strokeWidth = _ref.strokeWidth,
    style = _ref.style,
    animation = _ref.animation,
    rest = _objectWithoutProperties(_ref, _excluded);
  var ref = useRef(null);
  var size = useSize(ref);
  var _useStyles = useStyles({
      backgroundColor: backgroundColor,
      reverse: reverse
    }),
    styles = _useStyles.styles,
    cx = _useStyles.cx,
    theme = _useStyles.theme;
  var gridProps = useMemo(function () {
    return {
      className: styles.highlight,
      color: colorFront || theme.colorText,
      strokeWidth: strokeWidth
    };
  }, [reverse, colorFront, strokeWidth]);
  var _useState = useState(random ? initialGroup : undefined),
    _useState2 = _slicedToArray(_useState, 2),
    group = _useState2[0],
    setGroup = _useState2[1];
  useEffect(function () {
    setGroup(random ? shuffle(initialGroup) : undefined);
  }, [random]);
  var HighlightGrid = useCallback(function () {
    if (!group) return /*#__PURE__*/_jsx(Grid, _objectSpread({
      style: {
        '--duration': "".concat(animationDuration, "s")
      }
    }, gridProps));
    return /*#__PURE__*/_jsx(_Fragment, {
      children: group.map(function (item, index) {
        return /*#__PURE__*/_jsx(Grid, _objectSpread({
          linePick: item,
          style: {
            '--delay': "".concat(index + Math.random(), "s"),
            '--duration': "".concat(animationDuration, "s")
          }
        }, gridProps), item);
      })
    });
  }, [group, animationDuration, gridProps]);
  return /*#__PURE__*/_jsxs("div", _objectSpread(_objectSpread({
    className: cx(styles.container, className),
    ref: ref,
    style: flip ? _objectSpread({
      transform: 'scaleY(-1)'
    }, style) : style
  }, rest), {}, {
    children: [/*#__PURE__*/_jsx(Grid, {
      color: colorBack || theme.colorBorder,
      strokeWidth: strokeWidth,
      style: {
        zIndex: 2
      }
    }), animation && /*#__PURE__*/_jsx(HighlightGrid, {}), showBackground && /*#__PURE__*/_jsx("div", {
      className: styles.backgroundContainer,
      style: size ? {
        fontSize: size.width / 80
      } : {},
      children: /*#__PURE__*/_jsx("div", {
        className: styles.background
      })
    })]
  }));
});
GridBackground.displayName = 'GridBackground';
export default GridBackground;