'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["variant", "className", "children", "id", "style"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { cva } from 'class-variance-authority';
import { createContext, memo, useMemo } from 'react';
import { Flexbox } from 'react-layout-kit';
import { useStyles } from "../style";
import { jsx as _jsx } from "react/jsx-runtime";
export var SortableItemContext = /*#__PURE__*/createContext({
  attributes: {},
  listeners: undefined,
  ref: function ref() {}
});
var SortableItem = /*#__PURE__*/memo(function (_ref) {
  var _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'borderless' : _ref$variant,
    className = _ref.className,
    children = _ref.children,
    id = _ref.id,
    style = _ref.style,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useStyles = useStyles(),
    cx = _useStyles.cx,
    styles = _useStyles.styles;
  var variants = useMemo(function () {
    return cva(styles.item, {
      compoundVariants: [{
        className: styles.itemVariant,
        variant: 'outlined'
      }, {
        className: styles.itemVariant,
        variant: 'filled'
      }],
      defaultVariants: {
        variant: 'borderless'
      },
      /* eslint-disable sort-keys-fix/sort-keys-fix */
      variants: {
        variant: {
          filled: styles.filled,
          outlined: styles.outlined,
          borderless: styles.borderless
        }
      }
      /* eslint-enable sort-keys-fix/sort-keys-fix */
    });
  }, [styles]);
  var _useSortable = useSortable({
      id: id
    }),
    attributes = _useSortable.attributes,
    isDragging = _useSortable.isDragging,
    listeners = _useSortable.listeners,
    setNodeRef = _useSortable.setNodeRef,
    setActivatorNodeRef = _useSortable.setActivatorNodeRef,
    transform = _useSortable.transform,
    transition = _useSortable.transition;
  var context = useMemo(function () {
    return {
      attributes: attributes,
      listeners: listeners,
      ref: setActivatorNodeRef
    };
  }, [attributes, listeners, setActivatorNodeRef]);
  return /*#__PURE__*/_jsx(SortableItemContext, {
    value: context,
    children: /*#__PURE__*/_jsx(Flexbox, _objectSpread(_objectSpread({
      align: 'center',
      as: 'li',
      className: cx(variants({
        className: className,
        variant: variant
      })),
      gap: 4,
      horizontal: true,
      ref: setNodeRef,
      style: _objectSpread({
        opacity: isDragging ? 0.4 : undefined,
        transform: CSS.Translate.toString(transform),
        transition: transition
      }, style)
    }, rest), {}, {
      children: children
    }))
  });
});
SortableItem.displayName = 'SortableItem';
export default SortableItem;