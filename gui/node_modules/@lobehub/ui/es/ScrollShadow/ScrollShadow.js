'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["className", "children", "orientation", "hideScrollBar", "size", "offset", "visibility", "isEnabled", "onVisibilityChange", "style", "ref"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { cva } from 'class-variance-authority';
import { memo, useMemo, useRef } from 'react';
import { Flexbox } from 'react-layout-kit';
import { mergeRefs } from 'react-merge-refs';
import { useStyles } from "./style";
import { useScrollOverflow } from "./useScrollOverflow";
import { jsx as _jsx } from "react/jsx-runtime";
var ScrollShadow = /*#__PURE__*/memo(function (_ref) {
  var className = _ref.className,
    children = _ref.children,
    _ref$orientation = _ref.orientation,
    orientation = _ref$orientation === void 0 ? 'vertical' : _ref$orientation,
    _ref$hideScrollBar = _ref.hideScrollBar,
    hideScrollBar = _ref$hideScrollBar === void 0 ? false : _ref$hideScrollBar,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 40 : _ref$size,
    _ref$offset = _ref.offset,
    offset = _ref$offset === void 0 ? 0 : _ref$offset,
    _ref$visibility = _ref.visibility,
    visibility = _ref$visibility === void 0 ? 'auto' : _ref$visibility,
    _ref$isEnabled = _ref.isEnabled,
    isEnabled = _ref$isEnabled === void 0 ? true : _ref$isEnabled,
    onVisibilityChange = _ref.onVisibilityChange,
    style = _ref.style,
    ref = _ref.ref,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useStyles = useStyles(size),
    cx = _useStyles.cx,
    styles = _useStyles.styles;
  var domRef = useRef(null);

  // 使用滚动检测钩子
  var scrollState = useScrollOverflow({
    domRef: domRef,
    isEnabled: isEnabled && visibility === 'auto',
    offset: offset,
    onVisibilityChange: onVisibilityChange,
    orientation: orientation,
    updateDeps: [children]
  });

  // 决定最终的滚动状态
  var finalScrollState = useMemo(function () {
    if (visibility === 'always') {
      return {
        bottom: true,
        left: true,
        right: true,
        top: true
      };
    }
    if (visibility === 'never') {
      return {
        bottom: false,
        left: false,
        right: false,
        top: false
      };
    }
    return scrollState;
  }, [visibility, scrollState]);

  // 计算数据属性
  var dataAttributes = useMemo(function () {
    var attributes = {
      'data-orientation': orientation
    };
    if (orientation === 'vertical') {
      if (finalScrollState.top && finalScrollState.bottom) {
        attributes['data-top-bottom-scroll'] = true;
      } else if (finalScrollState.top) {
        attributes['data-top-scroll'] = true;
      } else if (finalScrollState.bottom) {
        attributes['data-bottom-scroll'] = true;
      }
    } else {
      if (finalScrollState.left && finalScrollState.right) {
        attributes['data-left-right-scroll'] = true;
      } else if (finalScrollState.left) {
        attributes['data-left-scroll'] = true;
      } else if (finalScrollState.right) {
        attributes['data-right-scroll'] = true;
      }
    }
    return attributes;
  }, [orientation, finalScrollState]);

  // 计算滚动位置变体
  var scrollPosition = useMemo(function () {
    if (orientation === 'vertical') {
      if (finalScrollState.top && finalScrollState.bottom) return 'top-bottom';
      if (finalScrollState.top) return 'top';
      if (finalScrollState.bottom) return 'bottom';
    } else {
      if (finalScrollState.left && finalScrollState.right) return 'left-right';
      if (finalScrollState.left) return 'left';
      if (finalScrollState.right) return 'right';
    }
    return 'none';
  }, [orientation, finalScrollState]);
  var variants = useMemo(function () {
    return cva(styles.root, {
      defaultVariants: {
        hideScrollBar: false,
        orientation: 'vertical',
        scrollPosition: 'none'
      },
      /* eslint-disable sort-keys-fix/sort-keys-fix */
      variants: {
        orientation: {
          horizontal: styles.horizontal,
          vertical: styles.vertical
        },
        hideScrollBar: {
          true: styles.hideScrollBar,
          false: null
        },
        scrollPosition: {
          'none': null,
          'top': styles.topShadow,
          'bottom': styles.bottomShadow,
          'top-bottom': styles.topBottomShadow,
          'left': styles.leftShadow,
          'right': styles.rightShadow,
          'left-right': styles.leftRightShadow
        }
      }
      /* eslint-enable sort-keys-fix/sort-keys-fix */
    });
  }, [styles]);
  return /*#__PURE__*/_jsx(Flexbox, _objectSpread(_objectSpread(_objectSpread({
    className: cx(variants({
      hideScrollBar: hideScrollBar,
      orientation: orientation,
      scrollPosition: scrollPosition
    }), className),
    ref: mergeRefs([domRef, ref]),
    style: style
  }, dataAttributes), rest), {}, {
    children: children
  }));
});
ScrollShadow.displayName = 'ScrollShadow';
export default ScrollShadow;