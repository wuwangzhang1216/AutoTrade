'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["bordered", "className", "avatar", "title", "animation", "borderedColor", "size", "shape", "background", "style", "unoptimized", "alt", "variant", "shadow", "loading", "sliceText", "ref"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { getEmoji } from '@lobehub/fluent-emoji';
import { Avatar as AntAvatar } from 'antd';
import { cva } from 'class-variance-authority';
import { Loader2 } from 'lucide-react';
import { readableColor } from 'polished';
import { isValidElement, memo, useMemo } from 'react';
import { Center } from 'react-layout-kit';
import FluentEmoji from "../FluentEmoji";
import Icon from "../Icon";
import Img from "../Img";
import Tooltip from "../Tooltip";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var Avatar = /*#__PURE__*/memo(function (_ref) {
  var bordered = _ref.bordered,
    className = _ref.className,
    avatar = _ref.avatar,
    title = _ref.title,
    animation = _ref.animation,
    borderedColor = _ref.borderedColor,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 48 : _ref$size,
    _ref$shape = _ref.shape,
    shape = _ref$shape === void 0 ? 'circle' : _ref$shape,
    background = _ref.background,
    style = _ref.style,
    unoptimized = _ref.unoptimized,
    alt = _ref.alt,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'borderless' : _ref$variant,
    shadow = _ref.shadow,
    loading = _ref.loading,
    _ref$sliceText = _ref.sliceText,
    sliceText = _ref$sliceText === void 0 ? true : _ref$sliceText,
    ref = _ref.ref,
    rest = _objectWithoutProperties(_ref, _excluded);
  var isStringAvatar = typeof avatar === 'string';
  var isDefaultAntAvatar = useMemo(function () {
    return Boolean(avatar && (['/', 'http', 'data:'].some(function (index) {
      return isStringAvatar && avatar.startsWith(index);
    }) || /*#__PURE__*/isValidElement(avatar)));
  }, [avatar, isStringAvatar]);
  var emoji = useMemo(function () {
    return avatar && !isDefaultAntAvatar && isStringAvatar && getEmoji(avatar);
  }, [avatar, isStringAvatar, isDefaultAntAvatar]);
  var _useStyles = useStyles(),
    styles = _useStyles.styles,
    cx = _useStyles.cx,
    theme = _useStyles.theme;
  var variants = useMemo(function () {
    return cva(styles.root, {
      defaultVariants: {
        shadow: false,
        variant: 'borderless'
      },
      /* eslint-disable sort-keys-fix/sort-keys-fix */
      variants: {
        variant: {
          filled: styles.filled,
          outlined: styles.outlined,
          borderless: styles.borderless
        },
        shadow: {
          false: null,
          true: styles.shadow
        }
      }
      /* eslint-enable sort-keys-fix/sort-keys-fix */
    });
  }, [styles]);
  var text = String(isDefaultAntAvatar ? title : avatar);
  var imgAlt = alt || title || 'avatar';
  var defualtAvatar = typeof avatar === 'string' ? /*#__PURE__*/_jsx(Img, {
    alt: imgAlt,
    height: size,
    loading: 'lazy',
    src: avatar,
    unoptimized: unoptimized,
    width: size
  }) : avatar;
  var customAvatar = emoji ? /*#__PURE__*/_jsx(FluentEmoji, {
    emoji: emoji,
    size: size * 0.8,
    type: animation ? 'anim' : '3d',
    unoptimized: unoptimized
  }) : sliceText ? text === null || text === void 0 ? void 0 : text.toUpperCase().slice(0, 2) : text === null || text === void 0 ? void 0 : text.toUpperCase();
  var content = /*#__PURE__*/_jsxs(AntAvatar, _objectSpread(_objectSpread({
    alt: imgAlt,
    className: cx(variants({
      shadow: shadow,
      variant: variant
    }), className),
    draggable: false,
    ref: ref,
    shape: shape,
    size: size,
    src: isDefaultAntAvatar ? defualtAvatar : undefined,
    style: _objectSpread({
      background: customAvatar && !emoji ? background || theme.colorFill : background,
      boxShadow: bordered ? "".concat(theme.colorBgLayout, " 0 0 0 2px, ").concat(borderedColor || theme.colorTextTertiary, " 0 0 0 4px") : undefined,
      color: readableColor(background || theme.colorBorder),
      cursor: rest !== null && rest !== void 0 && rest.onClick ? 'pointer' : undefined,
      fontSize: size * (emoji ? 0.7 : 0.5)
    }, style)
  }, rest), {}, {
    children: [loading && /*#__PURE__*/_jsx(Center, {
      className: styles.loading,
      height: '100%',
      width: '100%',
      children: /*#__PURE__*/_jsx(Icon, {
        icon: Loader2,
        spin: true
      })
    }), !isDefaultAntAvatar && customAvatar]
  }));
  if (!title) return content;
  return /*#__PURE__*/_jsx(Tooltip, _objectSpread(_objectSpread({
    title: title
  }, rest.tooltipProps), {}, {
    children: content
  }));
});
Avatar.displayName = 'Avatar';
export default Avatar;