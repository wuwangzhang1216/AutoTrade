'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["fallbackUnknownType", "filename", "size", "variant", "type", "style", "open"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { memo, useMemo } from 'react';
import { Center } from 'react-layout-kit';
import { useCdnFn } from "../ConfigProvider";
import FileTypeIcon from "../FileTypeIcon";
import Img from "../Img";
import { getIconUrlForDirectoryPath, getIconUrlForFilePath } from "./utils";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var MaterialFileTypeIcon = /*#__PURE__*/memo(function (_ref) {
  var _ref$fallbackUnknownT = _ref.fallbackUnknownType,
    fallbackUnknownType = _ref$fallbackUnknownT === void 0 ? true : _ref$fallbackUnknownT,
    filename = _ref.filename,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 48 : _ref$size,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'raw' : _ref$variant,
    type = _ref.type,
    style = _ref.style,
    open = _ref.open,
    rest = _objectWithoutProperties(_ref, _excluded);
  var genCdnUrl = useCdnFn();
  var ICONS_URL = genCdnUrl({
    path: 'assets',
    pkg: '@lobehub/assets-fileicon',
    version: '1.0.0'
  });
  var iconUrl = useMemo(function () {
    return type === 'file' ? getIconUrlForFilePath({
      fallbackUnknownType: fallbackUnknownType,
      iconsUrl: ICONS_URL,
      path: filename
    }) : getIconUrlForDirectoryPath({
      fallbackUnknownType: fallbackUnknownType,
      iconsUrl: ICONS_URL,
      open: open,
      path: filename
    });
  }, [ICONS_URL, type, filename, open]);
  if (!iconUrl) return /*#__PURE__*/_jsx(FileTypeIcon, {
    filetype: filename.split('.')[1],
    size: size,
    type: type,
    variant: 'mono'
  });
  if (variant === 'raw') return /*#__PURE__*/_jsx(Img, _objectSpread({
    alt: filename,
    height: size,
    src: iconUrl,
    style: style,
    width: size
  }, rest));
  return /*#__PURE__*/_jsxs(Center, _objectSpread(_objectSpread({
    flex: 'none',
    height: size,
    style: _objectSpread({
      position: 'relative'
    }, style),
    width: size
  }, rest), {}, {
    children: [/*#__PURE__*/_jsx(FileTypeIcon, {
      size: size,
      type: variant,
      variant: 'mono'
    }), /*#__PURE__*/_jsx(Img, _objectSpread({
      alt: filename,
      height: size / 2,
      src: iconUrl,
      style: {
        position: 'absolute',
        top: size / 3
      },
      width: size / 2
    }, rest))]
  }));
});
MaterialFileTypeIcon.displayName = 'MaterialFileTypeIcon';
export default MaterialFileTypeIcon;