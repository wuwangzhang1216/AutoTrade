var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
import { createStyles } from 'antd-style';
export var useStyles = createStyles(function (_ref) {
  var prefixCls = _ref.prefixCls,
    token = _ref.token,
    css = _ref.css,
    stylish = _ref.stylish;
  return {
    borderless: css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      &.", "-select {\n        > .", "-select-selector {\n          ", "\n        }\n      }\n    "])), prefixCls, prefixCls, stylish.variantBorderless),
    filled: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      &.", "-select {\n        > .", "-select-selector {\n          ", "\n        }\n      }\n    "])), prefixCls, prefixCls, stylish.variantFilled),
    outlined: css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n      &.", "-select {\n        > .", "-select-selector {\n          ", "\n        }\n      }\n    "])), prefixCls, prefixCls, stylish.variantOutlined),
    root: css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n      &.", "-select {\n        &.", "-select-focused {\n          > .", "-select-selector {\n            background: ", " !important;\n          }\n        }\n      }\n    "])), prefixCls, prefixCls, prefixCls, token.colorFillTertiary),
    shadow: css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n      &.", "-select {\n        > .", "-select-selector {\n          ", "\n        }\n      }\n    "])), prefixCls, prefixCls, stylish.shadow)
  };
});