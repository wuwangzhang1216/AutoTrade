'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["color", "fill", "className", "active", "icon", "size", "variant", "style", "glass", "title", "onClick", "loading", "fillOpacity", "fillRule", "focusable", "shadow", "disabled", "spin", "tooltipProps", "danger", "ref"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { cva } from 'class-variance-authority';
import { Loader2 } from 'lucide-react';
import { memo, useCallback, useMemo } from 'react';
import { Center } from 'react-layout-kit';
import Icon from "../Icon";
import Tooltip from "../Tooltip";
import { calcSize } from "./components/utils";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
var ActionIcon = /*#__PURE__*/memo(function (_ref) {
  var _tooltipProps$styles;
  var color = _ref.color,
    fill = _ref.fill,
    className = _ref.className,
    active = _ref.active,
    icon = _ref.icon,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'middle' : _ref$size,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'borderless' : _ref$variant,
    style = _ref.style,
    glass = _ref.glass,
    title = _ref.title,
    onClick = _ref.onClick,
    loading = _ref.loading,
    fillOpacity = _ref.fillOpacity,
    fillRule = _ref.fillRule,
    focusable = _ref.focusable,
    shadow = _ref.shadow,
    disabled = _ref.disabled,
    iconSpinning = _ref.spin,
    tooltipProps = _ref.tooltipProps,
    danger = _ref.danger,
    ref = _ref.ref,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useStyles = useStyles(),
    styles = _useStyles.styles,
    cx = _useStyles.cx;
  var _useMemo = useMemo(function () {
      return calcSize(size);
    }, [size]),
    blockSize = _useMemo.blockSize,
    borderRadius = _useMemo.borderRadius;
  var variants = useMemo(function () {
    return cva(styles.root, {
      compoundVariants: [{
        className: styles.dangerFilled,
        danger: true,
        variant: 'filled'
      }, {
        className: styles.dangerBorderless,
        danger: true,
        variant: 'borderless'
      }, {
        className: styles.dangerOutlined,
        danger: true,
        variant: 'outlined'
      }],
      defaultVariants: {
        active: false,
        danger: false,
        disabled: false,
        glass: false,
        shadow: false,
        variant: 'borderless'
      },
      /* eslint-disable sort-keys-fix/sort-keys-fix */
      variants: {
        variant: {
          filled: styles.filled,
          outlined: styles.outlined,
          borderless: styles.borderless
        },
        glass: {
          false: null,
          true: styles.glass
        },
        shadow: {
          false: null,
          true: styles.shadow
        },
        active: {
          false: null,
          true: styles.active
        },
        danger: {
          false: null,
          true: styles.dangerRoot
        },
        disabled: {
          false: null,
          true: styles.disabled
        }
      }
      /* eslint-enable sort-keys-fix/sort-keys-fix */
    });
  }, [styles]);
  var handleClick = useCallback(function (event) {
    if (loading || disabled) return;
    onClick === null || onClick === void 0 || onClick(event);
  }, [loading, disabled, onClick]);
  var node = /*#__PURE__*/_jsx(Center, _objectSpread(_objectSpread({
    className: cx(variants({
      active: active,
      danger: danger,
      disabled: disabled,
      glass: glass,
      shadow: shadow,
      variant: variant
    }), className),
    flex: 'none',
    horizontal: true,
    onClick: handleClick,
    ref: ref,
    role: "button",
    style: _objectSpread({
      borderRadius: borderRadius,
      height: blockSize,
      width: blockSize
    }, style),
    tabIndex: disabled ? -1 : 0
  }, rest), {}, {
    children: icon && /*#__PURE__*/_jsx(Icon, {
      color: color,
      fill: fill,
      fillOpacity: fillOpacity,
      fillRule: fillRule,
      focusable: focusable,
      icon: loading ? Loader2 : icon,
      size: size,
      spin: loading ? true : iconSpinning,
      style: {
        pointerEvents: 'none'
      }
    })
  }));
  if (!title) return node;
  return /*#__PURE__*/_jsx(Tooltip, _objectSpread(_objectSpread({
    title: title
  }, tooltipProps), {}, {
    styles: _objectSpread(_objectSpread({}, tooltipProps === null || tooltipProps === void 0 ? void 0 : tooltipProps.styles), {}, {
      root: _objectSpread({
        pointerEvents: 'none'
      }, tooltipProps === null || tooltipProps === void 0 || (_tooltipProps$styles = tooltipProps.styles) === null || _tooltipProps$styles === void 0 ? void 0 : _tooltipProps$styles.root)
    }),
    children: node
  }));
});
ActionIcon.displayName = 'ActionIcon';
export default ActionIcon;