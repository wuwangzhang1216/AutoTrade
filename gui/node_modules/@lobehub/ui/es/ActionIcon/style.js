var _templateObject, _templateObject2;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
import { createStyles } from 'antd-style';
export var useStyles = createStyles(function (_ref) {
  var isDarkMode = _ref.isDarkMode,
    css = _ref.css,
    token = _ref.token,
    stylish = _ref.stylish;
  return {
    active: stylish.active,
    borderless: stylish.variantBorderless,
    dangerBorderless: stylish.variantBorderlessDanger,
    dangerFilled: stylish.variantFilledDanger,
    dangerOutlined: stylish.variantOutlinedDanger,
    dangerRoot: css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      &:hover {\n        color: ", ";\n      }\n\n      &:active {\n        color: ", ";\n      }\n    "])), token.colorError, token.colorErrorActive),
    disabled: stylish.disabled,
    filled: stylish.variantFilled,
    glass: stylish.blur,
    outlined: stylish.variantOutlined,
    root: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      cursor: pointer;\n\n      position: relative;\n\n      overflow: hidden;\n\n      color: ", ";\n\n      transition:\n        color 400ms ", ",\n        background 100ms ", ";\n\n      &:hover {\n        color: ", ";\n      }\n\n      &:active {\n        color: ", ";\n      }\n    "])), token.colorTextTertiary, token.motionEaseOut, token.motionEaseOut, token.colorTextSecondary, isDarkMode ? token.colorTextTertiary : token.colorText),
    shadow: stylish.shadow
  };
});