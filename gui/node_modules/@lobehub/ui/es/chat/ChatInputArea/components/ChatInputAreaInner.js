'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["ref", "resize", "onCompositionEnd", "onPressEnter", "onCompositionStart", "className", "onInput", "loading", "onSend", "onBlur", "onChange"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { memo, useRef } from 'react';
import { TextArea } from "../../../Input";
import { jsx as _jsx } from "react/jsx-runtime";
var ChatInputAreaInner = /*#__PURE__*/memo(function (_ref) {
  var ref = _ref.ref,
    _ref$resize = _ref.resize,
    resize = _ref$resize === void 0 ? false : _ref$resize,
    _onCompositionEnd = _ref.onCompositionEnd,
    _onPressEnter = _ref.onPressEnter,
    _onCompositionStart = _ref.onCompositionStart,
    className = _ref.className,
    onInput = _ref.onInput,
    loading = _ref.loading,
    onSend = _ref.onSend,
    _onBlur = _ref.onBlur,
    _onChange = _ref.onChange,
    rest = _objectWithoutProperties(_ref, _excluded);
  var isChineseInput = useRef(false);
  return /*#__PURE__*/_jsx(TextArea, _objectSpread({
    className: className,
    onBlur: function onBlur(e) {
      onInput === null || onInput === void 0 || onInput(e.target.value);
      _onBlur === null || _onBlur === void 0 || _onBlur(e);
    },
    onChange: function onChange(e) {
      onInput === null || onInput === void 0 || onInput(e.target.value);
      _onChange === null || _onChange === void 0 || _onChange(e);
    },
    onCompositionEnd: function onCompositionEnd(e) {
      isChineseInput.current = false;
      _onCompositionEnd === null || _onCompositionEnd === void 0 || _onCompositionEnd(e);
    },
    onCompositionStart: function onCompositionStart(e) {
      isChineseInput.current = true;
      _onCompositionStart === null || _onCompositionStart === void 0 || _onCompositionStart(e);
    },
    onPressEnter: function onPressEnter(e) {
      _onPressEnter === null || _onPressEnter === void 0 || _onPressEnter(e);
      var isMobile = /mobi|android|iphone/i.test(navigator.userAgent);
      if (!loading && !isChineseInput.current && (!isMobile && !e.shiftKey || isMobile && e.shiftKey)) {
        e.preventDefault();
        onSend === null || onSend === void 0 || onSend();
      }
    },
    ref: ref,
    resize: resize,
    variant: 'borderless'
  }, rest));
});
export default ChatInputAreaInner;