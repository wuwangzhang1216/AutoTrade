'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["onActionsClick", "onAvatarsClick", "renderMessagesExtra", "className", "data", "variant", "text", "showTitle", "onMessageChange", "renderMessages", "renderErrorMessages", "loadingId", "renderItems", "enableHistoryCount", "renderActions", "historyCount", "showAvatar"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { Fragment, memo } from 'react';
import ChatListItem from "./components/ChatListItem";
import HistoryDivider from "./components/HistoryDivider";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var ChatList = /*#__PURE__*/memo(function (_ref) {
  var onActionsClick = _ref.onActionsClick,
    onAvatarsClick = _ref.onAvatarsClick,
    renderMessagesExtra = _ref.renderMessagesExtra,
    className = _ref.className,
    data = _ref.data,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'bubble' : _ref$variant,
    text = _ref.text,
    showTitle = _ref.showTitle,
    onMessageChange = _ref.onMessageChange,
    renderMessages = _ref.renderMessages,
    renderErrorMessages = _ref.renderErrorMessages,
    loadingId = _ref.loadingId,
    renderItems = _ref.renderItems,
    enableHistoryCount = _ref.enableHistoryCount,
    renderActions = _ref.renderActions,
    _ref$historyCount = _ref.historyCount,
    historyCount = _ref$historyCount === void 0 ? 0 : _ref$historyCount,
    showAvatar = _ref.showAvatar,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useStyles = useStyles(),
    cx = _useStyles.cx,
    styles = _useStyles.styles;
  return /*#__PURE__*/_jsx("div", _objectSpread(_objectSpread({
    className: cx(styles.container, className)
  }, rest), {}, {
    children: data.map(function (item, index) {
      var itemProps = {
        loading: loadingId === item.id,
        onActionsClick: onActionsClick,
        onAvatarsClick: onAvatarsClick,
        onMessageChange: onMessageChange,
        renderActions: renderActions,
        renderErrorMessages: renderErrorMessages,
        renderItems: renderItems,
        renderMessages: renderMessages,
        renderMessagesExtra: renderMessagesExtra,
        showAvatar: showAvatar,
        showTitle: showTitle,
        text: text,
        variant: variant
      };
      var historyLength = data.length;
      var enableHistoryDivider = enableHistoryCount && historyLength > historyCount && historyCount === historyLength - index + 1;
      return /*#__PURE__*/_jsxs(Fragment, {
        children: [/*#__PURE__*/_jsx(HistoryDivider, {
          enable: enableHistoryDivider,
          text: text === null || text === void 0 ? void 0 : text.history
        }), /*#__PURE__*/_jsx(ChatListItem, _objectSpread(_objectSpread({}, itemProps), item))]
      }, item.id);
    })
  }));
});
export default ChatList;