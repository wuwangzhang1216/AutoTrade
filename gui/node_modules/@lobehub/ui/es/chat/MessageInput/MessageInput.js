'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["text", "variant", "onCancel", "defaultValue", "onConfirm", "renderButtons", "placeholder", "styles", "style", "editButtonSize", "classNames", "shortcut", "language"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { useResponsive } from 'antd-style';
import { memo, useState } from 'react';
import { useHotkeys } from 'react-hotkeys-hook';
import { Flexbox } from 'react-layout-kit';
import Button from "../../Button";
import CodeEditor from "../../CodeEditor";
import { KeyMapEnum } from "../../Hotkey/const";
import { combineKeys } from "../../Hotkey/utils";
import TextArea from "../../Input/TextArea";
import Tooltip from "../../Tooltip";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var MessageInput = /*#__PURE__*/memo(function (_ref) {
  var text = _ref.text,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'borderless' : _ref$variant,
    onCancel = _ref.onCancel,
    defaultValue = _ref.defaultValue,
    onConfirm = _ref.onConfirm,
    renderButtons = _ref.renderButtons,
    placeholder = _ref.placeholder,
    customStyles = _ref.styles,
    style = _ref.style,
    _ref$editButtonSize = _ref.editButtonSize,
    editButtonSize = _ref$editButtonSize === void 0 ? 'middle' : _ref$editButtonSize,
    classNames = _ref.classNames,
    shortcut = _ref.shortcut,
    _ref$language = _ref.language,
    language = _ref$language === void 0 ? 'markdown' : _ref$language,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useResponsive = useResponsive(),
    mobile = _useResponsive.mobile;
  var _useState = useState(defaultValue || ''),
    _useState2 = _slicedToArray(_useState, 2),
    temporaryValue = _useState2[0],
    setValue = _useState2[1];
  var _useStyles = useStyles(),
    cx = _useStyles.cx,
    styles = _useStyles.styles;
  var confirmHotkey = combineKeys([KeyMapEnum.Mod, KeyMapEnum.Enter]);
  var confirmText = (text === null || text === void 0 ? void 0 : text.confirm) || 'Confirm';
  var cancelHotkey = combineKeys([KeyMapEnum.Esc]);
  var cancelText = (text === null || text === void 0 ? void 0 : text.cancel) || 'Cancel';
  var handleConfirm = function handleConfirm() {
    return onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm(temporaryValue);
  };
  var handleCancel = function handleCancel() {
    return onCancel === null || onCancel === void 0 ? void 0 : onCancel();
  };
  useHotkeys(confirmHotkey, handleConfirm, {
    enableOnFormTags: true,
    enabled: shortcut,
    preventDefault: true
  });
  var confirmButton = /*#__PURE__*/_jsx(Button, {
    onClick: handleConfirm,
    size: editButtonSize,
    type: "primary",
    children: confirmText
  });
  var cancllButton = /*#__PURE__*/_jsx(Button, {
    onClick: handleCancel,
    size: editButtonSize,
    variant: 'filled',
    children: (text === null || text === void 0 ? void 0 : text.cancel) || 'Cancel'
  });
  return /*#__PURE__*/_jsxs(Flexbox, _objectSpread(_objectSpread({
    gap: 16,
    style: _objectSpread({
      flex: 1,
      width: '100%'
    }, style)
  }, rest), {}, {
    children: [mobile ? /*#__PURE__*/_jsx(TextArea, {
      autoSize: true,
      className: cx(styles, classNames === null || classNames === void 0 ? void 0 : classNames.editor),
      onBlur: function onBlur(e) {
        return setValue(e.target.value);
      },
      onChange: function onChange(e) {
        return setValue(e.target.value);
      },
      placeholder: placeholder,
      style: customStyles === null || customStyles === void 0 ? void 0 : customStyles.editor,
      value: temporaryValue,
      variant: variant
    }) : /*#__PURE__*/_jsx(CodeEditor, {
      className: cx(styles, classNames === null || classNames === void 0 ? void 0 : classNames.editor),
      classNames: classNames,
      language: language,
      onBlur: function onBlur(e) {
        return setValue(e.target.value);
      },
      onValueChange: function onValueChange(e) {
        return setValue(e);
      },
      placeholder: placeholder,
      style: customStyles === null || customStyles === void 0 ? void 0 : customStyles.editor,
      styles: customStyles,
      value: temporaryValue,
      variant: variant
    }), /*#__PURE__*/_jsx(Flexbox, {
      direction: 'horizontal-reverse',
      gap: 8,
      children: renderButtons ? renderButtons(temporaryValue).map(function (buttonProps, index) {
        return /*#__PURE__*/_jsx(Button, _objectSpread({
          size: editButtonSize
        }, buttonProps), index);
      }) : /*#__PURE__*/_jsxs(_Fragment, {
        children: [shortcut ? /*#__PURE__*/_jsx(Tooltip, {
          hotkey: confirmHotkey,
          title: confirmText,
          children: confirmButton
        }) : confirmButton, shortcut ? /*#__PURE__*/_jsx(Tooltip, {
          hotkey: cancelHotkey,
          title: cancelText,
          children: cancllButton
        }) : cancllButton]
      })
    })]
  }));
});
export default MessageInput;