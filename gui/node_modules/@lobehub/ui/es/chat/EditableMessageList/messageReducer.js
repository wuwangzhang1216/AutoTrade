function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import { produce } from 'immer';
export var messagesReducer = function messagesReducer(state, payload) {
  switch (payload.type) {
    case 'addMessage':
      {
        return [].concat(_toConsumableArray(state), [payload.message]);
      }
    case 'insertMessage':
      {
        return produce(state, function (draftState) {
          draftState.splice(payload.index, 0, payload.message);
        });
      }
    case 'deleteMessage':
      {
        return state.filter(function (_, index) {
          return index !== payload.index;
        });
      }
    case 'resetMessages':
      {
        return [];
      }
    case 'updateMessage':
      {
        return produce(state, function (draftState) {
          var index = payload.index,
            message = payload.message;
          draftState[index].content = message;
        });
      }
    case 'updateMessageRole':
      {
        return produce(state, function (draftState) {
          var index = payload.index,
            role = payload.role;
          draftState[index].role = role;
        });
      }
    case 'addUserMessage':
      {
        return produce(state, function (draftState) {
          draftState.push({
            content: payload.message,
            role: 'user'
          });
        });
      }
    case 'updateLatestBotMessage':
      {
        return produce(state, function () {
          var responseStream = payload.responseStream;
          var newMessage = {
            content: responseStream.join(''),
            role: 'assistant'
          };
          return [].concat(_toConsumableArray(state.slice(0, -1)), [newMessage]);
        });
      }
    case 'setErrorMessage':
      {
        return produce(state, function (draftState) {
          var index = payload.index,
            error = payload.error;

          // @ts-ignore
          draftState[index].error = error;
        });
      }
    default:
      {
        throw new Error('暂未实现的 type，请检查 reducer');
      }
  }
};