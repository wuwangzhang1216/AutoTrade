'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { cx } from 'antd-style';
import { memo } from 'react';
import useControlledState from 'use-merge-value';
import Markdown from "../../Markdown";
import MessageInput from "../MessageInput";
import MessageModal from "../MessageModal";
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var EditableMessage = /*#__PURE__*/memo(function (_ref) {
  var value = _ref.value,
    onChange = _ref.onChange,
    _ref$classNames = _ref.classNames,
    classNames = _ref$classNames === void 0 ? {} : _ref$classNames,
    onEditingChange = _ref.onEditingChange,
    editing = _ref.editing,
    openModal = _ref.openModal,
    onOpenChange = _ref.onOpenChange,
    placeholder = _ref.placeholder,
    _ref$showEditWhenEmpt = _ref.showEditWhenEmpty,
    showEditWhenEmpty = _ref$showEditWhenEmpt === void 0 ? false : _ref$showEditWhenEmpt,
    customStyles = _ref.styles,
    className = _ref.className,
    style = _ref.style,
    height = _ref.height,
    variant = _ref.variant,
    editButtonSize = _ref.editButtonSize,
    text = _ref.text,
    fullFeaturedCodeBlock = _ref.fullFeaturedCodeBlock,
    model = _ref.model,
    fontSize = _ref.fontSize,
    _ref$language = _ref.language,
    language = _ref$language === void 0 ? 'markdown' : _ref$language,
    markdownProps = _ref.markdownProps;
  var _useControlledState = useControlledState(false, {
      onChange: onEditingChange,
      value: editing
    }),
    _useControlledState2 = _slicedToArray(_useControlledState, 2),
    isEdit = _useControlledState2[0],
    setTyping = _useControlledState2[1];
  var _useControlledState3 = useControlledState(false, {
      onChange: onOpenChange,
      value: openModal
    }),
    _useControlledState4 = _slicedToArray(_useControlledState3, 2),
    expand = _useControlledState4[0],
    setExpand = _useControlledState4[1];
  var isAutoSize = height === 'auto';
  var input = /*#__PURE__*/_jsx(MessageInput, {
    className: cx(className, classNames === null || classNames === void 0 ? void 0 : classNames.input),
    classNames: classNames,
    defaultValue: value,
    editButtonSize: editButtonSize,
    height: height,
    language: language,
    onCancel: function onCancel() {
      return setTyping(false);
    },
    onConfirm: function onConfirm(text) {
      onChange === null || onChange === void 0 || onChange(text);
      setTyping(false);
    },
    placeholder: placeholder,
    shortcut: true,
    style: _objectSpread(_objectSpread({}, style), customStyles === null || customStyles === void 0 ? void 0 : customStyles.input),
    styles: customStyles,
    text: text,
    variant: variant
  });
  if (!value && showEditWhenEmpty) return input;
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [!expand && isEdit ? input : /*#__PURE__*/_jsx(Markdown, _objectSpread(_objectSpread({
      className: cx(className, classNames === null || classNames === void 0 ? void 0 : classNames.markdown),
      fontSize: fontSize,
      fullFeaturedCodeBlock: fullFeaturedCodeBlock,
      style: _objectSpread(_objectSpread({
        height: isAutoSize ? 'unset' : height
      }, style), customStyles === null || customStyles === void 0 ? void 0 : customStyles.markdown),
      variant: 'chat'
    }, markdownProps), {}, {
      children: value || placeholder || ''
    })), expand && /*#__PURE__*/_jsx(MessageModal, {
      editing: isEdit,
      extra: model === null || model === void 0 ? void 0 : model.extra,
      footer: model === null || model === void 0 ? void 0 : model.footer,
      height: height,
      language: language,
      onChange: onChange,
      onEditingChange: setTyping,
      onOpenChange: function onOpenChange(e) {
        setExpand(e);
        setTyping(false);
      },
      open: expand,
      placeholder: placeholder,
      text: text,
      value: value
    })]
  });
});
EditableMessage.displayName = 'EditableMessage';
export default EditableMessage;