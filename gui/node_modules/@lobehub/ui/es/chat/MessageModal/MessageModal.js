'use client';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { useResponsive } from 'antd-style';
import { memo, useState } from 'react';
import { Flexbox } from 'react-layout-kit';
import useControlledState from 'use-merge-value';
import Button from "../../Button";
import CodeEditor from "../../CodeEditor";
import TextArea from "../../Input/TextArea";
import Markdown from "../../Markdown";
import Modal from "../../Modal";
import { useStyles as useTextStyles } from "../MessageInput/style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
var MessageModal = /*#__PURE__*/memo(function (_ref) {
  var panelRef = _ref.panelRef,
    editing = _ref.editing,
    open = _ref.open,
    _ref$height = _ref.height,
    height = _ref$height === void 0 ? '75vh' : _ref$height,
    onOpenChange = _ref.onOpenChange,
    onEditingChange = _ref.onEditingChange,
    placeholder = _ref.placeholder,
    value = _ref.value,
    _ref$language = _ref.language,
    language = _ref$language === void 0 ? 'markdown' : _ref$language,
    onChange = _ref.onChange,
    text = _ref.text,
    footer = _ref.footer,
    extra = _ref.extra;
  var _useResponsive = useResponsive(),
    mobile = _useResponsive.mobile;
  var _useTextStyles = useTextStyles(),
    textStyles = _useTextStyles.styles;
  var _useControlledState = useControlledState(false, {
      onChange: onEditingChange,
      value: editing
    }),
    _useControlledState2 = _slicedToArray(_useControlledState, 2),
    isEdit = _useControlledState2[0],
    setTyping = _useControlledState2[1];
  var _useControlledState3 = useControlledState(false, {
      onChange: onOpenChange,
      value: open
    }),
    _useControlledState4 = _slicedToArray(_useControlledState3, 2),
    showModal = _useControlledState4[0],
    setShowModal = _useControlledState4[1];
  var _useState = useState(value),
    _useState2 = _slicedToArray(_useState, 2),
    temporaryValue = _useState2[0],
    setMessage = _useState2[1];
  var modalFooter = isEdit ? /*#__PURE__*/_jsxs(Flexbox, {
    direction: 'horizontal-reverse',
    gap: 8,
    children: [/*#__PURE__*/_jsx(Button, {
      onClick: function onClick() {
        setTyping(false);
        onChange === null || onChange === void 0 || onChange(temporaryValue);
        setMessage(value);
      },
      type: "primary",
      children: (text === null || text === void 0 ? void 0 : text.confirm) || 'Confirm'
    }), /*#__PURE__*/_jsx(Button, {
      onClick: function onClick() {
        setTyping(false);
        setMessage(value);
      },
      children: (text === null || text === void 0 ? void 0 : text.cancel) || 'Cancel'
    })]
  }) : footer;
  return /*#__PURE__*/_jsx(Modal, {
    allowFullscreen: true,
    cancelText: (text === null || text === void 0 ? void 0 : text.cancel) || 'Cancel',
    destroyOnHidden: true,
    footer: modalFooter,
    height: height,
    okText: (text === null || text === void 0 ? void 0 : text.edit) || 'Edit',
    onCancel: function onCancel() {
      setShowModal(false);
      setTyping(false);
      setMessage(value);
    },
    onOk: function onOk() {
      return setTyping(true);
    },
    open: showModal,
    panelRef: panelRef,
    title: text === null || text === void 0 ? void 0 : text.title,
    children: isEdit ? mobile ? /*#__PURE__*/_jsx(TextArea, {
      autoSize: true,
      className: textStyles,
      defaultValue: temporaryValue,
      onBlur: function onBlur(e) {
        return setMessage(e.target.value);
      },
      onChange: function onChange(value) {
        return setMessage(value.target.value);
      },
      placeholder: placeholder,
      value: temporaryValue,
      variant: 'borderless'
    }) : /*#__PURE__*/_jsx(CodeEditor, {
      className: textStyles,
      defaultValue: temporaryValue,
      language: language,
      onBlur: function onBlur(e) {
        return setMessage(e.target.value);
      },
      onValueChange: function onValueChange(value) {
        return setMessage(value);
      },
      placeholder: placeholder,
      value: temporaryValue,
      variant: 'borderless'
    }) : /*#__PURE__*/_jsxs(_Fragment, {
      children: [extra, /*#__PURE__*/_jsx(Markdown, {
        variant: 'chat',
        children: String(value || placeholder)
      })]
    })
  });
});
MessageModal.displayName = 'MessageModal';
export default MessageModal;