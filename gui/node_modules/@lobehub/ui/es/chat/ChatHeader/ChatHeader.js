'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["left", "right", "className", "styles", "gaps", "classNames", "showBackButton", "onBackClick", "children", "gap"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { ChevronLeft } from 'lucide-react';
import { memo } from 'react';
import { Flexbox } from 'react-layout-kit';
import ActionIcon from "../../ActionIcon";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var ChatHeader = /*#__PURE__*/memo(function (_ref) {
  var left = _ref.left,
    right = _ref.right,
    className = _ref.className,
    contentStyles = _ref.styles,
    gaps = _ref.gaps,
    classNames = _ref.classNames,
    showBackButton = _ref.showBackButton,
    onBackClick = _ref.onBackClick,
    children = _ref.children,
    _ref$gap = _ref.gap,
    gap = _ref$gap === void 0 ? 16 : _ref$gap,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useStyles = useStyles(),
    cx = _useStyles.cx,
    styles = _useStyles.styles;
  return /*#__PURE__*/_jsxs(Flexbox, _objectSpread(_objectSpread({
    align: 'center',
    className: cx(styles.container, className),
    distribution: 'space-between',
    gap: gap,
    horizontal: true,
    paddingInline: 16
  }, rest), {}, {
    children: [/*#__PURE__*/_jsxs(Flexbox, {
      align: 'center',
      className: cx(styles.left, classNames === null || classNames === void 0 ? void 0 : classNames.left),
      gap: (gaps === null || gaps === void 0 ? void 0 : gaps.left) || 12,
      horizontal: true,
      justify: 'flex-start',
      style: contentStyles === null || contentStyles === void 0 ? void 0 : contentStyles.left,
      children: [showBackButton && /*#__PURE__*/_jsx(ActionIcon, {
        icon: ChevronLeft,
        onClick: function onClick() {
          return onBackClick === null || onBackClick === void 0 ? void 0 : onBackClick();
        },
        style: {
          marginRight: gaps !== null && gaps !== void 0 && gaps.left ? -gaps.left / 2 : -6
        }
      }), left]
    }), children && /*#__PURE__*/_jsx(Flexbox, {
      align: 'center',
      className: cx(styles.center, classNames === null || classNames === void 0 ? void 0 : classNames.center),
      gap: (gaps === null || gaps === void 0 ? void 0 : gaps.center) || 8,
      horizontal: true,
      justify: 'center',
      style: contentStyles === null || contentStyles === void 0 ? void 0 : contentStyles.center,
      children: children
    }), /*#__PURE__*/_jsx(Flexbox, {
      align: 'center',
      className: cx(styles.right, classNames === null || classNames === void 0 ? void 0 : classNames.right),
      gap: (gaps === null || gaps === void 0 ? void 0 : gaps.right) || 8,
      horizontal: true,
      justify: 'flex-end',
      style: contentStyles === null || contentStyles === void 0 ? void 0 : contentStyles.right,
      children: right
    })]
  }));
});
ChatHeader.displayName = 'ChatHeader';
export default ChatHeader;