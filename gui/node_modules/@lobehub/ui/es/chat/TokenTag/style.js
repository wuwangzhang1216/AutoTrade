var _templateObject, _templateObject2, _templateObject3, _templateObject4;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
import { createStyles } from 'antd-style';
export var useStyles = createStyles(function (_ref) {
  var prefixCls = _ref.prefixCls,
    css = _ref.css,
    token = _ref.token;
  return {
    low: css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      color: ", ";\n    "])), token.colorWarningText),
    normal: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      color: ", ";\n    "])), token.colorSuccessText),
    overload: css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n      color: ", ";\n    "])), token.colorErrorText),
    root: css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n      user-select: none;\n      min-width: fit-content;\n      height: 28px;\n      &.", "-btn {\n        padding-block: 12px;\n        &.", "-btn-round {\n          padding-inline: 6px 12px;\n        }\n        &.", "-btn-square {\n          padding-inline: 6px 12px;\n        }\n      }\n    "])), prefixCls, prefixCls, prefixCls)
  };
});