'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["avatarAddon", "onAvatarClick", "avatarProps", "actions", "className", "primary", "loading", "message", "placeholderMessage", "placement", "variant", "avatar", "error", "showTitle", "time", "editing", "onChange", "onEditingChange", "messageExtra", "renderMessage", "text", "errorMessage", "onDoubleClick", "fontSize", "aboveMessage", "belowMessage", "markdownProps", "actionsWrapWidth", "showAvatar", "titleAddon"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { useResponsive } from 'antd-style';
import { memo, useEffect, useRef, useState } from 'react';
import { Flexbox } from 'react-layout-kit';
import Actions from "./components/Actions";
import Avatar from "./components/Avatar";
import BorderSpacing from "./components/BorderSpacing";
import ErrorContent from "./components/ErrorContent";
import MessageContent from "./components/MessageContent";
import Title from "./components/Title";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var MOBILE_AVATAR_SIZE = 32;
var ChatItem = /*#__PURE__*/memo(function (_ref) {
  var avatarAddon = _ref.avatarAddon,
    onAvatarClick = _ref.onAvatarClick,
    avatarProps = _ref.avatarProps,
    actions = _ref.actions,
    className = _ref.className,
    primary = _ref.primary,
    loading = _ref.loading,
    message = _ref.message,
    _ref$placeholderMessa = _ref.placeholderMessage,
    placeholderMessage = _ref$placeholderMessa === void 0 ? '...' : _ref$placeholderMessa,
    _ref$placement = _ref.placement,
    placement = _ref$placement === void 0 ? 'left' : _ref$placement,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? 'bubble' : _ref$variant,
    avatar = _ref.avatar,
    error = _ref.error,
    showTitle = _ref.showTitle,
    time = _ref.time,
    editing = _ref.editing,
    onChange = _ref.onChange,
    onEditingChange = _ref.onEditingChange,
    messageExtra = _ref.messageExtra,
    renderMessage = _ref.renderMessage,
    text = _ref.text,
    errorMessage = _ref.errorMessage,
    onDoubleClick = _ref.onDoubleClick,
    fontSize = _ref.fontSize,
    aboveMessage = _ref.aboveMessage,
    belowMessage = _ref.belowMessage,
    markdownProps = _ref.markdownProps,
    _ref$actionsWrapWidth = _ref.actionsWrapWidth,
    actionsWrapWidth = _ref$actionsWrapWidth === void 0 ? 54 : _ref$actionsWrapWidth,
    _ref$showAvatar = _ref.showAvatar,
    showAvatar = _ref$showAvatar === void 0 ? true : _ref$showAvatar,
    titleAddon = _ref.titleAddon,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useResponsive = useResponsive(),
    mobile = _useResponsive.mobile;
  var _useStyles = useStyles({
      editing: editing,
      placement: placement,
      primary: primary,
      showTitle: showTitle,
      time: time,
      title: avatar.title,
      variant: variant
    }),
    cx = _useStyles.cx,
    styles = _useStyles.styles;

  // 在 ChatItem 组件中添加
  var contentRef = useRef(null);
  var containerRef = useRef(null);
  var _useState = useState(variant === 'bubble' ? 'horizontal' : 'vertical'),
    _useState2 = _slicedToArray(_useState, 2),
    layoutMode = _useState2[0],
    setLayoutMode = _useState2[1];

  // 使用 ResizeObserver 监控内容和容器尺寸
  useEffect(function () {
    if (variant === 'docs') {
      setLayoutMode('vertical');
      return;
    }
    if (!contentRef.current || !containerRef.current) return;
    var observer = new ResizeObserver(function () {
      if (!contentRef.current || !containerRef.current) return;
      var containerWidth = containerRef.current.clientWidth;
      var contentWidth = contentRef.current.scrollWidth; // 使用scrollWidth获取实际内容宽度

      // 预留给Actions的最小空间 (根据实际Actions大小调整)

      // 只有当内容宽度 + Actions最小宽度 > 容器宽度时才切换布局
      setLayoutMode(contentWidth + actionsWrapWidth > containerWidth ? 'vertical' : 'horizontal');
    });
    observer.observe(contentRef.current);
    observer.observe(containerRef.current);
    return function () {
      return observer.disconnect();
    };
  }, [variant, actionsWrapWidth]);
  return /*#__PURE__*/_jsxs(Flexbox, _objectSpread(_objectSpread({
    className: cx(styles.container, className),
    direction: placement === 'left' ? 'horizontal' : 'horizontal-reverse',
    gap: mobile ? 6 : 12
  }, rest), {}, {
    children: [showAvatar && /*#__PURE__*/_jsx(Avatar, _objectSpread(_objectSpread({}, avatarProps), {}, {
      addon: avatarAddon,
      alt: (avatarProps === null || avatarProps === void 0 ? void 0 : avatarProps.alt) || avatar.title || 'avatar',
      avatar: avatar,
      loading: loading,
      onClick: onAvatarClick,
      placement: placement,
      size: mobile ? MOBILE_AVATAR_SIZE : undefined,
      style: _objectSpread({
        marginTop: showTitle ? -12 : 6
      }, avatarProps === null || avatarProps === void 0 ? void 0 : avatarProps.style)
    })), /*#__PURE__*/_jsxs(Flexbox, {
      align: placement === 'left' ? 'flex-start' : 'flex-end',
      className: styles.messageContainer,
      ref: containerRef,
      children: [/*#__PURE__*/_jsx(Title, {
        avatar: avatar,
        placement: placement,
        showTitle: showTitle,
        time: time,
        titleAddon: titleAddon
      }), aboveMessage, /*#__PURE__*/_jsxs(Flexbox, {
        align: placement === 'left' ? 'flex-start' : 'flex-end',
        className: styles.messageContent,
        "data-layout": layoutMode // 添加数据属性以方便样式选择
        ,
        direction: layoutMode === 'horizontal' ? placement === 'left' ? 'horizontal' : 'horizontal-reverse' : 'vertical',
        gap: 8,
        children: [/*#__PURE__*/_jsx(Flexbox, {
          ref: contentRef,
          width: '100%',
          children: error && (message === placeholderMessage || !message) ? /*#__PURE__*/_jsx(ErrorContent, {
            error: error,
            message: errorMessage,
            placement: placement
          }) : /*#__PURE__*/_jsx(MessageContent, {
            editing: editing,
            fontSize: fontSize,
            markdownProps: markdownProps,
            message: message,
            messageExtra: /*#__PURE__*/_jsxs(_Fragment, {
              children: [error && /*#__PURE__*/_jsx(ErrorContent, {
                error: error,
                message: errorMessage,
                placement: placement
              }), messageExtra]
            }),
            onChange: onChange,
            onDoubleClick: onDoubleClick,
            onEditingChange: onEditingChange,
            placement: placement,
            primary: primary,
            renderMessage: renderMessage,
            text: text,
            variant: variant
          })
        }), actions && /*#__PURE__*/_jsx(Actions, {
          actions: actions,
          editing: editing,
          placement: placement,
          variant: variant
        })]
      }), belowMessage]
    }), mobile && variant === 'bubble' && showAvatar && /*#__PURE__*/_jsx(BorderSpacing, {
      borderSpacing: MOBILE_AVATAR_SIZE
    })]
  }));
});
export default ChatItem;