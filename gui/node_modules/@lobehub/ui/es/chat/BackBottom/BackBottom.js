'use client';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { useScroll } from 'ahooks';
import { ListEnd } from 'lucide-react';
import { memo, useEffect, useRef, useState } from 'react';
import Button from "../../Button";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
var BackBottom = /*#__PURE__*/memo(function (_ref) {
  var _ref$visibilityHeight = _ref.visibilityHeight,
    visibilityHeight = _ref$visibilityHeight === void 0 ? 240 : _ref$visibilityHeight,
    target = _ref.target,
    onClick = _ref.onClick,
    style = _ref.style,
    className = _ref.className,
    text = _ref.text;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    visible = _useState2[0],
    setVisible = _useState2[1];
  var _useStyles = useStyles(visible),
    styles = _useStyles.styles,
    cx = _useStyles.cx;
  var ref = useRef(null);
  var current = target === null || target === void 0 ? void 0 : target.current;
  var scrollHeight = (current === null || current === void 0 ? void 0 : current.scrollHeight) || 0;
  var clientHeight = (current === null || current === void 0 ? void 0 : current.clientHeight) || 0;
  var scroll = useScroll(target);
  useEffect(function () {
    if (scroll !== null && scroll !== void 0 && scroll.top) {
      setVisible((scroll === null || scroll === void 0 ? void 0 : scroll.top) + clientHeight + visibilityHeight < scrollHeight);
    }
  }, [scrollHeight, scroll, visibilityHeight]);
  var scrollToBottom = function scrollToBottom(e) {
    var _current;
    target === null || target === void 0 || (_current = target.current) === null || _current === void 0 || _current.scrollTo({
      behavior: 'smooth',
      left: 0,
      top: scrollHeight
    });
    onClick === null || onClick === void 0 || onClick(e);
  };
  return /*#__PURE__*/_jsx(Button, {
    className: cx(styles, className),
    glass: true,
    icon: ListEnd,
    onClick: scrollToBottom,
    ref: ref,
    shape: 'round',
    size: 'small',
    style: style,
    variant: 'filled',
    children: text || 'Back to bottom'
  });
});
BackBottom.displayName = 'BackBottom';
export default BackBottom;