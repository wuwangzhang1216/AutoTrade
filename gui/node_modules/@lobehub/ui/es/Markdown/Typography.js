'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["ref", "children", "className", "fontSize", "headerMultiple", "marginMultiple", "lineHeight", "borderRadius", "style"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { memo } from 'react';
import { useStyles } from "./markdown.style";
import { jsx as _jsx } from "react/jsx-runtime";
var Typography = /*#__PURE__*/memo(function (_ref) {
  var ref = _ref.ref,
    children = _ref.children,
    className = _ref.className,
    _ref$fontSize = _ref.fontSize,
    fontSize = _ref$fontSize === void 0 ? 16 : _ref$fontSize,
    _ref$headerMultiple = _ref.headerMultiple,
    headerMultiple = _ref$headerMultiple === void 0 ? 1 : _ref$headerMultiple,
    _ref$marginMultiple = _ref.marginMultiple,
    marginMultiple = _ref$marginMultiple === void 0 ? 2 : _ref$marginMultiple,
    _ref$lineHeight = _ref.lineHeight,
    lineHeight = _ref$lineHeight === void 0 ? 1.8 : _ref$lineHeight,
    _ref$borderRadius = _ref.borderRadius,
    borderRadius = _ref$borderRadius === void 0 ? 8 : _ref$borderRadius,
    style = _ref.style,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useStyles = useStyles(),
    cx = _useStyles.cx,
    styles = _useStyles.styles;
  return /*#__PURE__*/_jsx("article", _objectSpread(_objectSpread({
    className: cx(styles.root, className),
    ref: ref,
    style: _objectSpread({
      // @ts-ignore
      '--lobe-markdown-border-radius': borderRadius,
      '--lobe-markdown-font-size': "".concat(fontSize, "px"),
      '--lobe-markdown-header-multiple': headerMultiple,
      '--lobe-markdown-line-height': lineHeight,
      '--lobe-markdown-margin-multiple': marginMultiple
    }, style)
  }, rest), {}, {
    children: children
  }));
});
Typography.displayName = 'Typography';
export default Typography;