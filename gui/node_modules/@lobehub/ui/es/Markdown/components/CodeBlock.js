function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["fullFeatured", "enableMermaid", "highlight", "mermaid", "children", "animated"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { memo } from 'react';
import { FALLBACK_LANG } from "../../Highlighter/const";
import Pre, { PreMermaid, PreSingleLine } from "../../mdx/mdxComponents/Pre";
import { jsx as _jsx } from "react/jsx-runtime";
var countLines = function countLines(str) {
  var regex = /\n/g;
  var matches = str.match(regex);
  return matches ? matches.length : 1;
};
export var useCode = function useCode(raw) {
  if (!raw) return;
  var _raw$props = raw.props,
    children = _raw$props.children,
    className = _raw$props.className;
  if (!children) return;
  var content = Array.isArray(children) ? children[0] : children;
  var lang = (className === null || className === void 0 ? void 0 : className.replace('language-', '')) || FALLBACK_LANG;
  var isSingleLine = countLines(content) <= 1 && content.length <= 32;
  return {
    content: content,
    isSingleLine: isSingleLine,
    lang: lang
  };
};
export var CodeBlock = /*#__PURE__*/memo(function (_ref) {
  var fullFeatured = _ref.fullFeatured,
    enableMermaid = _ref.enableMermaid,
    highlight = _ref.highlight,
    mermaid = _ref.mermaid,
    children = _ref.children,
    animated = _ref.animated,
    rest = _objectWithoutProperties(_ref, _excluded);
  var code = useCode(children);
  if (!code) return;
  if (enableMermaid && code.lang === 'mermaid') return /*#__PURE__*/_jsx(PreMermaid, _objectSpread(_objectSpread(_objectSpread({
    fullFeatured: fullFeatured
  }, mermaid), rest), {}, {
    children: code.content
  }));
  if (!highlight && code.isSingleLine) return /*#__PURE__*/_jsx(PreSingleLine, {
    language: code.lang,
    children: code.content
  });
  return /*#__PURE__*/_jsx(Pre, _objectSpread(_objectSpread(_objectSpread({
    animated: animated,
    fullFeatured: fullFeatured,
    language: code.lang
  }, highlight), rest), {}, {
    children: code.content
  }));
}, function (prevProps, nextProps) {
  return prevProps.children === nextProps.children;
});