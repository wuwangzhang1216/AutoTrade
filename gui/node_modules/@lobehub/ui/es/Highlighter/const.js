function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import { bundledLanguagesInfo, bundledThemesInfo } from 'shiki';
export var highlighterThemes = [{
  displayName: 'Lobe Theme',
  id: 'lobe-theme'
}].concat(_toConsumableArray(bundledThemesInfo.map(function (item) {
  return {
    displayName: item.displayName,
    id: item.id
  };
})));
export var FALLBACK_LANG = 'plaintext';
export var getCodeLanguageByInput = function getCodeLanguageByInput(input) {
  if (!input) {
    return 'plaintext';
  }
  var inputLang = input.toLocaleLowerCase();
  var matchLang = bundledLanguagesInfo.find(function (lang) {
    var _lang$aliases;
    return lang.id === inputLang || ((_lang$aliases = lang.aliases) === null || _lang$aliases === void 0 ? void 0 : _lang$aliases.includes(inputLang));
  });
  return (matchLang === null || matchLang === void 0 ? void 0 : matchLang.id) || 'plaintext';
};
export var getCodeLanguageFilename = function getCodeLanguageFilename(input) {
  var _matchLang$aliases;
  if (!input) {
    return 'Plaintext';
  }
  var inputLang = input.toLocaleLowerCase();
  var matchLang = bundledLanguagesInfo.find(function (lang) {
    var _lang$aliases2;
    return lang.id === inputLang || ((_lang$aliases2 = lang.aliases) === null || _lang$aliases2 === void 0 ? void 0 : _lang$aliases2.includes(inputLang));
  });
  var type = (matchLang === null || matchLang === void 0 || (_matchLang$aliases = matchLang.aliases) === null || _matchLang$aliases === void 0 ? void 0 : _matchLang$aliases[0]) || (matchLang === null || matchLang === void 0 ? void 0 : matchLang.id) || 'txt';
  return "*.".concat(type);
};
export var getCodeLanguageDisplayName = function getCodeLanguageDisplayName(input) {
  if (!input) {
    return 'Plaintext';
  }
  var inputLang = input.toLocaleLowerCase();
  var matchLang = bundledLanguagesInfo.find(function (lang) {
    var _lang$aliases3;
    return lang.id === inputLang || ((_lang$aliases3 = lang.aliases) === null || _lang$aliases3 === void 0 ? void 0 : _lang$aliases3.includes(inputLang));
  });
  return (matchLang === null || matchLang === void 0 ? void 0 : matchLang.name) || 'Plaintext';
};