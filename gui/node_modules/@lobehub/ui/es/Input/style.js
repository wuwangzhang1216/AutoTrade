var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
import { createStyles } from 'antd-style';
export var useStyles = createStyles(function (_ref) {
  var cx = _ref.cx,
    token = _ref.token,
    css = _ref.css,
    stylish = _ref.stylish,
    prefixCls = _ref.prefixCls;
  return {
    borderless: css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n      &.", "-input {\n        ", "\n        &:hover {\n          ", "\n        }\n      }\n    "])), prefixCls, stylish.variantBorderless, stylish.variantBorderlessWithoutHover),
    borderlessOPT: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n      &.", "-otp {\n        .", "-otp-input {\n          ", ";\n        }\n      }\n    "])), prefixCls, prefixCls, stylish.variantBorderless),
    filled: cx(stylish.variantFilled, css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n        &:focus-within {\n          ", "\n        }\n      "])), stylish.variantFilledWithoutHover)),
    filledOPT: css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n      &.", "-otp {\n        .", "-otp-input {\n          ", ";\n        }\n      }\n    "])), prefixCls, prefixCls, stylish.variantFilled),
    outlined: stylish.variantOutlined,
    outlinedOPT: css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n      &.", "-otp {\n        .", "-otp-input {\n          ", ";\n        }\n      }\n    "])), prefixCls, prefixCls, stylish.variantOutlined),
    root: css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([""]))),
    rootOPT: css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n      &.", "-otp {\n        .", "-otp-input {\n          &:focus-within {\n            border-color: ", ";\n          }\n        }\n      }\n    "])), prefixCls, prefixCls, token.colorBorder),
    shadow: stylish.shadow,
    shadowOPT: css(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n      &.", "-otp {\n        .", "-otp-input {\n          ", ";\n        }\n      }\n    "])), prefixCls, prefixCls, stylish.shadow)
  };
});