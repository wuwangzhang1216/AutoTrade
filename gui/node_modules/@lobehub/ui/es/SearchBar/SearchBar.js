'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["defaultValue", "spotlight", "className", "value", "onInputChange", "placeholder", "enableShortKey", "shortKey", "onSearch", "loading", "style", "onChange", "onBlur", "onPressEnter", "onFocus", "styles", "classNames"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { LucideLoader2, Search } from 'lucide-react';
import { memo, useMemo, useRef, useState } from 'react';
import { useHotkeys } from 'react-hotkeys-hook';
import useControlledState from 'use-merge-value';
import Hotkey from "../Hotkey";
import Icon from "../Icon";
import Input from "../Input";
import Spotlight from "../awesome/Spotlight";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var SearchBar = /*#__PURE__*/memo(function (_ref) {
  var _ref$defaultValue = _ref.defaultValue,
    defaultValue = _ref$defaultValue === void 0 ? '' : _ref$defaultValue,
    spotlight = _ref.spotlight,
    className = _ref.className,
    value = _ref.value,
    onInputChange = _ref.onInputChange,
    placeholder = _ref.placeholder,
    enableShortKey = _ref.enableShortKey,
    _ref$shortKey = _ref.shortKey,
    shortKey = _ref$shortKey === void 0 ? 'mod+k' : _ref$shortKey,
    onSearch = _ref.onSearch,
    loading = _ref.loading,
    style = _ref.style,
    _onChange = _ref.onChange,
    _onBlur = _ref.onBlur,
    _onPressEnter = _ref.onPressEnter,
    _onFocus = _ref.onFocus,
    _ref$styles = _ref.styles,
    _ref$styles2 = _ref$styles === void 0 ? {} : _ref$styles,
    inputStyle = _ref$styles2.input,
    shortKeyStyle = _ref$styles2.shortKey,
    _ref$classNames = _ref.classNames,
    _ref$classNames2 = _ref$classNames === void 0 ? {} : _ref$classNames,
    inputClassName = _ref$classNames2.input,
    shortKeyClassName = _ref$classNames2.shortKey,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useControlledState = useControlledState(defaultValue, {
      defaultValue: defaultValue,
      onChange: onInputChange,
      value: value
    }),
    _useControlledState2 = _slicedToArray(_useControlledState, 2),
    inputValue = _useControlledState2[0],
    setInputValue = _useControlledState2[1];
  var _useState = useState(true),
    _useState2 = _slicedToArray(_useState, 2),
    showTag = _useState2[0],
    setShowTag = _useState2[1];
  var _useStyles = useStyles(),
    styles = _useStyles.styles,
    cx = _useStyles.cx;
  var inputReference = useRef(null);
  var hotkey = useMemo(function () {
    return shortKey.includes('+') ? shortKey : "mod+".concat(shortKey);
  }, [shortKey]);
  useHotkeys(hotkey, function () {
    var _inputReference$curre;
    if (!enableShortKey) return;
    (_inputReference$curre = inputReference.current) === null || _inputReference$curre === void 0 || _inputReference$curre.focus();
  }, {
    enableOnFormTags: true,
    enabled: !!enableShortKey && !!shortKey,
    preventDefault: true
  });
  return /*#__PURE__*/_jsxs("div", {
    className: cx(styles.search, className),
    style: style,
    children: [spotlight && /*#__PURE__*/_jsx(Spotlight, {}), /*#__PURE__*/_jsx(Input, _objectSpread({
      allowClear: true,
      className: inputClassName,
      onBlur: function onBlur(e) {
        _onBlur === null || _onBlur === void 0 || _onBlur(e);
        setInputValue(e.target.value);
        setShowTag(true);
      },
      onChange: function onChange(e) {
        setInputValue(e.target.value);
        _onChange === null || _onChange === void 0 || _onChange(e);
      },
      onFocus: function onFocus(e) {
        _onFocus === null || _onFocus === void 0 || _onFocus(e);
        setShowTag(false);
      },
      onPressEnter: function onPressEnter(e) {
        _onPressEnter === null || _onPressEnter === void 0 || _onPressEnter(e);
        onSearch === null || onSearch === void 0 || onSearch(inputValue);
      },
      placeholder: placeholder !== null && placeholder !== void 0 ? placeholder : 'Type keywords...',
      prefix: /*#__PURE__*/_jsx(Icon, {
        className: styles.icon,
        icon: loading ? LucideLoader2 : Search,
        size: "small",
        spin: loading,
        style: {
          marginRight: 4
        }
      }),
      ref: inputReference,
      style: inputStyle,
      value: inputValue
    }, rest)), enableShortKey && showTag && !inputValue && /*#__PURE__*/_jsx(Hotkey, {
      className: cx(styles.tag, shortKeyClassName),
      compact: true,
      keys: hotkey,
      style: shortKeyStyle
    })]
  });
});
SearchBar.displayName = 'SearchBar';
export default SearchBar;