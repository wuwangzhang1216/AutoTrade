'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["icon", "size", "color", "fill", "className", "focusable", "spin", "fillRule", "fillOpacity", "ref"],
  _excluded2 = ["color", "fill", "fillOpacity", "fillRule", "focusable", "className", "size"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { cva } from 'class-variance-authority';
import { isValidElement, memo, useMemo } from 'react';
import { useIconContext } from "./components/IconProvider";
import { calcSize } from "./components/utils";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
var Icon = /*#__PURE__*/memo(function (_ref) {
  var icon = _ref.icon,
    iconSize = _ref.size,
    color = _ref.color,
    _ref$fill = _ref.fill,
    fill = _ref$fill === void 0 ? 'transparent' : _ref$fill,
    className = _ref.className,
    focusable = _ref.focusable,
    spin = _ref.spin,
    fillRule = _ref.fillRule,
    fillOpacity = _ref.fillOpacity,
    ref = _ref.ref,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useStyles = useStyles(),
    styles = _useStyles.styles,
    cx = _useStyles.cx;
  var variants = useMemo(function () {
    return cva('anticon', {
      defaultVariants: {
        spin: false
      },
      /* eslint-disable sort-keys-fix/sort-keys-fix */
      variants: {
        spin: {
          false: null,
          true: styles.spin
        }
      }
      /* eslint-enable sort-keys-fix/sort-keys-fix */
    });
  }, [styles]);
  var _useIconContext = useIconContext(),
    colorConfig = _useIconContext.color,
    fillConfig = _useIconContext.fill,
    fillOpacityConfig = _useIconContext.fillOpacity,
    fillRuleConfig = _useIconContext.fillRule,
    focusableConfig = _useIconContext.focusable,
    classNameConfig = _useIconContext.className,
    sizeConfig = _useIconContext.size,
    restConfig = _objectWithoutProperties(_useIconContext, _excluded2);
  var _useMemo = useMemo(function () {
      return calcSize(iconSize || sizeConfig);
    }, [iconSize, sizeConfig]),
    size = _useMemo.size,
    strokeWidth = _useMemo.strokeWidth;
  var SvgIcon = icon;
  return /*#__PURE__*/_jsx("span", _objectSpread(_objectSpread(_objectSpread({
    className: cx(variants({
      spin: spin
    }), classNameConfig, className),
    role: "img"
  }, restConfig), rest), {}, {
    children: icon && ( /*#__PURE__*/isValidElement(icon) ? icon : /*#__PURE__*/_jsx(SvgIcon, {
      color: color || colorConfig,
      fill: fill || fillConfig,
      fillOpacity: fillOpacity || fillOpacityConfig,
      fillRule: fillRule || fillRuleConfig,
      focusable: focusable || focusableConfig,
      height: size,
      ref: ref,
      size: size,
      strokeWidth: strokeWidth,
      width: size
    }))
  }));
});
Icon.displayName = 'Icon';
export default Icon;