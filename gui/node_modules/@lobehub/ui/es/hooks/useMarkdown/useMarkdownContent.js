'use client';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { useMemo, useRef, useState } from 'react';
import { useMarkdownContext } from "../../Markdown/components/MarkdownProvider";
import { isLastFormulaRenderable } from "./latex";
import { addToCache, contentCache, preprocessMarkdownContent } from "./utils";
export var useMarkdownContent = function useMarkdownContent(children) {
  var _useMarkdownContext = useMarkdownContext(),
    animated = _useMarkdownContext.animated,
    _useMarkdownContext$e = _useMarkdownContext.enableLatex,
    enableLatex = _useMarkdownContext$e === void 0 ? true : _useMarkdownContext$e,
    enableCustomFootnotes = _useMarkdownContext.enableCustomFootnotes,
    citations = _useMarkdownContext.citations;
  var _useState = useState(''),
    _useState2 = _slicedToArray(_useState, 2),
    validContent = _useState2[0],
    setValidContent = _useState2[1];
  var prevProcessedContent = useRef('');
  var citationsLength = (citations === null || citations === void 0 ? void 0 : citations.length) || 0;

  // Calculate cache key with fewer string concatenations and better performance
  var cacheKey = useMemo(function () {
    return "".concat(children, "|").concat(enableLatex ? 1 : 0, "|").concat(enableCustomFootnotes ? 1 : 0, "|").concat(citationsLength);
  }, [children, enableLatex, enableCustomFootnotes, citationsLength]);

  // Process content and use cache to avoid repeated calculations
  return useMemo(function () {
    // Try to get from cache first for best performance
    if (contentCache.has(cacheKey)) {
      return contentCache.get(cacheKey);
    }

    // Process new content only if needed
    var processedContent = preprocessMarkdownContent(children, {
      citationsLength: citationsLength,
      enableCustomFootnotes: enableCustomFootnotes,
      enableLatex: enableLatex
    });

    // Special handling for LaTeX content when animated
    if (animated && enableLatex) {
      var isRenderable = isLastFormulaRenderable(processedContent);
      if (!isRenderable && validContent) {
        processedContent = validContent;
      }
    }

    // Only update state if content changed (prevents unnecessary re-renders)
    if (processedContent !== prevProcessedContent.current) {
      setValidContent(processedContent);
      prevProcessedContent.current = processedContent;
    }

    // Cache the processed result
    addToCache(cacheKey, processedContent);
    return processedContent;
  }, [cacheKey, children, enableLatex, enableCustomFootnotes, citationsLength, animated, validContent]);
};