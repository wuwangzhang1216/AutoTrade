'use client';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
import { useMemo } from 'react';
import remarkBreaks from 'remark-breaks';
import remarkCjkFriendly from 'remark-cjk-friendly';
import remarkGfm from 'remark-gfm';
import remarkMath from 'remark-math';
import { useMarkdownContext } from "../../Markdown/components/MarkdownProvider";
import { remarkBr } from "../../Markdown/plugins/remarkBr";
import { remarkCustomFootnotes } from "../../Markdown/plugins/remarkCustomFootnotes";
import { remarkGfmPlus } from "../../Markdown/plugins/remarkGfmPlus";
import { remarkVideo } from "../../Markdown/plugins/remarkVideo";
export var useMarkdownRemarkPlugins = function useMarkdownRemarkPlugins() {
  var _useMarkdownContext = useMarkdownContext(),
    enableLatex = _useMarkdownContext.enableLatex,
    enableCustomFootnotes = _useMarkdownContext.enableCustomFootnotes,
    _useMarkdownContext$r = _useMarkdownContext.remarkPlugins,
    remarkPlugins = _useMarkdownContext$r === void 0 ? [] : _useMarkdownContext$r,
    _useMarkdownContext$r2 = _useMarkdownContext.remarkPluginsAhead,
    remarkPluginsAhead = _useMarkdownContext$r2 === void 0 ? [] : _useMarkdownContext$r2,
    variant = _useMarkdownContext.variant,
    allowHtml = _useMarkdownContext.allowHtml;
  var isChatMode = variant === 'chat';
  var memoPlugins = useMemo(function () {
    return [remarkCjkFriendly,
    // Parse math before GFM so that '|' inside $...$ isn't treated as a table separator
    enableLatex && remarkMath, [remarkGfm, {
      singleTilde: false
    }], !allowHtml && remarkBr, !allowHtml && remarkGfmPlus, !allowHtml && remarkVideo, enableCustomFootnotes && remarkCustomFootnotes, isChatMode && remarkBreaks].filter(Boolean);
  }, [allowHtml, isChatMode, enableLatex, enableCustomFootnotes]);
  return useMemo(function () {
    return [].concat(_toConsumableArray(remarkPluginsAhead), _toConsumableArray(memoPlugins), _toConsumableArray(remarkPlugins));
  }, [remarkPlugins, memoPlugins, remarkPluginsAhead]);
};