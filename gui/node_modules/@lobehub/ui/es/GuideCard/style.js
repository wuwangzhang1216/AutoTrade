var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
import { createStyles } from 'antd-style';
export var useStyles = createStyles(function (_ref) {
  var cx = _ref.cx,
    css = _ref.css,
    stylish = _ref.stylish,
    token = _ref.token,
    isDarkMode = _ref.isDarkMode;
  return {
    borderless: stylish.variantBorderlessWithoutHover,
    close: css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    position: absolute;\n    inset-block-start: 8px;\n    inset-inline-end: 8px;\n  "]))),
    content: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    padding: 16px;\n  "]))),
    cover: css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    align-self: center;\n  "]))),
    desc: css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n    color: ", ";\n  "])), token.colorTextDescription),
    filled: cx(stylish.variantFilledWithoutHover, css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n      background: linear-gradient(\n        to bottom,\n        ", ",\n        ", "\n      );\n    "])), isDarkMode ? token.colorFillTertiary : token.colorFillQuaternary, isDarkMode ? token.colorFillQuaternary : token.colorFillTertiary)),
    outlined: stylish.variantOutlinedWithoutHover,
    root: css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n    position: relative;\n    overflow: hidden;\n    border-radius: ", "px;\n  "])), token.borderRadiusLG),
    shadow: stylish.shadow,
    title: css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n    font-size: 16px;\n    font-weight: bold;\n  "])))
  };
});