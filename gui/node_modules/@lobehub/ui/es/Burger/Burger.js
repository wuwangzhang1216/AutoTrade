'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["items", "openKeys", "selectedKeys", "opened", "setOpened", "className", "headerHeight", "onClick", "iconProps", "size", "variant", "rootClassName", "fullscreen", "drawerProps"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { Drawer, Menu } from 'antd';
import { MenuIcon, X } from 'lucide-react';
import { memo } from 'react';
import { Center } from 'react-layout-kit';
import ActionIcon from "../ActionIcon";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var Burger = /*#__PURE__*/memo(function (_ref) {
  var items = _ref.items,
    openKeys = _ref.openKeys,
    selectedKeys = _ref.selectedKeys,
    opened = _ref.opened,
    setOpened = _ref.setOpened,
    className = _ref.className,
    _ref$headerHeight = _ref.headerHeight,
    headerHeight = _ref$headerHeight === void 0 ? 64 : _ref$headerHeight,
    onClick = _ref.onClick,
    iconProps = _ref.iconProps,
    size = _ref.size,
    variant = _ref.variant,
    rootClassName = _ref.rootClassName,
    fullscreen = _ref.fullscreen,
    drawerProps = _ref.drawerProps,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useStyles = useStyles({
      fullscreen: fullscreen,
      headerHeight: headerHeight
    }),
    cx = _useStyles.cx,
    styles = _useStyles.styles;
  return /*#__PURE__*/_jsxs(Center, _objectSpread(_objectSpread({
    className: cx(styles.container, className),
    onClick: function onClick() {
      setOpened(!opened);
    }
  }, rest), {}, {
    children: [/*#__PURE__*/_jsx(ActionIcon, _objectSpread({
      icon: opened ? X : MenuIcon,
      size: size,
      variant: variant
    }, iconProps)), /*#__PURE__*/_jsxs(Drawer, _objectSpread(_objectSpread({
      closeIcon: undefined,
      open: opened,
      placement: 'left',
      width: '100vw'
    }, drawerProps), {}, {
      className: styles.drawer,
      rootClassName: cx(styles.drawerRoot, rootClassName),
      styles: {
        body: {
          padding: 0
        },
        header: {
          display: 'none'
        }
      },
      children: [/*#__PURE__*/_jsx(Menu, {
        className: styles.menu,
        items: items,
        mode: 'inline',
        onClick: onClick,
        openKeys: openKeys,
        selectedKeys: selectedKeys
      }), /*#__PURE__*/_jsx("div", {
        className: styles.fillRect
      })]
    }))]
  }));
});
Burger.displayName = 'Burger';
export default Burger;