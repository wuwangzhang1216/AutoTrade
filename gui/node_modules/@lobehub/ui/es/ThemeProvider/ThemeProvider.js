'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["children", "customStylish", "customToken", "enableCustomFonts", "enableGlobalStyle", "customFonts", "customTheme", "className", "style", "theme"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import { App } from 'antd';
import { ThemeProvider as AntdThemeProvider } from 'antd-style';
import { merge } from 'lodash-es';
import { memo, useCallback, useMemo } from 'react';
import { useCdnFn } from "../ConfigProvider";
import FontLoader from "../FontLoader";
import { lobeCustomStylish, lobeCustomToken } from "../styles";
import { createLobeAntdTheme } from "../styles/theme/antdTheme";
import GlobalStyle from "./GlobalStyle";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
var ThemeProvider = /*#__PURE__*/memo(function (_ref) {
  var children = _ref.children,
    customStylish = _ref.customStylish,
    customToken = _ref.customToken,
    _ref$enableCustomFont = _ref.enableCustomFonts,
    enableCustomFonts = _ref$enableCustomFont === void 0 ? true : _ref$enableCustomFont,
    _ref$enableGlobalStyl = _ref.enableGlobalStyle,
    enableGlobalStyle = _ref$enableGlobalStyl === void 0 ? true : _ref$enableGlobalStyl,
    customFonts = _ref.customFonts,
    _ref$customTheme = _ref.customTheme,
    customTheme = _ref$customTheme === void 0 ? {} : _ref$customTheme,
    className = _ref.className,
    style = _ref.style,
    antdTheme = _ref.theme,
    rest = _objectWithoutProperties(_ref, _excluded);
  var genCdnUrl = useCdnFn();
  var webfontUrls = useMemo(function () {
    return customFonts || [genCdnUrl({
      path: 'css/index.css',
      pkg: '@lobehub/webfont-mono'
    }), genCdnUrl({
      path: 'css/index.css',
      pkg: '@lobehub/webfont-harmony-sans'
    }), genCdnUrl({
      path: 'css/index.css',
      pkg: '@lobehub/webfont-harmony-sans-sc'
    }), genCdnUrl({
      path: 'dist/katex.min.css',
      pkg: 'katex'
    })];
  }, [customFonts, genCdnUrl]);
  var stylish = useCallback(function (theme) {
    return _objectSpread(_objectSpread({}, lobeCustomStylish(theme)), customStylish === null || customStylish === void 0 ? void 0 : customStylish(theme));
  }, [customStylish]);
  var token = useCallback(function (theme) {
    return _objectSpread(_objectSpread({}, lobeCustomToken(theme)), customToken === null || customToken === void 0 ? void 0 : customToken(theme));
  }, [customToken]);
  var theme = useCallback(function (appearance) {
    var lobeTheme = createLobeAntdTheme({
      appearance: appearance,
      neutralColor: customTheme.neutralColor,
      primaryColor: customTheme.primaryColor
    });
    return merge(lobeTheme, antdTheme);
  }, [customTheme.primaryColor, customTheme.neutralColor, antdTheme]);
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [enableCustomFonts && (webfontUrls === null || webfontUrls === void 0 ? void 0 : webfontUrls.length) > 0 && webfontUrls.map(function (webfont) {
      return /*#__PURE__*/_jsx(FontLoader, {
        url: webfont
      }, webfont);
    }), /*#__PURE__*/_jsxs(AntdThemeProvider, _objectSpread(_objectSpread({
      customStylish: stylish,
      customToken: token,
      theme: theme
    }, rest), {}, {
      children: [enableGlobalStyle && /*#__PURE__*/_jsx(GlobalStyle, {}), /*#__PURE__*/_jsx(App, {
        className: className,
        style: _objectSpread({
          minHeight: 'inherit',
          width: 'inherit'
        }, style),
        children: children
      })]
    }))]
  });
});
ThemeProvider.displayName = 'LobeThemeProvider';
export default ThemeProvider;