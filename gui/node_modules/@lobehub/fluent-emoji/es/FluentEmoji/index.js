'use client';

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { createElement, forwardRef, useMemo, useState } from 'react';
import { Center } from 'react-layout-kit';
import { getFluentEmojiCDN } from "../getFluentEmojiCDN";
import { useStyles } from "./style";
import { jsx as _jsx } from "react/jsx-runtime";
var createContainer = function createContainer(as) {
  return /*#__PURE__*/forwardRef(function (props, ref) {
    return /*#__PURE__*/createElement(as, _objectSpread(_objectSpread({}, props), {}, {
      ref: ref
    }));
  });
};
var FluentEmoji = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var emoji = _ref.emoji,
    className = _ref.className,
    style = _ref.style,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? '3d' : _ref$type,
    _ref$cdn = _ref.cdn,
    cdn = _ref$cdn === void 0 ? 'aliyun' : _ref$cdn,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 40 : _ref$size,
    unoptimized = _ref.unoptimized,
    _ref$as = _ref.as,
    as = _ref$as === void 0 ? 'img' : _ref$as,
    _onError = _ref.onError;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    loadingFail = _useState2[0],
    setLoadingFail = _useState2[1];
  var _useStyles = useStyles(),
    cx = _useStyles.cx,
    styles = _useStyles.styles;
  var ImgContainer = useMemo(function () {
    return createContainer(as);
  }, [as]);
  var emojiUrl = useMemo(function () {
    if (type === 'pure') return null;
    return getFluentEmojiCDN(emoji, {
      cdn: cdn,
      type: type
    });
  }, [type, emoji]);
  if (type === 'pure' || !emojiUrl || loadingFail) return /*#__PURE__*/_jsx(Center, {
    className: cx(styles.container, className),
    flex: 'none',
    height: size,
    style: _objectSpread({
      fontSize: size * 0.9
    }, style),
    width: size,
    children: emoji
  });
  return /*#__PURE__*/_jsx(ImgContainer, {
    alt: emoji,
    className: className,
    height: size,
    loading: 'lazy',
    onError: function onError(e) {
      setLoadingFail(true);
      _onError === null || _onError === void 0 || _onError(e);
    },
    ref: ref,
    src: emojiUrl,
    style: _objectSpread({
      flex: 'none'
    }, style),
    unoptimized: unoptimized,
    width: size
  });
});
export default FluentEmoji;